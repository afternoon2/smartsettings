{"version":3,"file":"smartsettings.umd.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/index.js"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import style from './index.css'\n\n/**\n * @class SmartSettings\n * @classdesc SmartSettings module, returns new SmartSettings instance\n * @param {string} name - name of the SmartSettings panel\n * @param {number} left - position of the SmartSettings panel on X axis\n * @param {number} top - position of the SmartSettings panel on Y axis\n * @example\n * const mySettings = new SmartSettings('My Settings', 10, 10)\n*/\nclass SmartSettings {\n    constructor(name = 'SmartSettings', left = 0, top = 0) {\n        this.name = name\n        this.left = left\n        this.top = top\n\n        /**\n         * @property {boolean} _hidden\n         * @private\n         */\n        this._hidden = false\n\n        /**\n         * @property {boolean} _open\n         * @private\n         */\n        this._open = true\n\n        /**\n         * @property {boolean} _draggable\n         * @private\n         */\n        this._draggable = false\n\n        /**\n         * @property {Node} _panel\n         * @private\n         */\n        this._panel = null\n\n        /**\n         * @property {object} _controls\n         * @private\n         */\n        this._controls = {}\n\n        this._createUniqueId()\n        this._create(this.name, this.top, this.left)\n    }\n\n    /* Utility methods */\n\n    /**\n     * Creates unique element identifier\n     * @private\n     */\n    _createUniqueId() {\n        let counter = 0\n        window.uniqueId = () => `sms-id-${counter++}`\n    }\n     \n    /**\n     * Creates any DOM element\n     * @param {string} type - type of the DOM element\n     * @param {Object} attributes - object with all attributes for the DOM element\n     * @returns {Node}\n     * @private \n     */\n    _createElement(type, attributes) {\n        let element = document.createElement(type)\n        if (attributes) {\n            for (let key in attributes) {\n                if (key === 'class') {\n                    element.setAttribute('class', attributes[key])\n                } else {\n                    element[key] = attributes[key]\n                }\n            }\n        }\n        return element\n    }\n\n\n    /* Helper methods */\n\n    /**\n     * Creates settings panel, invoked on class construction\n     * @returns {void}\n     * @private\n     */\n    _create() {\n        let panelAttributes = {\n            class: 'sms-panel',\n            id: uniqueId(),\n            style: `top: ${this.top}px; left: ${this.left}px; z-index: 2`\n        }\n        let panel = this._createElement('div', panelAttributes)\n        let header = this._createElement('div', { class: 'sms-panel-header' })\n        let body = this._createElement('div', { class: 'sms-panel-body' })\n        let paragraph = this._createElement('p', { class: 'sms-panel-header-name' })\n\n        header.addEventListener('click', e => this.toggle())\n\n        paragraph.innerText = this.name\n        header.appendChild(paragraph)\n        panel.appendChild(header)\n        panel.appendChild(body)\n        this._panel = panel\n        document.body.appendChild(this._panel)\n    }\n\n    /**\n     * Creates basic properties for the new control\n     * @returns {object}\n     * @private\n     */\n    _createControlBasics() {\n        let id = uniqueId()\n        let basics = {\n            id: id,\n            disabled: false,\n            hidden: false,\n            value: null,\n            type: null,\n            element: function() {\n                return document.getElementById(this.id)\n            },\n            enable: function() {\n                this.element().removeAttribute('disabled')\n                this.disabled = false\n            },\n            disable: function() {\n                this.element().setAttribute('disabled', true)\n                this.disabled = true\n            },\n            show: function() {\n                if (this.element().classList[1] === 'hide') {\n                    this.element().classList.remove('hide')\n                    this.hidden = false\n                }\n            },\n            hide: function() {\n                if (this.element().classList[1] !== 'hide') {\n                    this.element().classList.add('hide')\n                    this.hidden = true\n                }\n            }\n        }\n        return basics\n    }\n\n    /* Basic methods */\n\n    /**\n     * Removes settings panel from the DOM and removes all sections and controls\n     * @returns {void}\n     * @example\n     * mySettings.destroy()\n     */\n    destroy() {\n        if (this._panel && this._panel.parentElement) {\n            this._panel.parentElement.removeChild(this._panel)\n        }\n        this._panel = null\n        this._controls = {}\n    }\n\n    /**\n     * Shows settings panel or specific control (if the name is provided)\n     * @param {string} [name] - name of control to be shown\n     * @returns {void}\n     * @example\n     * mySettings.show()\n     */\n    show(name) {\n        if (name) {\n            this._controls[name].show()\n        }\n        this._panel.classList.remove('hide')\n        this._hidden = false\n    }\n\n    /**\n     * Hides settings panel or specific control (if the name is provided)\n     * @param {string} [name] - name of control to be hidden\n     * @returns {void}\n     * @example\n     * mySettings.hide()\n     */\n    hide(name) {\n        if (name) {\n            this._controls[name].hide()\n        }\n        this._panel.classList.add('hide')\n        this._hidden = true\n    }\n\n    /**\n     * Open settings panel\n     * @example\n     * mySettings.open()\n     */\n    open() {\n        let panelBody = this._panel.childNodes[1]\n        if (panelBody.classList[1] === 'hide') {\n            panelBody.classList.remove('hide')\n        } \n        this._open = true\n    }\n\n    /**\n     * Close settings panel\n     * @example\n     * mySettings.close()\n     * \n     */\n    close() {\n        let panelBody = this._panel.childNodes[1]\n        panelBody.classList.add('hide')\n        this._open = false\n    }\n\n    /**\n     * Open or close settings panel depending on `_open` property\n     * @returns {void}\n     * @example\n     * mySettings.toggle()\n     */\n    toggle() {\n        let panelBody = this._panel.childNodes[1]\n        panelBody.classList[1] === 'hide' ?\n            panelBody.classList.remove('hide') :\n            panelBody.classList.add('hide')\n        this._open = !this._open\n    }\n\n    /**\n     * Returns panel position [left, top]\n     * @return {array<number>}\n     * @example\n     * let position = mySettings.getPosition() // [0, 0]\n     */\n    getPosition() {\n        return [this.left, this.top]\n    }\n\n    /**\n     * Sets panel position\n     * @param {number} left - new position on the X axis\n     * @param {number} top - new position on the Y axis\n     * @example\n     * mySettings.setPosition(400, 400)\n     */\n    setPosition(left, top) {\n        this.left = left\n        this.top = top\n    }\n\n    /**\n     * Removes specific control\n     * @param {string} name - name of the control to be deleted\n     * @returns {void}\n     * @example\n     * mySettings.remove('Control name')\n     */\n    remove(name) {\n        if (name) {\n            let elem = this._controls[name].element()\n            elem.parentElement.remove()\n            elem.remove()\n            delete this._controls[name]\n        }\n    }\n\n    /**\n     * Get value of specific control\n     * @param {string} name - name of the control\n     * @returns {(number|string)}\n     * @example\n     * let value = mySettings.getValue('Control name')\n     */\n    getValue(name) {\n        if (name && this._controls[name]) {\n            return this._controls[name].getValue()\n        }\n    }\n\n    /**\n     * Sets new active value of the specific control\n     * @param {string} name - name of the control\n     * @param {(number|string)} name - new value\n     * @returns {void}\n     * @example\n     * mySettings.setValue('Control name', 'value')\n     */\n    setValue(name, value) {\n        if (name && this._controls[name]) {\n            return this._controls[name].setValue(value)\n        }\n    }\n\n    /**\n     * Get all active values\n     * @returns {object} - an object with values from all currently set controls\n     * @example\n     * let values = mySettings.getValues()\n     */\n    getValues() {\n        let values = {}\n        for (let i in this._controls) {\n            values[i] = this._controls[i].getValue()\n        }\n        return values\n    }\n\n    /**\n     * Creates button control\n     * @param {string} name - name of the control \n     * @param {function} callback - function executed on each change\n     * @returns {object} button control object\n     */\n    button(name, callback) {\n        let base = this._createControlBasics()\n        let body = this._panel.childNodes[1]\n        let wrapper = this._createElement('div', {\n            class: 'sms-control'\n        })\n        let button = this._createElement('button', {\n            class: 'sms-button',\n            id: base.id\n        })\n        base.type = 'button'\n        base.value = name\n        button.innerText = name\n        button.addEventListener('click', callback)\n        wrapper.appendChild(button)\n        base.getValue = function() {\n            return base.element().innerText\n        }\n        base.setValue = function(value) {\n            base.value = value\n            base.element().innerText = value\n        }\n        body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name]\n    }\n}\n\nexport default SmartSettings"],"names":["styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","SmartSettings","name","left","top","_hidden","_open","_draggable","_panel","_controls","_createUniqueId","_create","counter","window","uniqueId","attributes","element","key","setAttribute","panelAttributes","class","id","panel","_createElement","header","body","paragraph","addEventListener","toggle","innerText","basics","disabled","hidden","value","getElementById","enable","removeAttribute","disable","show","classList","remove","hide","add","parentElement","removeChild","panelBody","childNodes","elem","getValue","setValue","values","i","callback","base","_createControlBasics","wrapper","button"],"mappings":"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"}