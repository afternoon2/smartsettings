{"version":3,"file":"smartsettings.umd.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/index.js"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import style from './index.css'\n\n/**\n * @class SmartSettings\n * @classdesc SmartSettings module, returns new SmartSettings instance\n * @param {string} name - name of the SmartSettings panel\n * @param {number} left - position of the SmartSettings panel on X axis\n * @param {number} top - position of the SmartSettings panel on Y axis\n * @example\n * const mySettings = new SmartSettings('My Settings', 10, 10)\n*/\nclass SmartSettings {\n    constructor(name = 'SmartSettings', left = 0, top = 0) {\n        this.name = name\n        this.initialLeft = left\n        this.initialTop = top\n\n        /**\n         * @property {boolean} _hidden\n         * @private\n         */\n        this._hidden = false\n\n        /**\n         * @property {boolean} _open\n         * @private\n         */\n        this._open = true\n\n        /**\n         * @property {boolean} _draggable\n         * @private\n         */\n        this._draggable = false\n\n        /**\n         * @property {Node} _panel\n         * @private\n         */\n        this._panel = null\n\n        /**\n         * @property {object} _controls\n         * @private\n         */\n        this._controls = {}\n\n        /**\n         * @property {?function} _globalWatcher\n         * @private\n         */\n        this._globalWatcher = null\n\n        this._createUniqueId()\n        this._create(this.name, this.initialTop, this.initialLeft)\n\n        /**\n         * @property {?Node} _panelBody - body div\n         * @private\n         */\n        this._body = this._panel ? this._panel.childNodes[1] : null\n\n        /**\n         * @property {?number} _top\n         * @private\n         */\n        this._top = this.initialTop\n\n        /**\n         * @property {number} _left\n         * @private\n         */\n        this._left = this.initialLeft\n    }\n\n    /* Utility methods */\n\n    /**\n     * Creates unique element identifier\n     * @private\n     */\n    _createUniqueId() {\n        let counter = 0\n        window.uniqueId = () => `sms-id-${counter++}`\n    }\n     \n    /**\n     * Creates any DOM element\n     * @param {string} type - type of the DOM element\n     * @param {Object} attributes - object with all attributes for the DOM element\n     * @returns {Node}\n     * @private \n     */\n    _createElement(type, attributes) {\n        let element = document.createElement(type)\n        if (attributes) {\n            for (let key in attributes) {\n                if (key === 'class') {\n                    element.setAttribute('class', attributes[key])\n                } else {\n                    element[key] = attributes[key]\n                }\n            }\n        }\n        return element\n    }\n\n    /**\n     * Creates label element\n     * @param {string} name - name in the label\n     * @returns {Node}\n     * @private\n     */\n    _createLabel(name) {\n        return this._createElement('label', {\n            class: 'sms-label',\n            innerText: name,\n            value: name\n        })\n    }\n    /**\n     * Calls the global watcher\n     * @param {EventListenerObject} event - an event\n     * @returns {void}\n     * @private\n     */\n    _callGlobalWatcher(e) {\n        if (this._globalWatcher) {\n            this._globalWatcher(e)\n        }\n    }\n\n    /**\n     * Assigns config entry to the specific control creation method\n     * @param {object} entry - entry of the config object|array\n     * @private\n     */\n    _assignEntryToMethod(_entry) {\n        let _isCallback = _entry.callback ? _entry.callback : null\n        switch (_entry.type) {\n        case 'button':\n            this.button(_entry.name, _isCallback)\n            break\n        case 'range':\n            this.range(_entry.name, _entry.items, _isCallback)\n            break\n        case 'select':\n            this.select(_entry.name, _entry.items, _isCallback)\n            break\n        case 'text':\n            this.text(_entry.name, _entry.value, _isCallback)\n            break\n        case 'textarea':\n            this.text(_entry.name, _entry.value, _isCallback)\n            break\n        case 'checkbox':\n            this.checkbox(_entry.name, _entry.value, _isCallback)\n            break\n        case 'number':\n            this.number(_entry.name, _entry.items, _isCallback)\n            break\n        case 'color':\n            this.color(_entry.name, _entry.value, _isCallback)\n            break\n        case 'file':\n            this.file(_entry.name, _isCallback)\n        }\n    }\n\n    /**\n     * Dispatches an event after setting new items or new value to the control\n     * @param {Node} element - DOM element dispatcher\n     * @param {string} type - type of the control\n     * @returns {void}\n     * @private\n     */\n    _dispatchEvent(element, type) {\n        let _eventType\n        if (type === 'button') {\n            _eventType = 'click'\n        }\n        if (\n            type === 'text' || \n            type === 'textarea' || \n            type === 'range' ||\n            type === 'color' ||\n            type === 'number'\n        ) {\n            _eventType = 'input'\n        }\n        if (\n            type === 'checkbox' ||\n            type === 'select' ||\n            type === 'file'\n        ) {\n            _eventType = 'change'\n        }\n        element.dispatchEvent(new Event(_eventType))\n    }\n\n    /* Helper methods */\n\n    /**\n     * Creates settings panel, invoked on class construction\n     * @returns {void}\n     * @private\n     */\n    _create() {\n        let self = this\n        let panelAttributes = {\n            class: 'sms-panel',\n            id: uniqueId(),\n            style: `top: ${this.initialTop}px; left: ${this.initialLeft}px; z-index: 2`\n        }\n        let panel = this._createElement('div', panelAttributes)\n        let header = this._createElement('div', { class: 'sms-panel-header' })\n        let body = this._createElement('div', { class: 'sms-panel-body' })\n        let paragraph = this._createElement('p', { class: 'sms-panel-header-name' })\n        header.addEventListener('click', e => this.toggle())\n        paragraph.innerText = this.name\n        header.appendChild(paragraph)\n        panel.appendChild(header)\n        panel.appendChild(body)\n        this._panel = panel\n        document.body.appendChild(this._panel)\n    }\n\n    /**\n     * Creates basic properties for the new control\n     * @returns {object}\n     * @private\n     */\n    _createControlBasics() {\n        let id = uniqueId()\n        let basics = {\n            id: id,\n            disabled: false,\n            hidden: false,\n            value: null,\n            name: null,\n            type: null,\n            element: function() {\n                return document.getElementById(this.id)\n            },\n            enable: function() {\n                this.element().removeAttribute('disabled')\n                this.disabled = false\n            },\n            disable: function() {\n                this.element().setAttribute('disabled', true)\n                this.disabled = true\n            },\n            show: function() {\n                if (this.element().classList[1] === 'hide') {\n                    this.element().classList.remove('hide')\n                    this.hidden = false\n                }\n            },\n            hide: function() {\n                if (this.element().classList[1] !== 'hide') {\n                    this.element().classList.add('hide')\n                    this.hidden = true\n                }\n            }\n        }\n        return basics\n    }\n\n    /**\n     * Returns select option\n     * @param {(string|number)} item - option value\n     * @returns {Node}\n     * @private\n     */\n    _createSelectOption(item) {\n        let option = this._createElement('option', {\n            class: 'sms-select-option',\n            value: item\n        })\n        option.innerText = item\n        return option\n    }\n\n    /* Basic methods */\n\n    /**\n     * Removes settings panel from the DOM and removes all sections and controls\n     * @returns {void}\n     * @example\n     * mySettings.destroy()\n     */\n    destroy() {\n        if (this._panel && this._panel.parentElement) {\n            this._panel.parentElement.removeChild(this._panel)\n        }\n        this._panel = null\n        this._controls = {}\n    }\n\n    /**\n     * Shows settings panel or specific control (if the name is provided)\n     * @param {string} [name] - name of control to be shown\n     * @returns {void}\n     * @example\n     * mySettings.show()\n     */\n    show(name) {\n        if (name) {\n            this._controls[name].show()\n        }\n        this._panel.classList.remove('hide')\n        this._hidden = false\n    }\n\n    /**\n     * Hides settings panel or specific control (if the name is provided)\n     * @param {string} [name] - name of control to be hidden\n     * @returns {void}\n     * @example\n     * mySettings.hide()\n     */\n    hide(name) {\n        if (name) {\n            this._controls[name].hide()\n        }\n        this._panel.classList.add('hide')\n        this._hidden = true\n    }\n\n    /**\n     * Enables specific control\n     * @param {string} name\n     * @returns {void}\n     * @example\n     * mySettings.enable('Checkbox control')\n     */\n    enable(name) {\n        if (name && this._controls[name]) {\n            return this._controls[name].enable()\n        }\n    }\n\n    /**\n     * Disables specific control\n     * @param {string} name\n     * @returns {void}\n     * @example\n     * mySettings.enable('Checkbox control')\n     */\n    disable(name) {\n        if (name && this._controls[name]) {\n            return this._controls[name].disable()\n        }\n    }\n\n    /**\n     * Open settings panel\n     * @example\n     * mySettings.open()\n     */\n    open() {\n        if (this._body.classList[1] === 'hide') {\n            this._body.classList.remove('hide')\n        } \n        this._open = true\n    }\n\n    /**\n     * Close settings panel\n     * @example\n     * mySettings.close()\n     * \n     */\n    close() {\n        this._body.classList.add('hide')\n        this._open = false\n    }\n\n    /**\n     * Open or close settings panel depending on `_open` property\n     * @returns {void}\n     * @example\n     * mySettings.toggle()\n     */\n    toggle() {\n        this._body.classList[1] === 'hide' ?\n            this._body.classList.remove('hide') :\n            this._body.classList.add('hide')\n        this._open = !this._open\n    }\n\n    /**\n     * Returns panel position [left, top]\n     * @return {array<string>}\n     * @example\n     * let position = mySettings.getPosition() // [0, 0]\n     */\n    getPosition() {\n        return [\n            this._panel.style.left,\n            this._panel.style.top\n        ]\n    }\n\n    /**\n     * Sets panel position\n     * @param {number} left - new position on the X axis\n     * @param {number} top - new position on the Y axis\n     * @example\n     * mySettings.setPosition(400, 400)\n     */\n    setPosition(left, top) {\n        this.initialLeft = left\n        this.initialTop = top\n        this._panel.style.left = `${left}px`\n        this._panel.style.top = `${top}px`\n    }\n\n    /**\n     * Removes specific control\n     * @param {string} name - name of the control to be deleted\n     * @returns {void}\n     * @example\n     * mySettings.remove('Control name')\n     */\n    remove(name) {\n        if (name) {\n            let elem = this._controls[name].element()\n            elem.parentElement.remove()\n            elem.remove()\n            delete this._controls[name]\n        }\n    }\n\n    /**\n     * Get value of specific control\n     * @param {string} name - name of the control\n     * @returns {(number|string|boolean)}\n     * @example\n     * let value = mySettings.getValue('Control name')\n     */\n    getValue(name) {\n        if (name && this._controls[name] && this._controls[name].getValue) {\n            return this._controls[name].getValue()\n        }\n    }\n\n    /**\n     * Sets new active value of the specific control. (Changing button control value does not change its' id property)\n     * @param {string} name - name of the control\n     * @param {(number|string|boolean)} name - new value\n     * @returns {void}\n     * @example\n     * mySettings.setValue('Control name', 'value')\n     */\n    setValue(name, value) {\n        if (name && this._controls[name] && this._controls[name].setValue) {\n            return this._controls[name].setValue(value)\n        }\n    }\n\n    /**\n     * Get all active values\n     * @returns {object} - an object with values from all currently set controls\n     * @example\n     * let values = mySettings.getActiveValues()\n     */\n    getActiveValues() {\n        let values = {}\n        for (let i in this._controls) {\n            if (this._controls[i].getValue) {\n                values[i] = this._controls[i].getValue()\n            }\n        }\n        return values\n    }\n\n    /**\n     * Get select/range/progressbar items\n     * @param {string} name - name of the control\n     * @returns {array}\n     * @example\n     * let selectValues = mySettings.\n     */\n    getItems(name) {\n        let typeCondition = (\n            this._controls[name].type === 'range' || \n            this._controls[name].type === 'select' || \n            this._controls[name].type === 'progressbar'\n        )\n        if (this._controls[name] && typeCondition) {\n            return this._controls[name].getItems()\n        } else {\n            throw new Error('Chosen control is not a range, select or progressbar type')\n        }\n    }\n\n    /**\n     * Set (update) select/range/progressbar items\n     * @param {string} name - name of the control\n     * @param {array} items - array of new items\n     * @returns {void}\n     * @example\n     * mySettings.setItems('Select', [1, 2, 3, 4])\n     */\n    setItems(name, items) {\n        let typeCondition = (\n            this._controls[name].type === 'range' ||\n            this._controls[name].type === 'select' ||\n            this._controls[name].type === 'progressbar'\n        )\n        if (this._controls[name] && typeCondition) {\n            return this._controls[name].setItems(items)\n        } else {\n            throw new Error('Chosen control is not a range, select or progressbar type')\n        }\n    }\n\n    /**\n     * Creates button control\n     * @param {string} name - name of the control \n     * @param {function} callback - function executed on each change\n     * @returns {object} button control object\n     * @example\n     * let button = mySettings.button('Button Name', () => console.log('This is the button'))\n     */\n    button(name, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', {\n            class: 'sms-control'\n        })\n        let button = this._createElement('button', {\n            class: 'sms-button',\n            id: base.id,\n            innerText: name,\n            value: name\n        })\n        base.type = 'button'\n        base.name = name\n        button.addEventListener('click', e => {\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        wrapper.appendChild(button)\n        this._body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates text input control\n     * @param {string} name - name of the control\n     * @param {string} value - value of the control\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let textInput = mySettings.text('Text input', 'Hello world')\n     */\n    text(name, value, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let input = this._createElement('input', {\n            class: 'sms-text',\n            id: base.id,\n            type: 'text',\n            innerText: value,\n            placeholder: value,\n            value: value\n        })\n        base.name = name\n        base.value = value\n        base.type = 'text'\n        wrapper.appendChild(label)\n        wrapper.appendChild(input)\n        input.addEventListener('input', e => {\n            base.value = e.target.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        this._body.appendChild(wrapper)\n        base.getValue = function() {\n            return this.element().value\n        }\n        base.setValue = function(value) {\n            base.value = value\n            base.element().innerText = value\n            base.element().value = value\n            self._dispatchEvent(base.element(), base.type)\n        }\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates textarea control\n     * @param {string} name - name of the control\n     * @param {string} value - value of the control\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let textarea = mySettings.textarea('Text input', 'Hello world')\n     */\n    textarea(name, value, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let textarea = this._createElement('textarea', {\n            class: 'sms-textarea',\n            id: base.id,\n            innerText: value,\n            value: value,\n            placeholder: value\n        })\n        base.name = name\n        base.value = value\n        base.type = 'text'\n        wrapper.appendChild(label)\n        wrapper.appendChild(textarea)\n        textarea.addEventListener('input', e => {\n            base.value = e.target.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        base.getValue = function () {\n            return this.element().value\n        }\n        base.setValue = function (value) {\n            base.value = value\n            base.element().innerText = value\n            base.element().value = value\n            self._dispatchEvent(base.element(), base.type)\n        }\n        this._body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates range control\n     * @param {string} name - name of the control\n     * @param {array} items - array with min, max, default and step values\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let range = mySettings.range('Range', [1, 100, 40, 1], e => console.log(e.target.value))\n     */\n    range(name, items, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let span = this._createElement('span', { class: 'sms-label-span' })\n        let input = this._createElement('input', {\n            class: 'sms-range',\n            id: base.id,\n            type: 'range',\n            min: items[0],\n            max: items[1],\n            value: items[2],\n            step: items[3]\n        })\n\n        base.type = 'range'\n        base.name = name\n        base.value = items[2]\n        input.addEventListener('input', e => {\n            base.value = parseFloat(e.target.value)\n            span.innerText = base.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        span.innerText = base.value\n        label.appendChild(span)\n        wrapper.appendChild(label)\n        wrapper.appendChild(input)\n        this._body.appendChild(wrapper)\n        base.getValue = function() {\n            return parseFloat(base.element().value)\n        }\n        base.setValue = function(v) {\n            base.value = v\n            base.element().value = v\n            self._dispatchEvent(base.element(), base.type)\n        }\n        base.getItems = function() {\n            let e = base.element()\n            return [\n                parseFloat(e.min),\n                parseFloat(e.max),\n                parseFloat(e.value),\n                parseFloat(e.step),\n            ]\n        }\n        base.setItems = function(items) {\n            let e = base.element()\n            e.min = items[0]\n            e.max = items[1]\n            e.value = items[2]\n            e.step = items[3]\n            base.value = parseFloat(e.value)\n            self._dispatchEvent(base.element(), base.type)\n        }\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates checkbox control\n     * @param {string} name - name of the control\n     * @param {boolean} value - value of the control\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let checkbox = mySettings.checkbox('Check this out!', true, e => {\n     *      console.log(e.target.value)\n     * })\n     */\n    checkbox(name, value, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let checkbox = this._createElement('input', {\n            class: 'sms-checkbox',\n            id: base.id,\n            type: 'checkbox'\n        })\n        base.name = name\n        base.type = 'checkbox'\n        base.value = value\n        if (value === true) {\n            checkbox.setAttribute('checked', true)\n        }\n        checkbox.addEventListener('change', e => {\n            base.value = e.target.checked\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        wrapper.appendChild(label)\n        wrapper.appendChild(checkbox)\n        base.getValue = function() {\n            return base.element().checked\n        }\n        base.setValue = function(v) {\n            base.element().checked = v\n            base.value = v\n            self._dispatchEvent(base.element(), base.type)\n        }\n        this._body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates color control\n     * @param {string} name - name of the control\n     * @param {string} value -hexadecimal string value of initial color\n     * @param {function} [callback] - function executed afer each change\n     * @returns {object}\n     * @example\n     * let color = mySettings.color('Color control', '#fcfcfc', e => someCallbackFunction())\n     */\n    color(name, value, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let span = this._createElement('span', { class: 'sms-label-span' })\n        let input = this._createElement('input', {\n            class: 'sms-color',\n            id: base.id,\n            type: 'color'\n        })\n        base.name = name\n        base.type = 'color'\n        base.value = value\n        input.setAttribute('value', value)\n        input.addEventListener('input', e => {\n            base.value = e.target.value\n            span.innerText = e.target.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        span.innerText = value\n        label.appendChild(span)\n        wrapper.appendChild(label)\n        wrapper.appendChild(input)\n        base.getValue = function() {\n            return base.element().value\n        }\n        base.setValue = function(v) {\n            base.element().value = v\n            base.value = v\n            span.innerText = v\n            self._dispatchEvent(base.element(), base.type)\n        }\n        this._body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates select control\n     * @param {string} name - name of the control\n     * @param {array} items - array with option values\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let select = mySettings.select('Select', ['Option 1', 'Option 2', 'Option 3'])\n     */\n    select(name, items, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let select = this._createElement('select', {\n            class: 'sms-select',\n            id: base.id,\n            name: name,\n            value: items[0]\n        })\n        wrapper.appendChild(label)\n        items.map(item => {\n            let option = self._createSelectOption(item)\n            select.options.add(option)\n        })\n        select.addEventListener('change', e => {\n            base.value = e.target.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        wrapper.appendChild(select)\n        base.value = items[0]\n        base.name = name\n        base.type = 'select'\n        base.getValue = function() {\n            let _select = base.element()\n            return _select.options[_select.selectedIndex].value\n        }\n        base.setValue = function(v) {\n            base.value = v\n            let _select = base.element()\n            select.options[select.selectedIndex] = self._createSelectOption(v)\n            _select.value = v\n            self._dispatchEvent(base.element(), base.type)\n        }\n        base.getItems = function() {\n            return Array\n                .from(base.element().options)\n                .map(option => option.value)\n        }\n        base.setItems = function(items) {\n            let _select = base.element()\n            items.forEach(item => {\n                let _index = items.indexOf(item)\n                _select.options[_index] = self._createSelectOption(item)\n            })\n            self._dispatchEvent(base.element(), base.type)\n        }\n        this._body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates number control\n     * @param {string} name - name of the control\n     * @param {array} items - array with initial and step value\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let number = mySettings.number('Number', [10, 1], e => {})\n     */\n    number(name, items, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let input = this._createElement('input', {\n            class: 'sms-number',\n            id: base.id,\n            type: 'number',\n            value: items[0],\n            step: items[1]\n        })\n        input.addEventListener('input', e => {\n            base.value = parseFloat(e.target.value)\n            if (callback) {\n                callback(parseFloat(e))\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        base.type = 'number'\n        base.name = name\n        base.value = items[0]\n        base.getValue = function() {\n            return parseFloat(base.element().value)\n        }\n        base.setValue = function(v) {\n            base.element().value = v\n            base.value = v\n            self._dispatchEvent(base.element(), base.type)\n        }\n        wrapper.appendChild(label)\n        wrapper.appendChild(input)\n        this._body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name] = base\n    }\n\n    /**\n     * Creates file input control\n     * @param {string} name - name of the control\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let fileControl = mySettings.file('File control', someCallbackFunction)\n     */\n    file(name, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let upload = this._createElement('input', {\n            class: 'sms-file',\n            id: base.id,\n            type: 'file'\n        })\n        base.name = name\n        base.type = 'file'\n        upload.addEventListener('change', e => {\n            base.value = e.target.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        wrapper.appendChild(label)\n        wrapper.appendChild(upload)\n        base.getValue = function() {\n            return base.element().files[0]\n        }\n        base.setValue = function(v) {\n            base.value = v\n            base.element().files[0] = v\n            self._dispatchEvent(base.element(), base.type)\n        }\n        this._body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name] = base\n    }\n\n    /**\n     * Watch panel for changes and fire callback on each change\n     * @param {function} callback - function executed on each change in the panel\n     * @returns {void}\n     * @example\n     * mySettings.watch(callback)\n     */\n    watch(callback) {\n        this._globalWatcher = callback\n    }\n\n    /**\n     * Load controls from the configuration object.\n     * @param {(object|string|array)} config - configuration object or JSON string or configuration array of objects\n     * @returns {void}\n     * @example\n     * const mySettings = new SmartSettings('Name', 10, 10)\n     * mySettings.loadConfig({\n     *      control1: {\n     *          type: 'color',\n     *          name: 'Color',\n     *          value: '#fd3ef4',\n     *          callback: someCallbackFunction\n     *      },\n     *      // etc.\n     * })\n     * \n     * // or\n     * mySettings.loadConfig('{\n     *      \"control1\": {\n     *          \"type\": \"color\",\n     *          \"name\": \"Color\",\n     *          \"value\": \"#fd3ef4\",\n     *          \"callback\": \"someCallbackFunction\"\n     *      },\n     *      // etc.\n     * })\n     * \n     * // or\n     * mySettings.loadConfig([{\n     *      {\n     *          type: 'color',\n     *          name: 'Color',\n     *          value: '#fd3ef4',\n     *          callback: someCallbackFunction\n     *      },\n     *      // etc.\n     * ])\n     */\n    loadConfig(config) {\n        if (!config) {\n            throw new Error('There is no config provided')\n        }\n        if (typeof config === 'string' || !Array.isArray(config)) {\n            if (typeof config === 'string') {\n                config = JSON.parse(config)\n            }\n            for (let key in config) {\n                let _entry = config[key]\n                this._assignEntryToMethod(_entry)\n            }\n        }\n        if (Array.isArray(config) === true) {\n            config.forEach(entry => this._assignEntryToMethod(entry))\n        }\n    }\n}\n\nexport default SmartSettings"],"names":["css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","name","left","top","initialLeft","initialTop","_hidden","_open","_draggable","_panel","_controls","_globalWatcher","_createUniqueId","_create","this","_body","childNodes","_top","_left","counter","uniqueId","attributes","element","key","setAttribute","_createElement","e","_entry","_isCallback","callback","button","range","items","select","text","value","checkbox","number","color","file","_eventType","dispatchEvent","Event","panelAttributes","panel","header","class","body","paragraph","addEventListener","_this","toggle","innerText","getElementById","id","removeAttribute","disabled","classList","remove","hidden","add","item","option","parentElement","removeChild","show","hide","enable","disable","elem","getValue","setValue","values","i","typeCondition","getItems","Error","setItems","self","base","_createControlBasics","wrapper","_callGlobalWatcher","label","_createLabel","input","target","_dispatchEvent","textarea","span","parseFloat","v","min","max","step","checked","map","_createSelectOption","options","_select","selectedIndex","Array","from","forEach","_index","indexOf","upload","files","config","isArray","JSON","parse","_assignEntryToMethod","_this2","entry"],"mappings":"0LAAA,SAAqBA,EAAKC,QACX,IAARA,IAAiBA,UAClBC,EAAWD,EAAIC,YAEdF,GAA2B,oBAAbG,cAEfC,EAAOD,SAASC,MAAQD,SAASE,qBAAqB,QAAQ,GAC9DC,EAAQH,SAASI,cAAc,WAC7BC,KAAO,WAEI,QAAbN,GACEE,EAAKK,aACFC,aAAaJ,EAAOF,EAAKK,cAK3BE,YAAYL,GAGfA,EAAMM,aACFA,WAAWC,QAAUb,IAErBW,YAAYR,SAASW,eAAed,6mLCX9Be,yDAAO,gBAAiBC,yDAAO,EAAGC,yDAAM,iBAC3CF,KAAOA,OACPG,YAAcF,OACdG,WAAaF,OAMbG,SAAU,OAMVC,OAAQ,OAMRC,YAAa,OAMbC,OAAS,UAMTC,kBAMAC,eAAiB,UAEjBC,uBACAC,QAAQC,KAAKb,KAAMa,KAAKT,WAAYS,KAAKV,kBAMzCW,MAAQD,KAAKL,OAASK,KAAKL,OAAOO,WAAW,GAAK,UAMlDC,KAAOH,KAAKT,gBAMZa,MAAQJ,KAAKV,oEAUde,EAAU,SACPC,SAAW,2BAAgBD,4CAUvBzB,EAAM2B,OACbC,EAAUjC,SAASI,cAAcC,MACjC2B,MACK,IAAIE,KAAOF,EACA,UAARE,IACQC,aAAa,QAASH,EAAWE,MAEjCA,GAAOF,EAAWE,UAI/BD,uCASErB,UACFa,KAAKW,eAAe,eAChB,sBACIxB,QACJA,+CASIyB,GACXZ,KAAKH,qBACAA,eAAee,gDASPC,OACbC,EAAcD,EAAOE,SAAWF,EAAOE,SAAW,YAC9CF,EAAOjC,UACV,cACIoC,OAAOH,EAAO1B,KAAM2B,aAExB,aACIG,MAAMJ,EAAO1B,KAAM0B,EAAOK,MAAOJ,aAErC,cACIK,OAAON,EAAO1B,KAAM0B,EAAOK,MAAOJ,aAEtC,WAGA,gBACIM,KAAKP,EAAO1B,KAAM0B,EAAOQ,MAAOP,aAEpC,gBACIQ,SAAST,EAAO1B,KAAM0B,EAAOQ,MAAOP,aAExC,cACIS,OAAOV,EAAO1B,KAAM0B,EAAOK,MAAOJ,aAEtC,aACIU,MAAMX,EAAO1B,KAAM0B,EAAOQ,MAAOP,aAErC,YACIW,KAAKZ,EAAO1B,KAAM2B,2CAWhBN,EAAS5B,OAChB8C,SACS,WAAT9C,MACa,SAGJ,SAATA,GACS,aAATA,GACS,UAATA,GACS,UAATA,GACS,WAATA,MAEa,SAGJ,aAATA,GACS,WAATA,GACS,SAATA,MAEa,YAET+C,cAAc,IAAIC,MAAMF,iDAY5BG,SACO,eACHvB,yBACWN,KAAKT,wBAAuBS,KAAKV,8BAEhDwC,EAAQ9B,KAAKW,eAAe,MAAOkB,GACnCE,EAAS/B,KAAKW,eAAe,OAASqB,MAAO,qBAC7CC,EAAOjC,KAAKW,eAAe,OAASqB,MAAO,mBAC3CE,EAAYlC,KAAKW,eAAe,KAAOqB,MAAO,4BAC3CG,iBAAiB,QAAS,mBAAKC,EAAKC,aACjCC,UAAYtC,KAAKb,OACpBJ,YAAYmD,KACbnD,YAAYgD,KACZhD,YAAYkD,QACbtC,OAASmC,WACLG,KAAKlD,YAAYiB,KAAKL,iEAStBW,qBAGK,UACF,QACD,UACD,UACA,aACG,kBACE/B,SAASgE,eAAevC,KAAKwC,YAEhC,gBACChC,UAAUiC,gBAAgB,iBAC1BC,UAAW,WAEX,gBACAlC,UAAUE,aAAa,YAAY,QACnCgC,UAAW,QAEd,WACkC,SAAhC1C,KAAKQ,UAAUmC,UAAU,UACpBnC,UAAUmC,UAAUC,OAAO,aAC3BC,QAAS,SAGhB,WACkC,SAAhC7C,KAAKQ,UAAUmC,UAAU,UACpBnC,UAAUmC,UAAUG,IAAI,aACxBD,QAAS,iDAaVE,OACZC,EAAShD,KAAKW,eAAe,gBACtB,0BACAoC,aAEJT,UAAYS,EACZC,oCAYHhD,KAAKL,QAAUK,KAAKL,OAAOsD,oBACtBtD,OAAOsD,cAAcC,YAAYlD,KAAKL,aAE1CA,OAAS,UACTC,0CAUJT,GACGA,QACKS,UAAUT,GAAMgE,YAEpBxD,OAAOgD,UAAUC,OAAO,aACxBpD,SAAU,+BAUdL,GACGA,QACKS,UAAUT,GAAMiE,YAEpBzD,OAAOgD,UAAUG,IAAI,aACrBtD,SAAU,iCAUZL,MACCA,GAAQa,KAAKJ,UAAUT,UAChBa,KAAKJ,UAAUT,GAAMkE,yCAW5BlE,MACAA,GAAQa,KAAKJ,UAAUT,UAChBa,KAAKJ,UAAUT,GAAMmE,yCAUA,SAA5BtD,KAAKC,MAAM0C,UAAU,SAChB1C,MAAM0C,UAAUC,OAAO,aAE3BnD,OAAQ,uCAURQ,MAAM0C,UAAUG,IAAI,aACpBrD,OAAQ,mCAUe,cAAvBQ,MAAM0C,UAAU,GACjB3C,KAAKC,MAAM0C,UAAUC,OAAO,QAC5B5C,KAAKC,MAAM0C,UAAUG,IAAI,aACxBrD,OAASO,KAAKP,mDAWfO,KAAKL,OAAOjB,MAAMU,KAClBY,KAAKL,OAAOjB,MAAMW,yCAWdD,EAAMC,QACTC,YAAcF,OACdG,WAAaF,OACbM,OAAOjB,MAAMU,KAAUA,YACvBO,OAAOjB,MAAMW,IAASA,sCAUxBF,MACCA,EAAM,KACFoE,EAAOvD,KAAKJ,UAAUT,GAAMqB,YAC3ByC,cAAcL,WACdA,gBACE5C,KAAKJ,UAAUT,qCAWrBA,MACDA,GAAQa,KAAKJ,UAAUT,IAASa,KAAKJ,UAAUT,GAAMqE,gBAC9CxD,KAAKJ,UAAUT,GAAMqE,4CAY3BrE,EAAMkC,MACPlC,GAAQa,KAAKJ,UAAUT,IAASa,KAAKJ,UAAUT,GAAMsE,gBAC9CzD,KAAKJ,UAAUT,GAAMsE,SAASpC,iDAWrCqC,SACC,IAAIC,KAAK3D,KAAKJ,UACXI,KAAKJ,UAAU+D,GAAGH,aACXG,GAAK3D,KAAKJ,UAAU+D,GAAGH,mBAG/BE,mCAUFvE,OACDyE,EAC8B,UAA9B5D,KAAKJ,UAAUT,GAAMP,MACS,WAA9BoB,KAAKJ,UAAUT,GAAMP,MACS,gBAA9BoB,KAAKJ,UAAUT,GAAMP,QAErBoB,KAAKJ,UAAUT,IAASyE,SACjB5D,KAAKJ,UAAUT,GAAM0E,iBAEtB,IAAIC,MAAM,8FAYf3E,EAAM+B,OACP0C,EAC8B,UAA9B5D,KAAKJ,UAAUT,GAAMP,MACS,WAA9BoB,KAAKJ,UAAUT,GAAMP,MACS,gBAA9BoB,KAAKJ,UAAUT,GAAMP,QAErBoB,KAAKJ,UAAUT,IAASyE,SACjB5D,KAAKJ,UAAUT,GAAM4E,SAAS7C,SAE/B,IAAI4C,MAAM,4FAYjB3E,EAAM4B,OACLiD,EAAOhE,KACPiE,EAAOjE,KAAKkE,uBACZC,EAAUnE,KAAKW,eAAe,aACvB,gBAEPK,EAAShB,KAAKW,eAAe,gBACtB,gBACHsD,EAAKzB,aACErD,QACJA,aAENP,KAAO,WACPO,KAAOA,IACLgD,iBAAiB,QAAS,YACzBpB,KACSH,GAEe,OAAxBoD,EAAKnE,kBACAuE,mBAAmBxD,OAGxB7B,YAAYiC,QACff,MAAMlB,YAAYoF,QAClBvE,UAAUT,GAAQ8E,EAChBjE,KAAKJ,UAAUT,gCAYrBA,EAAMkC,EAAON,OACViD,EAAOhE,KACPiE,EAAOjE,KAAKkE,uBACZC,EAAUnE,KAAKW,eAAe,OAASqB,MAAO,gBAC9CqC,EAAQrE,KAAKsE,aAAanF,GAC1BoF,EAAQvE,KAAKW,eAAe,eACrB,cACHsD,EAAKzB,QACH,iBACKnB,cACEA,QACNA,aAENlC,KAAOA,IACPkC,MAAQA,IACRzC,KAAO,SACJG,YAAYsF,KACZtF,YAAYwF,KACdpC,iBAAiB,QAAS,cACvBd,MAAQT,EAAE4D,OAAOnD,MAClBN,KACSH,GAEe,OAAxBoD,EAAKnE,kBACAuE,mBAAmBxD,UAG3BX,MAAMlB,YAAYoF,KAClBX,SAAW,kBACLxD,KAAKQ,UAAUa,SAErBoC,SAAW,SAASpC,KAChBA,MAAQA,IACRb,UAAU8B,UAAYjB,IACtBb,UAAUa,MAAQA,IAClBoD,eAAeR,EAAKzD,UAAWyD,EAAKrF,YAExCgB,UAAUT,GAAQ8E,EAChBjE,KAAKJ,UAAUT,oCAYjBA,EAAMkC,EAAON,OACdiD,EAAOhE,KACPiE,EAAOjE,KAAKkE,uBACZC,EAAUnE,KAAKW,eAAe,OAASqB,MAAO,gBAC9CqC,EAAQrE,KAAKsE,aAAanF,GAC1BuF,EAAW1E,KAAKW,eAAe,kBACxB,kBACHsD,EAAKzB,aACEnB,QACJA,cACMA,aAEZlC,KAAOA,IACPkC,MAAQA,IACRzC,KAAO,SACJG,YAAYsF,KACZtF,YAAY2F,KACXvC,iBAAiB,QAAS,cAC1Bd,MAAQT,EAAE4D,OAAOnD,MAClBN,KACSH,GAEe,OAAxBoD,EAAKnE,kBACAuE,mBAAmBxD,OAG3B4C,SAAW,kBACLxD,KAAKQ,UAAUa,SAErBoC,SAAW,SAAUpC,KACjBA,MAAQA,IACRb,UAAU8B,UAAYjB,IACtBb,UAAUa,MAAQA,IAClBoD,eAAeR,EAAKzD,UAAWyD,EAAKrF,YAExCqB,MAAMlB,YAAYoF,QAClBvE,UAAUT,GAAQ8E,EAChBjE,KAAKJ,UAAUT,iCAYpBA,EAAM+B,EAAOH,OACXiD,EAAOhE,KACPiE,EAAOjE,KAAKkE,uBACZC,EAAUnE,KAAKW,eAAe,OAASqB,MAAO,gBAC9CqC,EAAQrE,KAAKsE,aAAanF,GAC1BwF,EAAO3E,KAAKW,eAAe,QAAUqB,MAAO,mBAC5CuC,EAAQvE,KAAKW,eAAe,eACrB,eACHsD,EAAKzB,QACH,YACDtB,EAAM,OACNA,EAAM,SACJA,EAAM,QACPA,EAAM,cAGXtC,KAAO,UACPO,KAAOA,IACPkC,MAAQH,EAAM,KACbiB,iBAAiB,QAAS,cACvBd,MAAQuD,WAAWhE,EAAE4D,OAAOnD,SAC5BiB,UAAY2B,EAAK5C,MAClBN,KACSH,GAEe,OAAxBoD,EAAKnE,kBACAuE,mBAAmBxD,OAG3B0B,UAAY2B,EAAK5C,QAChBtC,YAAY4F,KACV5F,YAAYsF,KACZtF,YAAYwF,QACftE,MAAMlB,YAAYoF,KAClBX,SAAW,kBACLoB,WAAWX,EAAKzD,UAAUa,UAEhCoC,SAAW,SAASoB,KAChBxD,MAAQwD,IACRrE,UAAUa,MAAQwD,IAClBJ,eAAeR,EAAKzD,UAAWyD,EAAKrF,SAExCiF,SAAW,eACRjD,EAAIqD,EAAKzD,iBAEToE,WAAWhE,EAAEkE,KACbF,WAAWhE,EAAEmE,KACbH,WAAWhE,EAAES,OACbuD,WAAWhE,EAAEoE,UAGhBjB,SAAW,SAAS7C,OACjBN,EAAIqD,EAAKzD,YACXsE,IAAM5D,EAAM,KACZ6D,IAAM7D,EAAM,KACZG,MAAQH,EAAM,KACd8D,KAAO9D,EAAM,KACVG,MAAQuD,WAAWhE,EAAES,SACrBoD,eAAeR,EAAKzD,UAAWyD,EAAKrF,YAExCgB,UAAUT,GAAQ8E,EAChBjE,KAAKJ,UAAUT,oCAcjBA,EAAMkC,EAAON,OACdiD,EAAOhE,KACPiE,EAAOjE,KAAKkE,uBACZC,EAAUnE,KAAKW,eAAe,OAASqB,MAAO,gBAC9CqC,EAAQrE,KAAKsE,aAAanF,GAC1BmC,EAAWtB,KAAKW,eAAe,eACxB,kBACHsD,EAAKzB,QACH,sBAELrD,KAAOA,IACPP,KAAO,aACPyC,MAAQA,GACC,IAAVA,KACSX,aAAa,WAAW,KAE5ByB,iBAAiB,SAAU,cAC3Bd,MAAQT,EAAE4D,OAAOS,QAClBlE,KACSH,GAEe,OAAxBoD,EAAKnE,kBACAuE,mBAAmBxD,OAGxB7B,YAAYsF,KACZtF,YAAYuC,KACfkC,SAAW,kBACLS,EAAKzD,UAAUyE,WAErBxB,SAAW,SAASoB,KAChBrE,UAAUyE,QAAUJ,IACpBxD,MAAQwD,IACRJ,eAAeR,EAAKzD,UAAWyD,EAAKrF,YAExCqB,MAAMlB,YAAYoF,QAClBvE,UAAUT,GAAQ8E,EAChBjE,KAAKJ,UAAUT,iCAYpBA,EAAMkC,EAAON,OACXiD,EAAOhE,KACPiE,EAAOjE,KAAKkE,uBACZC,EAAUnE,KAAKW,eAAe,OAASqB,MAAO,gBAC9CqC,EAAQrE,KAAKsE,aAAanF,GAC1BwF,EAAO3E,KAAKW,eAAe,QAAUqB,MAAO,mBAC5CuC,EAAQvE,KAAKW,eAAe,eACrB,eACHsD,EAAKzB,QACH,mBAELrD,KAAOA,IACPP,KAAO,UACPyC,MAAQA,IACPX,aAAa,QAASW,KACtBc,iBAAiB,QAAS,cACvBd,MAAQT,EAAE4D,OAAOnD,QACjBiB,UAAY1B,EAAE4D,OAAOnD,MACtBN,KACSH,GAEe,OAAxBoD,EAAKnE,kBACAuE,mBAAmBxD,OAG3B0B,UAAYjB,IACXtC,YAAY4F,KACV5F,YAAYsF,KACZtF,YAAYwF,KACff,SAAW,kBACLS,EAAKzD,UAAUa,SAErBoC,SAAW,SAASoB,KAChBrE,UAAUa,MAAQwD,IAClBxD,MAAQwD,IACRvC,UAAYuC,IACZJ,eAAeR,EAAKzD,UAAWyD,EAAKrF,YAExCqB,MAAMlB,YAAYoF,QAClBvE,UAAUT,GAAQ8E,EAChBjE,KAAKJ,UAAUT,kCAYnBA,EAAM+B,EAAOH,OACZiD,EAAOhE,KACPiE,EAAOjE,KAAKkE,uBACZC,EAAUnE,KAAKW,eAAe,OAASqB,MAAO,gBAC9CqC,EAAQrE,KAAKsE,aAAanF,GAC1BgC,EAASnB,KAAKW,eAAe,gBACtB,gBACHsD,EAAKzB,QACHrD,QACC+B,EAAM,cAETnC,YAAYsF,KACda,IAAI,gBACFlC,EAASgB,EAAKmB,oBAAoBpC,KAC/BqC,QAAQtC,IAAIE,OAEhBb,iBAAiB,SAAU,cACzBd,MAAQT,EAAE4D,OAAOnD,MAClBN,KACSH,GAEe,OAAxBoD,EAAKnE,kBACAuE,mBAAmBxD,OAGxB7B,YAAYoC,KACfE,MAAQH,EAAM,KACd/B,KAAOA,IACPP,KAAO,WACP4E,SAAW,eACR6B,EAAUpB,EAAKzD,iBACZ6E,EAAQD,QAAQC,EAAQC,eAAejE,SAE7CoC,SAAW,SAASoB,KAChBxD,MAAQwD,MACTQ,EAAUpB,EAAKzD,YACZ4E,QAAQjE,EAAOmE,eAAiBtB,EAAKmB,oBAAoBN,KACxDxD,MAAQwD,IACXJ,eAAeR,EAAKzD,UAAWyD,EAAKrF,SAExCiF,SAAW,kBACL0B,MACFC,KAAKvB,EAAKzD,UAAU4E,SACpBF,IAAI,mBAAUlC,EAAO3B,WAEzB0C,SAAW,SAAS7C,OACjBmE,EAAUpB,EAAKzD,YACbiF,QAAQ,gBACNC,EAASxE,EAAMyE,QAAQ5C,KACnBqC,QAAQM,GAAU1B,EAAKmB,oBAAoBpC,OAElD0B,eAAeR,EAAKzD,UAAWyD,EAAKrF,YAExCqB,MAAMlB,YAAYoF,QAClBvE,UAAUT,GAAQ8E,EAChBjE,KAAKJ,UAAUT,kCAYnBA,EAAM+B,EAAOH,OACZiD,EAAOhE,KACPiE,EAAOjE,KAAKkE,uBACZC,EAAUnE,KAAKW,eAAe,OAASqB,MAAO,gBAC9CqC,EAAQrE,KAAKsE,aAAanF,GAC1BoF,EAAQvE,KAAKW,eAAe,eACrB,gBACHsD,EAAKzB,QACH,eACCtB,EAAM,QACPA,EAAM,cAEViB,iBAAiB,QAAS,cACvBd,MAAQuD,WAAWhE,EAAE4D,OAAOnD,OAC7BN,KACS6D,WAAWhE,IAEI,OAAxBoD,EAAKnE,kBACAuE,mBAAmBxD,OAG3BhC,KAAO,WACPO,KAAOA,IACPkC,MAAQH,EAAM,KACdsC,SAAW,kBACLoB,WAAWX,EAAKzD,UAAUa,UAEhCoC,SAAW,SAASoB,KAChBrE,UAAUa,MAAQwD,IAClBxD,MAAQwD,IACRJ,eAAeR,EAAKzD,UAAWyD,EAAKrF,SAErCG,YAAYsF,KACZtF,YAAYwF,QACftE,MAAMlB,YAAYoF,QAClBvE,UAAUT,GAAQ8E,EAChBjE,KAAKJ,UAAUT,GAAQ8E,+BAW7B9E,EAAM4B,OACHiD,EAAOhE,KACPiE,EAAOjE,KAAKkE,uBACZC,EAAUnE,KAAKW,eAAe,OAASqB,MAAO,gBAC9CqC,EAAQrE,KAAKsE,aAAanF,GAC1ByG,EAAS5F,KAAKW,eAAe,eACtB,cACHsD,EAAKzB,QACH,kBAELrD,KAAOA,IACPP,KAAO,SACLuD,iBAAiB,SAAU,cACzBd,MAAQT,EAAE4D,OAAOnD,MAClBN,KACSH,GAEToD,EAAKnE,kBACAuE,mBAAmBxD,OAGxB7B,YAAYsF,KACZtF,YAAY6G,KACfpC,SAAW,kBACLS,EAAKzD,UAAUqF,MAAM,MAE3BpC,SAAW,SAASoB,KAChBxD,MAAQwD,IACRrE,UAAUqF,MAAM,GAAKhB,IACrBJ,eAAeR,EAAKzD,UAAWyD,EAAKrF,YAExCqB,MAAMlB,YAAYoF,QAClBvE,UAAUT,GAAQ8E,EAChBjE,KAAKJ,UAAUT,GAAQ8E,gCAU5BlD,QACGlB,eAAiBkB,qCAyCf+E,kBACFA,QACK,IAAIhC,MAAM,kCAEE,iBAAXgC,IAAwBP,MAAMQ,QAAQD,OAIxC,IAAIrF,IAHa,iBAAXqF,MACEE,KAAKC,MAAMH,IAERA,EAAQ,KAChBjF,EAASiF,EAAOrF,QACfyF,qBAAqBrF,IAGJ,IAA1B0E,MAAMQ,QAAQD,MACPL,QAAQ,mBAASU,EAAKD,qBAAqBE"}