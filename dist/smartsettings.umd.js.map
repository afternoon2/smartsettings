{"version":3,"file":"smartsettings.umd.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/index.js"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import style from './index.css'\n\n/**\n * @class SmartSettings\n * @classdesc SmartSettings module, returns new SmartSettings instance\n * @param {string} name - name of the SmartSettings panel\n * @param {number} left - position of the SmartSettings panel on X axis\n * @param {number} top - position of the SmartSettings panel on Y axis\n * @example\n * const mySettings = new SmartSettings('My Settings', 10, 10)\n*/\nclass SmartSettings {\n    constructor(name = 'SmartSettings', left = 0, top = 0) {\n        this.name = name\n        this.left = left\n        this.top = top\n\n        /**\n         * @property {boolean} _hidden\n         * @private\n         */\n        this._hidden = false\n\n        /**\n         * @property {boolean} _open\n         * @private\n         */\n        this._open = true\n\n        /**\n         * @property {boolean} _draggable\n         * @private\n         */\n        this._draggable = false\n\n        /**\n         * @property {Node} _panel\n         * @private\n         */\n        this._panel = null\n\n        /**\n         * @property {object} _controls\n         * @private\n         */\n        this._controls = {}\n\n        this._createUniqueId()\n        this._create(this.name, this.top, this.left)\n    }\n\n    /* Utility methods */\n\n    /**\n     * Creates unique element identifier\n     * @private\n     */\n    _createUniqueId() {\n        let counter = 0\n        window.uniqueId = () => `sms-id-${counter++}`\n    }\n     \n    /**\n     * Creates any DOM element\n     * @param {string} type - type of the DOM element\n     * @param {Object} attributes - object with all attributes for the DOM element\n     * @returns {Node}\n     * @private \n     */\n    _createElement(type, attributes) {\n        let element = document.createElement(type)\n        if (attributes) {\n            for (let key in attributes) {\n                if (key === 'class') {\n                    element.setAttribute('class', attributes[key])\n                } else {\n                    element[key] = attributes[key]\n                }\n            }\n        }\n        return element\n    }\n\n    /* Helper methods */\n\n    /**\n     * Creates settings panel, invoked on class construction\n     * @returns {void}\n     * @private\n     */\n    _create() {\n        let panelAttributes = {\n            class: 'sms-panel',\n            id: uniqueId(),\n            style: `top: ${this.top}px; left: ${this.left}px; z-index: 2`\n        }\n        let panel = this._createElement('div', panelAttributes)\n        let header = this._createElement('div', { class: 'sms-panel-header' })\n        let body = this._createElement('div', { class: 'sms-panel-body' })\n        let paragraph = this._createElement('p', { class: 'sms-panel-header-name' })\n\n        header.addEventListener('click', e => this.toggle())\n\n        paragraph.innerText = this.name\n        header.appendChild(paragraph)\n        panel.appendChild(header)\n        panel.appendChild(body)\n        this._panel = panel\n        document.body.appendChild(this._panel)\n    }\n\n    /**\n     * Creates basic properties for the new control\n     * @returns {object}\n     * @private\n     */\n    _createControlBasics() {\n        let id = uniqueId()\n        let basics = {\n            id: id,\n            disabled: false,\n            hidden: false,\n            value: null,\n            name: null,\n            type: null,\n            element: function() {\n                return document.getElementById(this.id)\n            },\n            enable: function() {\n                this.element().removeAttribute('disabled')\n                this.disabled = false\n            },\n            disable: function() {\n                this.element().setAttribute('disabled', true)\n                this.disabled = true\n            },\n            show: function() {\n                if (this.element().classList[1] === 'hide') {\n                    this.element().classList.remove('hide')\n                    this.hidden = false\n                }\n            },\n            hide: function() {\n                if (this.element().classList[1] !== 'hide') {\n                    this.element().classList.add('hide')\n                    this.hidden = true\n                }\n            }\n        }\n        return basics\n    }\n\n    /**\n     * Returns select option\n     * @param {(string|number)} item - option value\n     * @returns {Node}\n     * @private\n     */\n    _createSelectOption(item) {\n        let option = this._createElement('option', {\n            class: 'sms-select-option',\n            value: item\n        })\n        option.innerText = item\n        return option\n    }\n\n    /* Basic methods */\n\n    /**\n     * Removes settings panel from the DOM and removes all sections and controls\n     * @returns {void}\n     * @example\n     * mySettings.destroy()\n     */\n    destroy() {\n        if (this._panel && this._panel.parentElement) {\n            this._panel.parentElement.removeChild(this._panel)\n        }\n        this._panel = null\n        this._controls = {}\n    }\n\n    /**\n     * Shows settings panel or specific control (if the name is provided)\n     * @param {string} [name] - name of control to be shown\n     * @returns {void}\n     * @example\n     * mySettings.show()\n     */\n    show(name) {\n        if (name) {\n            this._controls[name].show()\n        }\n        this._panel.classList.remove('hide')\n        this._hidden = false\n    }\n\n    /**\n     * Hides settings panel or specific control (if the name is provided)\n     * @param {string} [name] - name of control to be hidden\n     * @returns {void}\n     * @example\n     * mySettings.hide()\n     */\n    hide(name) {\n        if (name) {\n            this._controls[name].hide()\n        }\n        this._panel.classList.add('hide')\n        this._hidden = true\n    }\n\n    /**\n     * Open settings panel\n     * @example\n     * mySettings.open()\n     */\n    open() {\n        let panelBody = this._panel.childNodes[1]\n        if (panelBody.classList[1] === 'hide') {\n            panelBody.classList.remove('hide')\n        } \n        this._open = true\n    }\n\n    /**\n     * Close settings panel\n     * @example\n     * mySettings.close()\n     * \n     */\n    close() {\n        let panelBody = this._panel.childNodes[1]\n        panelBody.classList.add('hide')\n        this._open = false\n    }\n\n    /**\n     * Open or close settings panel depending on `_open` property\n     * @returns {void}\n     * @example\n     * mySettings.toggle()\n     */\n    toggle() {\n        let panelBody = this._panel.childNodes[1]\n        panelBody.classList[1] === 'hide' ?\n            panelBody.classList.remove('hide') :\n            panelBody.classList.add('hide')\n        this._open = !this._open\n    }\n\n    /**\n     * Returns panel position [left, top]\n     * @return {array<number>}\n     * @example\n     * let position = mySettings.getPosition() // [0, 0]\n     */\n    getPosition() {\n        return [this.left, this.top]\n    }\n\n    /**\n     * Sets panel position\n     * @param {number} left - new position on the X axis\n     * @param {number} top - new position on the Y axis\n     * @example\n     * mySettings.setPosition(400, 400)\n     */\n    setPosition(left, top) {\n        this.left = left\n        this.top = top\n    }\n\n    /**\n     * Removes specific control\n     * @param {string} name - name of the control to be deleted\n     * @returns {void}\n     * @example\n     * mySettings.remove('Control name')\n     */\n    remove(name) {\n        if (name) {\n            let elem = this._controls[name].element()\n            elem.parentElement.remove()\n            elem.remove()\n            delete this._controls[name]\n        }\n    }\n\n    /**\n     * Get value of specific control\n     * @param {string} name - name of the control\n     * @returns {(number|string|boolean)}\n     * @example\n     * let value = mySettings.getValue('Control name')\n     */\n    getValue(name) {\n        if (name && this._controls[name] && this._controls[name].getValue) {\n            return this._controls[name].getValue()\n        }\n    }\n\n    /**\n     * Sets new active value of the specific control. (Changing button control value does not change its' id property)\n     * @param {string} name - name of the control\n     * @param {(number|string|boolean)} name - new value\n     * @returns {void}\n     * @example\n     * mySettings.setValue('Control name', 'value')\n     */\n    setValue(name, value) {\n        if (name && this._controls[name] && this._controls[name].setValue) {\n            return this._controls[name].setValue(value)\n        }\n    }\n\n    /**\n     * Get all active values\n     * @returns {object} - an object with values from all currently set controls\n     * @example\n     * let values = mySettings.getValues()\n     */\n    getValues() {\n        let values = {}\n        for (let i in this._controls) {\n            if (this._controls[i].getValue) {\n                values[i] = this._controls[i].getValue()\n            }\n        }\n        return values\n    }\n\n    /**\n     * Creates button control\n     * @param {string} name - name of the control \n     * @param {function} callback - function executed on each change\n     * @returns {object} button control object\n     * @example\n     * let button = mySettings.button('Button Name', () => console.log('This is the button'))\n     */\n    button(name, callback) {\n        let base = this._createControlBasics()\n        let body = this._panel.childNodes[1]\n        let wrapper = this._createElement('div', {\n            class: 'sms-control'\n        })\n        let button = this._createElement('button', {\n            class: 'sms-button',\n            id: base.id\n        })\n        base.type = 'button'\n        base.name = name\n        button.innerText = name\n        button.value = name\n        if (callback) {\n            button.addEventListener('click', callback)\n        }\n        wrapper.appendChild(button)\n        body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates text input control\n     * @param {string} name - name of the control\n     * @param {string} value - value of the control\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let textInput = mySettings.text('Text input', 'Hello world')\n     */\n    text(name, value, callback) {\n        let body = this._panel.childNodes[1]\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createElement('label', { class: 'sms-label' })\n        let input = this._createElement('input', {\n            class: 'sms-text',\n            id: base.id,\n            type: 'text'\n        })\n        input.innerText = value\n        input.value = value\n        input.placeholder = value\n        base.name = name\n        base.value = value\n        base.type = 'text'\n        label.innerText = name\n        wrapper.appendChild(label)\n        wrapper.appendChild(input)\n        if (callback) {\n            input.addEventListener('input', callback)\n        }\n        body.appendChild(wrapper)\n        base.getValue = function() {\n            return this.element().value\n        }\n        base.setValue = function(value) {\n            base.value = value\n            base.element().innerText = value\n            base.element().value = value\n        }\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates textarea control\n     * @param {string} name - name of the control\n     * @param {string} value - value of the control\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let textarea = mySettings.textarea('Text input', 'Hello world')\n     */\n    textarea(name, value, callback) {\n        let body = this._panel.childNodes[1]\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createElement('label', { class: 'sms-label' })\n        let textarea = this._createElement('textarea', {\n            class: 'sms-textarea',\n            id: base.id\n        })\n        textarea.innerText = value\n        textarea.value = value\n        textarea.placeholder = value\n        base.name = name\n        base.value = value\n        base.type = 'text'\n        label.innerText = name\n        wrapper.appendChild(label)\n        wrapper.appendChild(textarea)\n        if (callback) {\n            textarea.addEventListener('input', e => {\n                base.value = e.target.value\n                callback(e)\n            })\n        }\n        body.appendChild(wrapper)\n        base.getValue = function () {\n            return this.element().value\n        }\n        base.setValue = function (value) {\n            base.value = value\n            base.element().innerText = value\n            base.element().value = value\n        }\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates range control\n     * @param {string} name - name of the control\n     * @param {array} items - array with min, max, default and step values\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let range = mySettings.range('Range', [1, 100, 40, 1], e => console.log(e.target.value))\n     */\n    range(name, items, callback) {\n        let body = this._panel.childNodes[1]\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createElement('label', { class: 'sms-label' })\n        let span = this._createElement('span', { class: 'sms-label-span' })\n        let input = this._createElement('input', {\n            class: 'sms-range',\n            id: base.id,\n            type: 'range',\n            min: items[0],\n            max: items[1],\n            value: items[2],\n            step: items[3]\n        })\n\n        base.type = 'range'\n        base.name = name\n        base.value = items[2]\n        input.addEventListener('input', e => {\n            base.value = e.target.value\n            span.innerText = base.value\n            if (callback) {\n                callback(e)\n            }\n        })\n        span.innerText = base.value\n        label.value = name\n        label.innerText = name\n        label.appendChild(span)\n        wrapper.appendChild(label)\n        wrapper.appendChild(input)\n        body.appendChild(wrapper)\n        base.getValue = function() {\n            return parseFloat(base.element().value)\n        }\n        base.setValue = function(v) {\n            base.value = v\n            base.element().value = v\n        }\n        base.getItems = function() {\n            let e = base.element()\n            return [\n                parseFloat(e.min),\n                parseFloat(e.max),\n                parseFloat(e.value),\n                parseFloat(e.step),\n            ]\n        }\n        base.setItems = function(items) {\n            let e = base.element()\n            e.min = items[0]\n            e.max = items[1]\n            e.value = items[2]\n            e.step = items[3]\n            base.value = parseFloat(e.value)\n        }\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates checkbox control\n     * @param {string} name - name of the control\n     * @param {boolean} value - value of the control\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let checkbox = mySettings.checkbox('Check this out!', true, e => {\n     *      console.log(e.target.value)\n     * })\n     */\n    checkbox(name, value, callback) {\n        let body = this._panel.childNodes[1]\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createElement('label', { class: 'sms-label' })\n        let checkbox = this._createElement('input', {\n            class: 'sms-checkbox',\n            id: base.id,\n            type: 'checkbox'\n        })\n        base.name = name\n        base.type = 'checkbox'\n        base.value = value\n        label.innerText = name\n        label.value = name\n        if (value === true) {\n            checkbox.setAttribute('checked', true)\n        }\n        checkbox.addEventListener('change', e => {\n            base.value = e.target.checked\n            if (callback) {\n                callback(e)\n            }\n        })\n        wrapper.appendChild(label)\n        wrapper.appendChild(checkbox)\n        body.appendChild(wrapper)\n        base.getValue = function() {\n            return base.element().checked\n        }\n        base.setValue = function(v) {\n            base.element().checked = v\n            base.value = v\n        }\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates color control\n     * @param {string} name - name of the control\n     * @param {string} value -hexadecimal string value of initial color\n     * @param {function} [callback] - function executed afer each change\n     * @returns {object}\n     * @example\n     * let color = mySettings.color('Color control', '#fcfcfc', e => someCallbackFunction())\n     */\n    color(name, value, callback) {\n        let body = this._panel.childNodes[1]\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createElement('label', { class: 'sms-label' })\n        let span = this._createElement('span', { class: 'sms-label-span' })\n        let input = this._createElement('input', {\n            class: 'sms-color',\n            id: base.id,\n            type: 'color'\n        })\n        base.name = name\n        base.type = 'color'\n        base.value = value\n        input.setAttribute('value', value)\n        input.addEventListener('input', e => {\n            base.value = e.target.value\n            span.innerText = e.target.value\n            if (callback) {\n                callback(e)\n            }\n        })\n        span.innerText = value\n        label.value = name\n        label.innerText = name\n        label.appendChild(span)\n        wrapper.appendChild(label)\n        wrapper.appendChild(input)\n        body.appendChild(wrapper)\n        base.getValue = function() {\n            return base.element().value\n        }\n        base.setValue = function(v) {\n            base.element().value = v\n            base.value = v\n            span.innerText = v\n        }\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates select control\n     * @param {string} name - name of the control\n     * @param {array} items - array with option values\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let select = mySettings.select('Select', ['Option 1', 'Option 2', 'Option 3'])\n     */\n    select(name, items, callback) {\n        let self = this\n        let body = this._panel.childNodes[1]\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createElement('label', { class: 'sms-label' })\n        let select = this._createElement('select', {\n            class: 'sms-select',\n            id: base.id,\n            name: name\n        })\n        label.innerText = name\n        label.value = name\n        wrapper.appendChild(label)\n        items.map(item => {\n            let option = self._createSelectOption(item)\n            select.options.add(option)\n        })\n        select.value = items[0]\n        select.addEventListener('change', e => {\n            base.value = e.target.value\n            if (callback) {\n                callback(e)\n            }\n        })\n        wrapper.appendChild(select)\n        body.appendChild(wrapper)\n        base.value = items[0]\n        base.name = name\n        base.type = 'select'\n        base.getValue = function() {\n            let _select = base.element()\n            return _select.options[_select.selectedIndex].value\n        }\n        base.setValue = function(v) {\n            base.value = v\n            let _select = base.element()\n            select.options[select.selectedIndex] = self._createSelectOption(v)\n            _select.value = v\n        }\n        base.getItems = function() {\n            return Array\n                .from(base.element().options)\n                .map(option => option.value)\n        }\n        base.setItems = function(items) {\n            let _select = base.element()\n            items.forEach(item => {\n                let _index = items.indexOf(item)\n                _select.options[_index] = self._createSelectOption(item)\n            })\n        }\n        this._controls[name] = base\n        return this._controls[name]\n    }\n}\n\nexport default SmartSettings"],"names":["styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","SmartSettings","name","left","top","_hidden","_open","_draggable","_panel","_controls","_createUniqueId","_create","counter","window","uniqueId","attributes","element","key","setAttribute","panelAttributes","class","id","panel","_createElement","header","body","paragraph","addEventListener","toggle","innerText","basics","disabled","hidden","value","getElementById","enable","removeAttribute","disable","show","classList","remove","hide","add","item","option","parentElement","removeChild","panelBody","childNodes","elem","getValue","setValue","values","i","callback","base","_createControlBasics","wrapper","button","label","input","placeholder","textarea","e","target","items","span","min","max","step","parseFloat","v","getItems","setItems","checkbox","checked","self","select","map","_createSelectOption","options","_select","selectedIndex","Array","from","forEach","_index","indexOf"],"mappings":"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"}