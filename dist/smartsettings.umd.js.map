{"version":3,"file":"smartsettings.umd.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/index.js"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import style from './index.css'\n\n/**\n * @class SmartSettings\n * @classdesc SmartSettings module, returns new SmartSettings instance\n * @param {string} name - name of the SmartSettings panel\n * @param {number} left - position of the SmartSettings panel on X axis\n * @param {number} top - position of the SmartSettings panel on Y axis\n * @example\n * const mySettings = new SmartSettings('My Settings', 10, 10)\n*/\nclass SmartSettings {\n    constructor(name = 'SmartSettings', left = 0, top = 0) {\n        this.name = name\n        this.initialLeft = left\n        this.initialTop = top\n\n        /**\n         * @property {boolean} _hidden\n         * @private\n         */\n        this._hidden = false\n\n        /**\n         * @property {boolean} _open\n         * @private\n         */\n        this._open = true\n\n        /**\n         * @property {boolean} _draggable\n         * @private\n         */\n        this._draggable = false\n\n        /**\n         * @property {Node} _panel\n         * @private\n         */\n        this._panel = null\n\n        /**\n         * @property {object} _controls\n         * @private\n         */\n        this._controls = {}\n\n        /**\n         * @property {?function} _globalWatcher\n         * @private\n         */\n        this._globalWatcher = null\n\n        this._createUniqueId()\n        this._create(this.name, this.initialTop, this.initialLeft)\n    }\n\n    /* Utility methods */\n\n    /**\n     * Creates unique element identifier\n     * @private\n     */\n    _createUniqueId() {\n        let counter = 0\n        window.uniqueId = () => `sms-id-${counter++}`\n    }\n     \n    /**\n     * Creates any DOM element\n     * @param {string} type - type of the DOM element\n     * @param {Object} attributes - object with all attributes for the DOM element\n     * @returns {Node}\n     * @private \n     */\n    _createElement(type, attributes) {\n        let element = document.createElement(type)\n        if (attributes) {\n            for (let key in attributes) {\n                if (key === 'class') {\n                    element.setAttribute('class', attributes[key])\n                } else {\n                    element[key] = attributes[key]\n                }\n            }\n        }\n        return element\n    }\n\n    /**\n     * Calls the global watcher\n     * @param {EventListenerObject} event - an event\n     * @returns {void}\n     * @private\n     */\n    _callGlobalWatcher(e) {\n        if (this._globalWatcher) {\n            this._globalWatcher(e)\n        }\n    }\n\n    /**\n     * Assigns config entry to the specific control creation method\n     * @param {object} entry - entry of the config object|array\n     * @private\n     */\n    _assignEntryToMethod(_entry) {\n        let _isCallback = _entry.callback ? _entry.callback : null\n        switch (_entry.type) {\n        case 'button':\n            this.button(_entry.name, _isCallback)\n            break\n        case 'range':\n            this.range(_entry.name, _entry.items, _isCallback)\n            break\n        case 'select':\n            this.select(_entry.name, _entry.items, _isCallback)\n            break\n        case 'text':\n            this.text(_entry.name, _entry.value, _isCallback)\n            break\n        case 'textarea':\n            this.text(_entry.name, _entry.value, _isCallback)\n            break\n        case 'checkbox':\n            this.checkbox(_entry.name, _entry.value, _isCallback)\n            break\n        case 'number':\n            this.number(_entry.name, _entry.items, _isCallback)\n            break\n        case 'color':\n            this.color(_entry.name, _entry.value, _isCallback)\n            break\n        case 'file':\n            this.file(_entry.name, _isCallback)\n        }\n    }\n\n    /* Helper methods */\n\n    /**\n     * Creates settings panel, invoked on class construction\n     * @returns {void}\n     * @private\n     */\n    _create() {\n        let panelAttributes = {\n            class: 'sms-panel',\n            id: uniqueId(),\n            style: `top: ${this.initialTop}px; left: ${this.initialLeft}px; z-index: 2`\n        }\n        let panel = this._createElement('div', panelAttributes)\n        let header = this._createElement('div', { class: 'sms-panel-header' })\n        let body = this._createElement('div', { class: 'sms-panel-body' })\n        let paragraph = this._createElement('p', { class: 'sms-panel-header-name' })\n\n        header.addEventListener('click', e => this.toggle())\n\n        paragraph.innerText = this.name\n        header.appendChild(paragraph)\n        panel.appendChild(header)\n        panel.appendChild(body)\n        this._panel = panel\n        document.body.appendChild(this._panel)\n    }\n\n    /**\n     * Creates basic properties for the new control\n     * @returns {object}\n     * @private\n     */\n    _createControlBasics() {\n        let id = uniqueId()\n        let basics = {\n            id: id,\n            disabled: false,\n            hidden: false,\n            value: null,\n            name: null,\n            type: null,\n            element: function() {\n                return document.getElementById(this.id)\n            },\n            enable: function() {\n                this.element().removeAttribute('disabled')\n                this.disabled = false\n            },\n            disable: function() {\n                this.element().setAttribute('disabled', true)\n                this.disabled = true\n            },\n            show: function() {\n                if (this.element().classList[1] === 'hide') {\n                    this.element().classList.remove('hide')\n                    this.hidden = false\n                }\n            },\n            hide: function() {\n                if (this.element().classList[1] !== 'hide') {\n                    this.element().classList.add('hide')\n                    this.hidden = true\n                }\n            }\n        }\n        return basics\n    }\n\n    /**\n     * Returns select option\n     * @param {(string|number)} item - option value\n     * @returns {Node}\n     * @private\n     */\n    _createSelectOption(item) {\n        let option = this._createElement('option', {\n            class: 'sms-select-option',\n            value: item\n        })\n        option.innerText = item\n        return option\n    }\n\n    /* Basic methods */\n\n    /**\n     * Removes settings panel from the DOM and removes all sections and controls\n     * @returns {void}\n     * @example\n     * mySettings.destroy()\n     */\n    destroy() {\n        if (this._panel && this._panel.parentElement) {\n            this._panel.parentElement.removeChild(this._panel)\n        }\n        this._panel = null\n        this._controls = {}\n    }\n\n    /**\n     * Shows settings panel or specific control (if the name is provided)\n     * @param {string} [name] - name of control to be shown\n     * @returns {void}\n     * @example\n     * mySettings.show()\n     */\n    show(name) {\n        if (name) {\n            this._controls[name].show()\n        }\n        this._panel.classList.remove('hide')\n        this._hidden = false\n    }\n\n    /**\n     * Hides settings panel or specific control (if the name is provided)\n     * @param {string} [name] - name of control to be hidden\n     * @returns {void}\n     * @example\n     * mySettings.hide()\n     */\n    hide(name) {\n        if (name) {\n            this._controls[name].hide()\n        }\n        this._panel.classList.add('hide')\n        this._hidden = true\n    }\n\n    /**\n     * Enables specific control\n     * @param {string} name\n     * @returns {void}\n     * @example\n     * mySettings.enable('Checkbox control')\n     */\n    enable(name) {\n        if (name && this._controls[name]) {\n            return this._controls[name].enable()\n        }\n    }\n\n    /**\n     * Disables specific control\n     * @param {string} name\n     * @returns {void}\n     * @example\n     * mySettings.enable('Checkbox control')\n     */\n    disable(name) {\n        if (name && this._controls[name]) {\n            return this._controls[name].disable()\n        }\n    }\n\n    /**\n     * Open settings panel\n     * @example\n     * mySettings.open()\n     */\n    open() {\n        let panelBody = this._panel.childNodes[1]\n        if (panelBody.classList[1] === 'hide') {\n            panelBody.classList.remove('hide')\n        } \n        this._open = true\n    }\n\n    /**\n     * Close settings panel\n     * @example\n     * mySettings.close()\n     * \n     */\n    close() {\n        let panelBody = this._panel.childNodes[1]\n        panelBody.classList.add('hide')\n        this._open = false\n    }\n\n    /**\n     * Open or close settings panel depending on `_open` property\n     * @returns {void}\n     * @example\n     * mySettings.toggle()\n     */\n    toggle() {\n        let panelBody = this._panel.childNodes[1]\n        panelBody.classList[1] === 'hide' ?\n            panelBody.classList.remove('hide') :\n            panelBody.classList.add('hide')\n        this._open = !this._open\n    }\n\n    /**\n     * Returns panel position [left, top]\n     * @return {array<number>}\n     * @example\n     * let position = mySettings.getPosition() // [0, 0]\n     */\n    getPosition() {\n        return [this.initialLeft, this.initialTop]\n    }\n\n    /**\n     * Sets panel position\n     * @param {number} left - new position on the X axis\n     * @param {number} top - new position on the Y axis\n     * @example\n     * mySettings.setPosition(400, 400)\n     */\n    setPosition(left, top) {\n        this.initialLeft = left\n        this.initialTop = top\n    }\n\n    /**\n     * Removes specific control\n     * @param {string} name - name of the control to be deleted\n     * @returns {void}\n     * @example\n     * mySettings.remove('Control name')\n     */\n    remove(name) {\n        if (name) {\n            let elem = this._controls[name].element()\n            elem.parentElement.remove()\n            elem.remove()\n            delete this._controls[name]\n        }\n    }\n\n    /**\n     * Get value of specific control\n     * @param {string} name - name of the control\n     * @returns {(number|string|boolean)}\n     * @example\n     * let value = mySettings.getValue('Control name')\n     */\n    getValue(name) {\n        if (name && this._controls[name] && this._controls[name].getValue) {\n            return this._controls[name].getValue()\n        }\n    }\n\n    /**\n     * Sets new active value of the specific control. (Changing button control value does not change its' id property)\n     * @param {string} name - name of the control\n     * @param {(number|string|boolean)} name - new value\n     * @returns {void}\n     * @example\n     * mySettings.setValue('Control name', 'value')\n     */\n    setValue(name, value) {\n        if (name && this._controls[name] && this._controls[name].setValue) {\n            return this._controls[name].setValue(value)\n        }\n    }\n\n    /**\n     * Get all active values\n     * @returns {object} - an object with values from all currently set controls\n     * @example\n     * let values = mySettings.getActiveValues()\n     */\n    getActiveValues() {\n        let values = {}\n        for (let i in this._controls) {\n            if (this._controls[i].getValue) {\n                values[i] = this._controls[i].getValue()\n            }\n        }\n        return values\n    }\n\n    /**\n     * Get select/range/progressbar items\n     * @param {string} name - name of the control\n     * @returns {array}\n     * @example\n     * let selectValues = mySettings.\n     */\n    getItems(name) {\n        let typeCondition = (\n            this._controls[name].type === 'range' || \n            this._controls[name].type === 'select' || \n            this._controls[name].type === 'progressbar'\n        )\n        if (this._controls[name] && typeCondition) {\n            return this._controls[name].getItems()\n        } else {\n            throw new Error('Chosen control is not a range, select or progressbar type')\n        }\n    }\n\n    /**\n     * Set (update) select/range/progressbar items\n     * @param {string} name - name of the control\n     * @param {array} items - array of new items\n     * @returns {void}\n     * @example\n     * mySettings.setItems('Select', [1, 2, 3, 4])\n     */\n    setItems(name, items) {\n        let typeCondition = (\n            this._controls[name].type === 'range' ||\n            this._controls[name].type === 'select' ||\n            this._controls[name].type === 'progressbar'\n        )\n        if (this._controls[name] && typeCondition) {\n            return this._controls[name].setItems(items)\n        } else {\n            throw new Error('Chosen control is not a range, select or progressbar type')\n        }\n    }\n\n    /**\n     * Creates button control\n     * @param {string} name - name of the control \n     * @param {function} callback - function executed on each change\n     * @returns {object} button control object\n     * @example\n     * let button = mySettings.button('Button Name', () => console.log('This is the button'))\n     */\n    button(name, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let body = this._panel.childNodes[1]\n        let wrapper = this._createElement('div', {\n            class: 'sms-control'\n        })\n        let button = this._createElement('button', {\n            class: 'sms-button',\n            id: base.id\n        })\n        base.type = 'button'\n        base.name = name\n        button.innerText = name\n        button.value = name\n        button.addEventListener('click', e => {\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        wrapper.appendChild(button)\n        body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates text input control\n     * @param {string} name - name of the control\n     * @param {string} value - value of the control\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let textInput = mySettings.text('Text input', 'Hello world')\n     */\n    text(name, value, callback) {\n        let self = this\n        let body = this._panel.childNodes[1]\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createElement('label', { class: 'sms-label' })\n        let input = this._createElement('input', {\n            class: 'sms-text',\n            id: base.id,\n            type: 'text'\n        })\n        input.innerText = value\n        input.value = value\n        input.placeholder = value\n        base.name = name\n        base.value = value\n        base.type = 'text'\n        label.innerText = name\n        wrapper.appendChild(label)\n        wrapper.appendChild(input)\n        input.addEventListener('input', e => {\n            base.value = e.target.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        body.appendChild(wrapper)\n        base.getValue = function() {\n            return this.element().value\n        }\n        base.setValue = function(value) {\n            base.value = value\n            base.element().innerText = value\n            base.element().value = value\n        }\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates textarea control\n     * @param {string} name - name of the control\n     * @param {string} value - value of the control\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let textarea = mySettings.textarea('Text input', 'Hello world')\n     */\n    textarea(name, value, callback) {\n        let self = this\n        let body = this._panel.childNodes[1]\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createElement('label', { class: 'sms-label' })\n        let textarea = this._createElement('textarea', {\n            class: 'sms-textarea',\n            id: base.id\n        })\n        textarea.innerText = value\n        textarea.value = value\n        textarea.placeholder = value\n        base.name = name\n        base.value = value\n        base.type = 'text'\n        label.innerText = name\n        wrapper.appendChild(label)\n        wrapper.appendChild(textarea)\n        textarea.addEventListener('input', e => {\n            base.value = e.target.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        body.appendChild(wrapper)\n        base.getValue = function () {\n            return this.element().value\n        }\n        base.setValue = function (value) {\n            base.value = value\n            base.element().innerText = value\n            base.element().value = value\n        }\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates range control\n     * @param {string} name - name of the control\n     * @param {array} items - array with min, max, default and step values\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let range = mySettings.range('Range', [1, 100, 40, 1], e => console.log(e.target.value))\n     */\n    range(name, items, callback) {\n        let self = this\n        let body = this._panel.childNodes[1]\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createElement('label', { class: 'sms-label' })\n        let span = this._createElement('span', { class: 'sms-label-span' })\n        let input = this._createElement('input', {\n            class: 'sms-range',\n            id: base.id,\n            type: 'range',\n            min: items[0],\n            max: items[1],\n            value: items[2],\n            step: items[3]\n        })\n\n        base.type = 'range'\n        base.name = name\n        base.value = items[2]\n        input.addEventListener('input', e => {\n            base.value = e.target.value\n            span.innerText = base.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        span.innerText = base.value\n        label.value = name\n        label.innerText = name\n        label.appendChild(span)\n        wrapper.appendChild(label)\n        wrapper.appendChild(input)\n        body.appendChild(wrapper)\n        base.getValue = function() {\n            return parseFloat(base.element().value)\n        }\n        base.setValue = function(v) {\n            base.value = v\n            base.element().value = v\n        }\n        base.getItems = function() {\n            let e = base.element()\n            return [\n                parseFloat(e.min),\n                parseFloat(e.max),\n                parseFloat(e.value),\n                parseFloat(e.step),\n            ]\n        }\n        base.setItems = function(items) {\n            let e = base.element()\n            e.min = items[0]\n            e.max = items[1]\n            e.value = items[2]\n            e.step = items[3]\n            base.value = parseFloat(e.value)\n        }\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates checkbox control\n     * @param {string} name - name of the control\n     * @param {boolean} value - value of the control\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let checkbox = mySettings.checkbox('Check this out!', true, e => {\n     *      console.log(e.target.value)\n     * })\n     */\n    checkbox(name, value, callback) {\n        let self = this\n        let body = this._panel.childNodes[1]\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createElement('label', { class: 'sms-label' })\n        let checkbox = this._createElement('input', {\n            class: 'sms-checkbox',\n            id: base.id,\n            type: 'checkbox'\n        })\n        base.name = name\n        base.type = 'checkbox'\n        base.value = value\n        label.innerText = name\n        label.value = name\n        if (value === true) {\n            checkbox.setAttribute('checked', true)\n        }\n        checkbox.addEventListener('change', e => {\n            base.value = e.target.checked\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        wrapper.appendChild(label)\n        wrapper.appendChild(checkbox)\n        body.appendChild(wrapper)\n        base.getValue = function() {\n            return base.element().checked\n        }\n        base.setValue = function(v) {\n            base.element().checked = v\n            base.value = v\n        }\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates color control\n     * @param {string} name - name of the control\n     * @param {string} value -hexadecimal string value of initial color\n     * @param {function} [callback] - function executed afer each change\n     * @returns {object}\n     * @example\n     * let color = mySettings.color('Color control', '#fcfcfc', e => someCallbackFunction())\n     */\n    color(name, value, callback) {\n        let self = this\n        let body = this._panel.childNodes[1]\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createElement('label', { class: 'sms-label' })\n        let span = this._createElement('span', { class: 'sms-label-span' })\n        let input = this._createElement('input', {\n            class: 'sms-color',\n            id: base.id,\n            type: 'color'\n        })\n        base.name = name\n        base.type = 'color'\n        base.value = value\n        input.setAttribute('value', value)\n        input.addEventListener('input', e => {\n            base.value = e.target.value\n            span.innerText = e.target.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        span.innerText = value\n        label.value = name\n        label.innerText = name\n        label.appendChild(span)\n        wrapper.appendChild(label)\n        wrapper.appendChild(input)\n        body.appendChild(wrapper)\n        base.getValue = function() {\n            return base.element().value\n        }\n        base.setValue = function(v) {\n            base.element().value = v\n            base.value = v\n            span.innerText = v\n        }\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates select control\n     * @param {string} name - name of the control\n     * @param {array} items - array with option values\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let select = mySettings.select('Select', ['Option 1', 'Option 2', 'Option 3'])\n     */\n    select(name, items, callback) {\n        let self = this\n        let body = this._panel.childNodes[1]\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createElement('label', { class: 'sms-label' })\n        let select = this._createElement('select', {\n            class: 'sms-select',\n            id: base.id,\n            name: name\n        })\n        label.innerText = name\n        label.value = name\n        wrapper.appendChild(label)\n        items.map(item => {\n            let option = self._createSelectOption(item)\n            select.options.add(option)\n        })\n        select.value = items[0]\n        select.addEventListener('change', e => {\n            base.value = e.target.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        wrapper.appendChild(select)\n        body.appendChild(wrapper)\n        base.value = items[0]\n        base.name = name\n        base.type = 'select'\n        base.getValue = function() {\n            let _select = base.element()\n            return _select.options[_select.selectedIndex].value\n        }\n        base.setValue = function(v) {\n            base.value = v\n            let _select = base.element()\n            select.options[select.selectedIndex] = self._createSelectOption(v)\n            _select.value = v\n        }\n        base.getItems = function() {\n            return Array\n                .from(base.element().options)\n                .map(option => option.value)\n        }\n        base.setItems = function(items) {\n            let _select = base.element()\n            items.forEach(item => {\n                let _index = items.indexOf(item)\n                _select.options[_index] = self._createSelectOption(item)\n            })\n        }\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates number control\n     * @param {string} name - name of the control\n     * @param {array} items - array with initial and step value\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let number = mySettings.number('Number', [10, 1], e => {})\n     */\n    number(name, items, callback) {\n        let self = this\n        let body = this._panel.childNodes[1]\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createElement('label', { class: 'sms-label' })\n        label.innerText = name\n        label.value = name\n        let input = this._createElement('input', {\n            class: 'sms-number',\n            id: base.id,\n            type: 'number',\n            value: items[0],\n            step: items[1]\n        })\n        input.addEventListener('input', e => {\n            base.value = parseFloat(e.target.value)\n            if (callback) {\n                callback(parseFloat(e))\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        base.type = 'number'\n        base.name = name\n        base.value = items[0]\n        base.getValue = function() {\n            return parseFloat(base.element().value)\n        }\n        base.setValue = function(v) {\n            base.element().value = v\n            base.value = v\n        }\n        wrapper.appendChild(label)\n        wrapper.appendChild(input)\n        body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name] = base\n    }\n\n    /**\n     * Creates file input control\n     * @param {string} name - name of the control\n     * @param {function} [callback] - function executed on each change\n     */\n    file(name, callback) {\n        let self = this\n        let body = this._panel.childNodes[1]\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createElement('label', { class: 'sms-label' })\n        let upload = this._createElement('input', {\n            class: 'sms-file',\n            id: base.id,\n            type: 'file'\n        })\n        base.name = name\n        base.type = 'file'\n        label.innerText = name\n        label.value = name\n        upload.addEventListener('change', e => {\n            base.value = e.target.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        wrapper.appendChild(label)\n        wrapper.appendChild(upload)\n        base.getValue = function() {\n            return base.element().files[0]\n        }\n        base.setValue = function(v) {\n            base.value = v\n            base.element().files[0] = v\n        }\n        body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name] = base\n    }\n\n    /**\n     * Watch panel for changes and fire callback on each change\n     * @param {function} callback - function executed on each change in the panel\n     * @returns {void}\n     * @example\n     * mySettings.watch(callback)\n     */\n    watch(callback) {\n        this._globalWatcher = callback\n    }\n\n    /**\n     * Load controls from the configuration object.\n     * @param {(object|string|array)} config - configuration object or JSON string or configuration array of objects\n     * @returns {void}\n     * @example\n     * const mySettings = new SmartSettings('Name', 10, 10)\n     * mySettings.loadConfig({\n     *      control1: {\n     *          type: 'color',\n     *          name: 'Color',\n     *          value: '#fd3ef4',\n     *          callback: someCallbackFunction\n     *      },\n     *      // etc.\n     * })\n     * \n     * // or\n     * mySettings.loadConfig('{\n     *      \"control1\": {\n     *          \"type\": \"color\",\n     *          \"name\": \"Color\",\n     *          \"value\": \"#fd3ef4\",\n     *          \"callback\": \"someCallbackFunction\"\n     *      },\n     *      // etc.\n     * })\n     * \n     * // or\n     * mySettings.loadConfig([{\n     *      {\n     *          type: 'color',\n     *          name: 'Color',\n     *          value: '#fd3ef4',\n     *          callback: someCallbackFunction\n     *      },\n     *      // etc.\n     * ])\n     */\n    loadConfig(config) {\n        if (!config) {\n            throw new Error('There is no config provided')\n        }\n        if (typeof config === 'string' || !Array.isArray(config)) {\n            if (typeof config === 'string') {\n                config = JSON.parse(config)\n            }\n            for (let key in config) {\n                let _entry = config[key]\n                this._assignEntryToMethod(_entry)\n            }\n        }\n        if (Array.isArray(config) === true) {\n            config.forEach(entry => this._assignEntryToMethod(entry))\n        }\n    }\n}\n\nexport default SmartSettings"],"names":["styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","SmartSettings","name","left","top","initialLeft","initialTop","_hidden","_open","_draggable","_panel","_controls","_globalWatcher","_createUniqueId","_create","counter","window","uniqueId","attributes","element","key","setAttribute","e","_entry","_isCallback","callback","button","range","items","select","text","value","checkbox","number","color","file","panelAttributes","class","id","panel","_createElement","header","body","paragraph","addEventListener","toggle","innerText","basics","disabled","hidden","getElementById","enable","removeAttribute","disable","show","classList","remove","hide","add","item","option","parentElement","removeChild","panelBody","childNodes","elem","getValue","setValue","values","i","typeCondition","getItems","Error","setItems","self","base","_createControlBasics","wrapper","_callGlobalWatcher","label","input","placeholder","target","textarea","span","min","max","step","parseFloat","v","checked","map","_createSelectOption","options","_select","selectedIndex","Array","from","forEach","_index","indexOf","upload","files","config","isArray","JSON","parse","_assignEntryToMethod","entry"],"mappings":";;;;;;EAAA,SAASA,WAAT,CAAqBC,GAArB,EAA0BC,GAA1B,EAA+B;EAC7B,MAAKA,QAAQ,KAAK,CAAlB,EAAsBA,MAAM,EAAN;EACtB,MAAIC,WAAWD,IAAIC,QAAnB;EAEA,MAAI,CAACF,GAAD,IAAQ,OAAOG,QAAP,KAAoB,WAAhC,EAA6C;EAAE;EAAS;EAExD,MAAIC,OAAOD,SAASC,IAAT,IAAiBD,SAASE,oBAAT,CAA8B,MAA9B,EAAsC,CAAtC,CAA5B;EACA,MAAIC,QAAQH,SAASI,aAAT,CAAuB,OAAvB,CAAZ;EACAD,QAAME,IAAN,GAAa,UAAb;EAEA,MAAIN,aAAa,KAAjB,EAAwB;EACtB,QAAIE,KAAKK,UAAT,EAAqB;EACnBL,WAAKM,YAAL,CAAkBJ,KAAlB,EAAyBF,KAAKK,UAA9B;EACD,KAFD,MAEO;EACLL,WAAKO,WAAL,CAAiBL,KAAjB;EACD;EACF,GAND,MAMO;EACLF,SAAKO,WAAL,CAAiBL,KAAjB;EACD;EAED,MAAIA,MAAMM,UAAV,EAAsB;EACpBN,UAAMM,UAAN,CAAiBC,OAAjB,GAA2Bb,GAA3B;EACD,GAFD,MAEO;EACLM,UAAMK,WAAN,CAAkBR,SAASW,cAAT,CAAwBd,GAAxB,CAAlB;EACD;EACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MCdKe;EACF,6BAAuD;EAAA,YAA3CC,IAA2C,uEAApC,eAAoC;EAAA,YAAnBC,IAAmB,uEAAZ,CAAY;EAAA,YAATC,GAAS,uEAAH,CAAG;EAAA;EACnD,aAAKF,IAAL,GAAYA,IAAZ;EACA,aAAKG,WAAL,GAAmBF,IAAnB;EACA,aAAKG,UAAL,GAAkBF,GAAlB;EAMA,aAAKG,OAAL,GAAe,KAAf;EAMA,aAAKC,KAAL,GAAa,IAAb;EAMA,aAAKC,UAAL,GAAkB,KAAlB;EAMA,aAAKC,MAAL,GAAc,IAAd;EAMA,aAAKC,SAAL,GAAiB,EAAjB;EAMA,aAAKC,cAAL,GAAsB,IAAtB;EAEA,aAAKC,eAAL;EACA,aAAKC,OAAL,CAAa,KAAKZ,IAAlB,EAAwB,KAAKI,UAA7B,EAAyC,KAAKD,WAA9C;EACH;;;4CAQiB;EACd,gBAAIU,UAAU,CAAd;EACAC,mBAAOC,QAAP,GAAkB;EAAA,mCAAgBF,SAAhB;EAAA,aAAlB;EACH;;;yCAScrB,MAAMwB,YAAY;EAC7B,gBAAIC,UAAU9B,SAASI,aAAT,CAAuBC,IAAvB,CAAd;EACA,gBAAIwB,UAAJ,EAAgB;EACZ,qBAAK,IAAIE,GAAT,IAAgBF,UAAhB,EAA4B;EACxB,wBAAIE,QAAQ,OAAZ,EAAqB;EACjBD,gCAAQE,YAAR,CAAqB,OAArB,EAA8BH,WAAWE,GAAX,CAA9B;EACH,qBAFD,MAEO;EACHD,gCAAQC,GAAR,IAAeF,WAAWE,GAAX,CAAf;EACH;EACJ;EACJ;EACD,mBAAOD,OAAP;EACH;;;6CAQkBG,GAAG;EAClB,gBAAI,KAAKV,cAAT,EAAyB;EACrB,qBAAKA,cAAL,CAAoBU,CAApB;EACH;EACJ;;;+CAOoBC,QAAQ;EACzB,gBAAIC,cAAcD,OAAOE,QAAP,GAAkBF,OAAOE,QAAzB,GAAoC,IAAtD;EACA,oBAAQF,OAAO7B,IAAf;EACA,qBAAK,QAAL;EACI,yBAAKgC,MAAL,CAAYH,OAAOrB,IAAnB,EAAyBsB,WAAzB;EACA;EACJ,qBAAK,OAAL;EACI,yBAAKG,KAAL,CAAWJ,OAAOrB,IAAlB,EAAwBqB,OAAOK,KAA/B,EAAsCJ,WAAtC;EACA;EACJ,qBAAK,QAAL;EACI,yBAAKK,MAAL,CAAYN,OAAOrB,IAAnB,EAAyBqB,OAAOK,KAAhC,EAAuCJ,WAAvC;EACA;EACJ,qBAAK,MAAL;EACI,yBAAKM,IAAL,CAAUP,OAAOrB,IAAjB,EAAuBqB,OAAOQ,KAA9B,EAAqCP,WAArC;EACA;EACJ,qBAAK,UAAL;EACI,yBAAKM,IAAL,CAAUP,OAAOrB,IAAjB,EAAuBqB,OAAOQ,KAA9B,EAAqCP,WAArC;EACA;EACJ,qBAAK,UAAL;EACI,yBAAKQ,QAAL,CAAcT,OAAOrB,IAArB,EAA2BqB,OAAOQ,KAAlC,EAAyCP,WAAzC;EACA;EACJ,qBAAK,QAAL;EACI,yBAAKS,MAAL,CAAYV,OAAOrB,IAAnB,EAAyBqB,OAAOK,KAAhC,EAAuCJ,WAAvC;EACA;EACJ,qBAAK,OAAL;EACI,yBAAKU,KAAL,CAAWX,OAAOrB,IAAlB,EAAwBqB,OAAOQ,KAA/B,EAAsCP,WAAtC;EACA;EACJ,qBAAK,MAAL;EACI,yBAAKW,IAAL,CAAUZ,OAAOrB,IAAjB,EAAuBsB,WAAvB;EA1BJ;EA4BH;;;oCASS;EAAA;EACN,gBAAIY,kBAAkB;EAClBC,uBAAO,WADW;EAElBC,oBAAIrB,UAFc;EAGlBzB,iCAAe,KAAKc,UAApB,kBAA2C,KAAKD,WAAhD;EAHkB,aAAtB;EAKA,gBAAIkC,QAAQ,KAAKC,cAAL,CAAoB,KAApB,EAA2BJ,eAA3B,CAAZ;EACA,gBAAIK,SAAS,KAAKD,cAAL,CAAoB,KAApB,EAA2B,EAAEH,OAAO,kBAAT,EAA3B,CAAb;EACA,gBAAIK,OAAO,KAAKF,cAAL,CAAoB,KAApB,EAA2B,EAAEH,OAAO,gBAAT,EAA3B,CAAX;EACA,gBAAIM,YAAY,KAAKH,cAAL,CAAoB,GAApB,EAAyB,EAAEH,OAAO,uBAAT,EAAzB,CAAhB;EAEAI,mBAAOG,gBAAP,CAAwB,OAAxB,EAAiC;EAAA,uBAAK,MAAKC,MAAL,EAAL;EAAA,aAAjC;EAEAF,sBAAUG,SAAV,GAAsB,KAAK5C,IAA3B;EACAuC,mBAAO5C,WAAP,CAAmB8C,SAAnB;EACAJ,kBAAM1C,WAAN,CAAkB4C,MAAlB;EACAF,kBAAM1C,WAAN,CAAkB6C,IAAlB;EACA,iBAAKhC,MAAL,GAAc6B,KAAd;EACAlD,qBAASqD,IAAT,CAAc7C,WAAd,CAA0B,KAAKa,MAA/B;EACH;;;iDAOsB;EACnB,gBAAI4B,KAAKrB,UAAT;EACA,gBAAI8B,SAAS;EACTT,oBAAIA,EADK;EAETU,0BAAU,KAFD;EAGTC,wBAAQ,KAHC;EAITlB,uBAAO,IAJE;EAKT7B,sBAAM,IALG;EAMTR,sBAAM,IANG;EAOTyB,yBAAS,mBAAW;EAChB,2BAAO9B,SAAS6D,cAAT,CAAwB,KAAKZ,EAA7B,CAAP;EACH,iBATQ;EAUTa,wBAAQ,kBAAW;EACf,yBAAKhC,OAAL,GAAeiC,eAAf,CAA+B,UAA/B;EACA,yBAAKJ,QAAL,GAAgB,KAAhB;EACH,iBAbQ;EAcTK,yBAAS,mBAAW;EAChB,yBAAKlC,OAAL,GAAeE,YAAf,CAA4B,UAA5B,EAAwC,IAAxC;EACA,yBAAK2B,QAAL,GAAgB,IAAhB;EACH,iBAjBQ;EAkBTM,sBAAM,gBAAW;EACb,wBAAI,KAAKnC,OAAL,GAAeoC,SAAf,CAAyB,CAAzB,MAAgC,MAApC,EAA4C;EACxC,6BAAKpC,OAAL,GAAeoC,SAAf,CAAyBC,MAAzB,CAAgC,MAAhC;EACA,6BAAKP,MAAL,GAAc,KAAd;EACH;EACJ,iBAvBQ;EAwBTQ,sBAAM,gBAAW;EACb,wBAAI,KAAKtC,OAAL,GAAeoC,SAAf,CAAyB,CAAzB,MAAgC,MAApC,EAA4C;EACxC,6BAAKpC,OAAL,GAAeoC,SAAf,CAAyBG,GAAzB,CAA6B,MAA7B;EACA,6BAAKT,MAAL,GAAc,IAAd;EACH;EACJ;EA7BQ,aAAb;EA+BA,mBAAOF,MAAP;EACH;;;8CAQmBY,MAAM;EACtB,gBAAIC,SAAS,KAAKpB,cAAL,CAAoB,QAApB,EAA8B;EACvCH,uBAAO,mBADgC;EAEvCN,uBAAO4B;EAFgC,aAA9B,CAAb;EAIAC,mBAAOd,SAAP,GAAmBa,IAAnB;EACA,mBAAOC,MAAP;EACH;;;oCAUS;EACN,gBAAI,KAAKlD,MAAL,IAAe,KAAKA,MAAL,CAAYmD,aAA/B,EAA8C;EAC1C,qBAAKnD,MAAL,CAAYmD,aAAZ,CAA0BC,WAA1B,CAAsC,KAAKpD,MAA3C;EACH;EACD,iBAAKA,MAAL,GAAc,IAAd;EACA,iBAAKC,SAAL,GAAiB,EAAjB;EACH;;;+BASIT,MAAM;EACP,gBAAIA,IAAJ,EAAU;EACN,qBAAKS,SAAL,CAAeT,IAAf,EAAqBoD,IAArB;EACH;EACD,iBAAK5C,MAAL,CAAY6C,SAAZ,CAAsBC,MAAtB,CAA6B,MAA7B;EACA,iBAAKjD,OAAL,GAAe,KAAf;EACH;;;+BASIL,MAAM;EACP,gBAAIA,IAAJ,EAAU;EACN,qBAAKS,SAAL,CAAeT,IAAf,EAAqBuD,IAArB;EACH;EACD,iBAAK/C,MAAL,CAAY6C,SAAZ,CAAsBG,GAAtB,CAA0B,MAA1B;EACA,iBAAKnD,OAAL,GAAe,IAAf;EACH;;;iCASML,MAAM;EACT,gBAAIA,QAAQ,KAAKS,SAAL,CAAeT,IAAf,CAAZ,EAAkC;EAC9B,uBAAO,KAAKS,SAAL,CAAeT,IAAf,EAAqBiD,MAArB,EAAP;EACH;EACJ;;;kCASOjD,MAAM;EACV,gBAAIA,QAAQ,KAAKS,SAAL,CAAeT,IAAf,CAAZ,EAAkC;EAC9B,uBAAO,KAAKS,SAAL,CAAeT,IAAf,EAAqBmD,OAArB,EAAP;EACH;EACJ;;;iCAOM;EACH,gBAAIU,YAAY,KAAKrD,MAAL,CAAYsD,UAAZ,CAAuB,CAAvB,CAAhB;EACA,gBAAID,UAAUR,SAAV,CAAoB,CAApB,MAA2B,MAA/B,EAAuC;EACnCQ,0BAAUR,SAAV,CAAoBC,MAApB,CAA2B,MAA3B;EACH;EACD,iBAAKhD,KAAL,GAAa,IAAb;EACH;;;kCAQO;EACJ,gBAAIuD,YAAY,KAAKrD,MAAL,CAAYsD,UAAZ,CAAuB,CAAvB,CAAhB;EACAD,sBAAUR,SAAV,CAAoBG,GAApB,CAAwB,MAAxB;EACA,iBAAKlD,KAAL,GAAa,KAAb;EACH;;;mCAQQ;EACL,gBAAIuD,YAAY,KAAKrD,MAAL,CAAYsD,UAAZ,CAAuB,CAAvB,CAAhB;EACAD,sBAAUR,SAAV,CAAoB,CAApB,MAA2B,MAA3B,GACIQ,UAAUR,SAAV,CAAoBC,MAApB,CAA2B,MAA3B,CADJ,GAEIO,UAAUR,SAAV,CAAoBG,GAApB,CAAwB,MAAxB,CAFJ;EAGA,iBAAKlD,KAAL,GAAa,CAAC,KAAKA,KAAnB;EACH;;;wCAQa;EACV,mBAAO,CAAC,KAAKH,WAAN,EAAmB,KAAKC,UAAxB,CAAP;EACH;;;sCASWH,MAAMC,KAAK;EACnB,iBAAKC,WAAL,GAAmBF,IAAnB;EACA,iBAAKG,UAAL,GAAkBF,GAAlB;EACH;;;iCASMF,MAAM;EACT,gBAAIA,IAAJ,EAAU;EACN,oBAAI+D,OAAO,KAAKtD,SAAL,CAAeT,IAAf,EAAqBiB,OAArB,EAAX;EACA8C,qBAAKJ,aAAL,CAAmBL,MAAnB;EACAS,qBAAKT,MAAL;EACA,uBAAO,KAAK7C,SAAL,CAAeT,IAAf,CAAP;EACH;EACJ;;;mCASQA,MAAM;EACX,gBAAIA,QAAQ,KAAKS,SAAL,CAAeT,IAAf,CAAR,IAAgC,KAAKS,SAAL,CAAeT,IAAf,EAAqBgE,QAAzD,EAAmE;EAC/D,uBAAO,KAAKvD,SAAL,CAAeT,IAAf,EAAqBgE,QAArB,EAAP;EACH;EACJ;;;mCAUQhE,MAAM6B,OAAO;EAClB,gBAAI7B,QAAQ,KAAKS,SAAL,CAAeT,IAAf,CAAR,IAAgC,KAAKS,SAAL,CAAeT,IAAf,EAAqBiE,QAAzD,EAAmE;EAC/D,uBAAO,KAAKxD,SAAL,CAAeT,IAAf,EAAqBiE,QAArB,CAA8BpC,KAA9B,CAAP;EACH;EACJ;;;4CAQiB;EACd,gBAAIqC,SAAS,EAAb;EACA,iBAAK,IAAIC,CAAT,IAAc,KAAK1D,SAAnB,EAA8B;EAC1B,oBAAI,KAAKA,SAAL,CAAe0D,CAAf,EAAkBH,QAAtB,EAAgC;EAC5BE,2BAAOC,CAAP,IAAY,KAAK1D,SAAL,CAAe0D,CAAf,EAAkBH,QAAlB,EAAZ;EACH;EACJ;EACD,mBAAOE,MAAP;EACH;;;mCASQlE,MAAM;EACX,gBAAIoE,gBACA,KAAK3D,SAAL,CAAeT,IAAf,EAAqBR,IAArB,KAA8B,OAA9B,IACA,KAAKiB,SAAL,CAAeT,IAAf,EAAqBR,IAArB,KAA8B,QAD9B,IAEA,KAAKiB,SAAL,CAAeT,IAAf,EAAqBR,IAArB,KAA8B,aAHlC;EAKA,gBAAI,KAAKiB,SAAL,CAAeT,IAAf,KAAwBoE,aAA5B,EAA2C;EACvC,uBAAO,KAAK3D,SAAL,CAAeT,IAAf,EAAqBqE,QAArB,EAAP;EACH,aAFD,MAEO;EACH,sBAAM,IAAIC,KAAJ,CAAU,2DAAV,CAAN;EACH;EACJ;;;mCAUQtE,MAAM0B,OAAO;EAClB,gBAAI0C,gBACA,KAAK3D,SAAL,CAAeT,IAAf,EAAqBR,IAArB,KAA8B,OAA9B,IACA,KAAKiB,SAAL,CAAeT,IAAf,EAAqBR,IAArB,KAA8B,QAD9B,IAEA,KAAKiB,SAAL,CAAeT,IAAf,EAAqBR,IAArB,KAA8B,aAHlC;EAKA,gBAAI,KAAKiB,SAAL,CAAeT,IAAf,KAAwBoE,aAA5B,EAA2C;EACvC,uBAAO,KAAK3D,SAAL,CAAeT,IAAf,EAAqBuE,QAArB,CAA8B7C,KAA9B,CAAP;EACH,aAFD,MAEO;EACH,sBAAM,IAAI4C,KAAJ,CAAU,2DAAV,CAAN;EACH;EACJ;;;iCAUMtE,MAAMuB,UAAU;EACnB,gBAAIiD,OAAO,IAAX;EACA,gBAAIC,OAAO,KAAKC,oBAAL,EAAX;EACA,gBAAIlC,OAAO,KAAKhC,MAAL,CAAYsD,UAAZ,CAAuB,CAAvB,CAAX;EACA,gBAAIa,UAAU,KAAKrC,cAAL,CAAoB,KAApB,EAA2B;EACrCH,uBAAO;EAD8B,aAA3B,CAAd;EAGA,gBAAIX,SAAS,KAAKc,cAAL,CAAoB,QAApB,EAA8B;EACvCH,uBAAO,YADgC;EAEvCC,oBAAIqC,KAAKrC;EAF8B,aAA9B,CAAb;EAIAqC,iBAAKjF,IAAL,GAAY,QAAZ;EACAiF,iBAAKzE,IAAL,GAAYA,IAAZ;EACAwB,mBAAOoB,SAAP,GAAmB5C,IAAnB;EACAwB,mBAAOK,KAAP,GAAe7B,IAAf;EACAwB,mBAAOkB,gBAAP,CAAwB,OAAxB,EAAiC,aAAK;EAClC,oBAAInB,QAAJ,EAAc;EACVA,6BAASH,CAAT;EACH;EACD,oBAAIoD,KAAK9D,cAAL,KAAwB,IAA5B,EAAkC;EAC9B8D,yBAAKI,kBAAL,CAAwBxD,CAAxB;EACH;EACJ,aAPD;EAQAuD,oBAAQhF,WAAR,CAAoB6B,MAApB;EACAgB,iBAAK7C,WAAL,CAAiBgF,OAAjB;EACA,iBAAKlE,SAAL,CAAeT,IAAf,IAAuByE,IAAvB;EACA,mBAAO,KAAKhE,SAAL,CAAeT,IAAf,CAAP;EACH;;;+BAWIA,MAAM6B,OAAON,UAAU;EACxB,gBAAIiD,OAAO,IAAX;EACA,gBAAIhC,OAAO,KAAKhC,MAAL,CAAYsD,UAAZ,CAAuB,CAAvB,CAAX;EACA,gBAAIW,OAAO,KAAKC,oBAAL,EAAX;EACA,gBAAIC,UAAU,KAAKrC,cAAL,CAAoB,KAApB,EAA2B,EAAEH,OAAO,aAAT,EAA3B,CAAd;EACA,gBAAI0C,QAAQ,KAAKvC,cAAL,CAAoB,OAApB,EAA6B,EAAEH,OAAO,WAAT,EAA7B,CAAZ;EACA,gBAAI2C,QAAQ,KAAKxC,cAAL,CAAoB,OAApB,EAA6B;EACrCH,uBAAO,UAD8B;EAErCC,oBAAIqC,KAAKrC,EAF4B;EAGrC5C,sBAAM;EAH+B,aAA7B,CAAZ;EAKAsF,kBAAMlC,SAAN,GAAkBf,KAAlB;EACAiD,kBAAMjD,KAAN,GAAcA,KAAd;EACAiD,kBAAMC,WAAN,GAAoBlD,KAApB;EACA4C,iBAAKzE,IAAL,GAAYA,IAAZ;EACAyE,iBAAK5C,KAAL,GAAaA,KAAb;EACA4C,iBAAKjF,IAAL,GAAY,MAAZ;EACAqF,kBAAMjC,SAAN,GAAkB5C,IAAlB;EACA2E,oBAAQhF,WAAR,CAAoBkF,KAApB;EACAF,oBAAQhF,WAAR,CAAoBmF,KAApB;EACAA,kBAAMpC,gBAAN,CAAuB,OAAvB,EAAgC,aAAK;EACjC+B,qBAAK5C,KAAL,GAAaT,EAAE4D,MAAF,CAASnD,KAAtB;EACA,oBAAIN,QAAJ,EAAc;EACVA,6BAASH,CAAT;EACH;EACD,oBAAIoD,KAAK9D,cAAL,KAAwB,IAA5B,EAAkC;EAC9B8D,yBAAKI,kBAAL,CAAwBxD,CAAxB;EACH;EACJ,aARD;EASAoB,iBAAK7C,WAAL,CAAiBgF,OAAjB;EACAF,iBAAKT,QAAL,GAAgB,YAAW;EACvB,uBAAO,KAAK/C,OAAL,GAAeY,KAAtB;EACH,aAFD;EAGA4C,iBAAKR,QAAL,GAAgB,UAASpC,KAAT,EAAgB;EAC5B4C,qBAAK5C,KAAL,GAAaA,KAAb;EACA4C,qBAAKxD,OAAL,GAAe2B,SAAf,GAA2Bf,KAA3B;EACA4C,qBAAKxD,OAAL,GAAeY,KAAf,GAAuBA,KAAvB;EACH,aAJD;EAKA,iBAAKpB,SAAL,CAAeT,IAAf,IAAuByE,IAAvB;EACA,mBAAO,KAAKhE,SAAL,CAAeT,IAAf,CAAP;EACH;;;mCAWQA,MAAM6B,OAAON,UAAU;EAC5B,gBAAIiD,OAAO,IAAX;EACA,gBAAIhC,OAAO,KAAKhC,MAAL,CAAYsD,UAAZ,CAAuB,CAAvB,CAAX;EACA,gBAAIW,OAAO,KAAKC,oBAAL,EAAX;EACA,gBAAIC,UAAU,KAAKrC,cAAL,CAAoB,KAApB,EAA2B,EAAEH,OAAO,aAAT,EAA3B,CAAd;EACA,gBAAI0C,QAAQ,KAAKvC,cAAL,CAAoB,OAApB,EAA6B,EAAEH,OAAO,WAAT,EAA7B,CAAZ;EACA,gBAAI8C,WAAW,KAAK3C,cAAL,CAAoB,UAApB,EAAgC;EAC3CH,uBAAO,cADoC;EAE3CC,oBAAIqC,KAAKrC;EAFkC,aAAhC,CAAf;EAIA6C,qBAASrC,SAAT,GAAqBf,KAArB;EACAoD,qBAASpD,KAAT,GAAiBA,KAAjB;EACAoD,qBAASF,WAAT,GAAuBlD,KAAvB;EACA4C,iBAAKzE,IAAL,GAAYA,IAAZ;EACAyE,iBAAK5C,KAAL,GAAaA,KAAb;EACA4C,iBAAKjF,IAAL,GAAY,MAAZ;EACAqF,kBAAMjC,SAAN,GAAkB5C,IAAlB;EACA2E,oBAAQhF,WAAR,CAAoBkF,KAApB;EACAF,oBAAQhF,WAAR,CAAoBsF,QAApB;EACAA,qBAASvC,gBAAT,CAA0B,OAA1B,EAAmC,aAAK;EACpC+B,qBAAK5C,KAAL,GAAaT,EAAE4D,MAAF,CAASnD,KAAtB;EACA,oBAAIN,QAAJ,EAAc;EACVA,6BAASH,CAAT;EACH;EACD,oBAAIoD,KAAK9D,cAAL,KAAwB,IAA5B,EAAkC;EAC9B8D,yBAAKI,kBAAL,CAAwBxD,CAAxB;EACH;EACJ,aARD;EASAoB,iBAAK7C,WAAL,CAAiBgF,OAAjB;EACAF,iBAAKT,QAAL,GAAgB,YAAY;EACxB,uBAAO,KAAK/C,OAAL,GAAeY,KAAtB;EACH,aAFD;EAGA4C,iBAAKR,QAAL,GAAgB,UAAUpC,KAAV,EAAiB;EAC7B4C,qBAAK5C,KAAL,GAAaA,KAAb;EACA4C,qBAAKxD,OAAL,GAAe2B,SAAf,GAA2Bf,KAA3B;EACA4C,qBAAKxD,OAAL,GAAeY,KAAf,GAAuBA,KAAvB;EACH,aAJD;EAKA,iBAAKpB,SAAL,CAAeT,IAAf,IAAuByE,IAAvB;EACA,mBAAO,KAAKhE,SAAL,CAAeT,IAAf,CAAP;EACH;;;gCAWKA,MAAM0B,OAAOH,UAAU;EACzB,gBAAIiD,OAAO,IAAX;EACA,gBAAIhC,OAAO,KAAKhC,MAAL,CAAYsD,UAAZ,CAAuB,CAAvB,CAAX;EACA,gBAAIW,OAAO,KAAKC,oBAAL,EAAX;EACA,gBAAIC,UAAU,KAAKrC,cAAL,CAAoB,KAApB,EAA2B,EAAEH,OAAO,aAAT,EAA3B,CAAd;EACA,gBAAI0C,QAAQ,KAAKvC,cAAL,CAAoB,OAApB,EAA6B,EAAEH,OAAO,WAAT,EAA7B,CAAZ;EACA,gBAAI+C,OAAO,KAAK5C,cAAL,CAAoB,MAApB,EAA4B,EAAEH,OAAO,gBAAT,EAA5B,CAAX;EACA,gBAAI2C,QAAQ,KAAKxC,cAAL,CAAoB,OAApB,EAA6B;EACrCH,uBAAO,WAD8B;EAErCC,oBAAIqC,KAAKrC,EAF4B;EAGrC5C,sBAAM,OAH+B;EAIrC2F,qBAAKzD,MAAM,CAAN,CAJgC;EAKrC0D,qBAAK1D,MAAM,CAAN,CALgC;EAMrCG,uBAAOH,MAAM,CAAN,CAN8B;EAOrC2D,sBAAM3D,MAAM,CAAN;EAP+B,aAA7B,CAAZ;EAUA+C,iBAAKjF,IAAL,GAAY,OAAZ;EACAiF,iBAAKzE,IAAL,GAAYA,IAAZ;EACAyE,iBAAK5C,KAAL,GAAaH,MAAM,CAAN,CAAb;EACAoD,kBAAMpC,gBAAN,CAAuB,OAAvB,EAAgC,aAAK;EACjC+B,qBAAK5C,KAAL,GAAaT,EAAE4D,MAAF,CAASnD,KAAtB;EACAqD,qBAAKtC,SAAL,GAAiB6B,KAAK5C,KAAtB;EACA,oBAAIN,QAAJ,EAAc;EACVA,6BAASH,CAAT;EACH;EACD,oBAAIoD,KAAK9D,cAAL,KAAwB,IAA5B,EAAkC;EAC9B8D,yBAAKI,kBAAL,CAAwBxD,CAAxB;EACH;EACJ,aATD;EAUA8D,iBAAKtC,SAAL,GAAiB6B,KAAK5C,KAAtB;EACAgD,kBAAMhD,KAAN,GAAc7B,IAAd;EACA6E,kBAAMjC,SAAN,GAAkB5C,IAAlB;EACA6E,kBAAMlF,WAAN,CAAkBuF,IAAlB;EACAP,oBAAQhF,WAAR,CAAoBkF,KAApB;EACAF,oBAAQhF,WAAR,CAAoBmF,KAApB;EACAtC,iBAAK7C,WAAL,CAAiBgF,OAAjB;EACAF,iBAAKT,QAAL,GAAgB,YAAW;EACvB,uBAAOsB,WAAWb,KAAKxD,OAAL,GAAeY,KAA1B,CAAP;EACH,aAFD;EAGA4C,iBAAKR,QAAL,GAAgB,UAASsB,CAAT,EAAY;EACxBd,qBAAK5C,KAAL,GAAa0D,CAAb;EACAd,qBAAKxD,OAAL,GAAeY,KAAf,GAAuB0D,CAAvB;EACH,aAHD;EAIAd,iBAAKJ,QAAL,GAAgB,YAAW;EACvB,oBAAIjD,IAAIqD,KAAKxD,OAAL,EAAR;EACA,uBAAO,CACHqE,WAAWlE,EAAE+D,GAAb,CADG,EAEHG,WAAWlE,EAAEgE,GAAb,CAFG,EAGHE,WAAWlE,EAAES,KAAb,CAHG,EAIHyD,WAAWlE,EAAEiE,IAAb,CAJG,CAAP;EAMH,aARD;EASAZ,iBAAKF,QAAL,GAAgB,UAAS7C,KAAT,EAAgB;EAC5B,oBAAIN,IAAIqD,KAAKxD,OAAL,EAAR;EACAG,kBAAE+D,GAAF,GAAQzD,MAAM,CAAN,CAAR;EACAN,kBAAEgE,GAAF,GAAQ1D,MAAM,CAAN,CAAR;EACAN,kBAAES,KAAF,GAAUH,MAAM,CAAN,CAAV;EACAN,kBAAEiE,IAAF,GAAS3D,MAAM,CAAN,CAAT;EACA+C,qBAAK5C,KAAL,GAAayD,WAAWlE,EAAES,KAAb,CAAb;EACH,aAPD;EAQA,iBAAKpB,SAAL,CAAeT,IAAf,IAAuByE,IAAvB;EACA,mBAAO,KAAKhE,SAAL,CAAeT,IAAf,CAAP;EACH;;;mCAaQA,MAAM6B,OAAON,UAAU;EAC5B,gBAAIiD,OAAO,IAAX;EACA,gBAAIhC,OAAO,KAAKhC,MAAL,CAAYsD,UAAZ,CAAuB,CAAvB,CAAX;EACA,gBAAIW,OAAO,KAAKC,oBAAL,EAAX;EACA,gBAAIC,UAAU,KAAKrC,cAAL,CAAoB,KAApB,EAA2B,EAAEH,OAAO,aAAT,EAA3B,CAAd;EACA,gBAAI0C,QAAQ,KAAKvC,cAAL,CAAoB,OAApB,EAA6B,EAAEH,OAAO,WAAT,EAA7B,CAAZ;EACA,gBAAIL,WAAW,KAAKQ,cAAL,CAAoB,OAApB,EAA6B;EACxCH,uBAAO,cADiC;EAExCC,oBAAIqC,KAAKrC,EAF+B;EAGxC5C,sBAAM;EAHkC,aAA7B,CAAf;EAKAiF,iBAAKzE,IAAL,GAAYA,IAAZ;EACAyE,iBAAKjF,IAAL,GAAY,UAAZ;EACAiF,iBAAK5C,KAAL,GAAaA,KAAb;EACAgD,kBAAMjC,SAAN,GAAkB5C,IAAlB;EACA6E,kBAAMhD,KAAN,GAAc7B,IAAd;EACA,gBAAI6B,UAAU,IAAd,EAAoB;EAChBC,yBAASX,YAAT,CAAsB,SAAtB,EAAiC,IAAjC;EACH;EACDW,qBAASY,gBAAT,CAA0B,QAA1B,EAAoC,aAAK;EACrC+B,qBAAK5C,KAAL,GAAaT,EAAE4D,MAAF,CAASQ,OAAtB;EACA,oBAAIjE,QAAJ,EAAc;EACVA,6BAASH,CAAT;EACH;EACD,oBAAIoD,KAAK9D,cAAL,KAAwB,IAA5B,EAAkC;EAC9B8D,yBAAKI,kBAAL,CAAwBxD,CAAxB;EACH;EACJ,aARD;EASAuD,oBAAQhF,WAAR,CAAoBkF,KAApB;EACAF,oBAAQhF,WAAR,CAAoBmC,QAApB;EACAU,iBAAK7C,WAAL,CAAiBgF,OAAjB;EACAF,iBAAKT,QAAL,GAAgB,YAAW;EACvB,uBAAOS,KAAKxD,OAAL,GAAeuE,OAAtB;EACH,aAFD;EAGAf,iBAAKR,QAAL,GAAgB,UAASsB,CAAT,EAAY;EACxBd,qBAAKxD,OAAL,GAAeuE,OAAf,GAAyBD,CAAzB;EACAd,qBAAK5C,KAAL,GAAa0D,CAAb;EACH,aAHD;EAIA,iBAAK9E,SAAL,CAAeT,IAAf,IAAuByE,IAAvB;EACA,mBAAO,KAAKhE,SAAL,CAAeT,IAAf,CAAP;EACH;;;gCAWKA,MAAM6B,OAAON,UAAU;EACzB,gBAAIiD,OAAO,IAAX;EACA,gBAAIhC,OAAO,KAAKhC,MAAL,CAAYsD,UAAZ,CAAuB,CAAvB,CAAX;EACA,gBAAIW,OAAO,KAAKC,oBAAL,EAAX;EACA,gBAAIC,UAAU,KAAKrC,cAAL,CAAoB,KAApB,EAA2B,EAAEH,OAAO,aAAT,EAA3B,CAAd;EACA,gBAAI0C,QAAQ,KAAKvC,cAAL,CAAoB,OAApB,EAA6B,EAAEH,OAAO,WAAT,EAA7B,CAAZ;EACA,gBAAI+C,OAAO,KAAK5C,cAAL,CAAoB,MAApB,EAA4B,EAAEH,OAAO,gBAAT,EAA5B,CAAX;EACA,gBAAI2C,QAAQ,KAAKxC,cAAL,CAAoB,OAApB,EAA6B;EACrCH,uBAAO,WAD8B;EAErCC,oBAAIqC,KAAKrC,EAF4B;EAGrC5C,sBAAM;EAH+B,aAA7B,CAAZ;EAKAiF,iBAAKzE,IAAL,GAAYA,IAAZ;EACAyE,iBAAKjF,IAAL,GAAY,OAAZ;EACAiF,iBAAK5C,KAAL,GAAaA,KAAb;EACAiD,kBAAM3D,YAAN,CAAmB,OAAnB,EAA4BU,KAA5B;EACAiD,kBAAMpC,gBAAN,CAAuB,OAAvB,EAAgC,aAAK;EACjC+B,qBAAK5C,KAAL,GAAaT,EAAE4D,MAAF,CAASnD,KAAtB;EACAqD,qBAAKtC,SAAL,GAAiBxB,EAAE4D,MAAF,CAASnD,KAA1B;EACA,oBAAIN,QAAJ,EAAc;EACVA,6BAASH,CAAT;EACH;EACD,oBAAIoD,KAAK9D,cAAL,KAAwB,IAA5B,EAAkC;EAC9B8D,yBAAKI,kBAAL,CAAwBxD,CAAxB;EACH;EACJ,aATD;EAUA8D,iBAAKtC,SAAL,GAAiBf,KAAjB;EACAgD,kBAAMhD,KAAN,GAAc7B,IAAd;EACA6E,kBAAMjC,SAAN,GAAkB5C,IAAlB;EACA6E,kBAAMlF,WAAN,CAAkBuF,IAAlB;EACAP,oBAAQhF,WAAR,CAAoBkF,KAApB;EACAF,oBAAQhF,WAAR,CAAoBmF,KAApB;EACAtC,iBAAK7C,WAAL,CAAiBgF,OAAjB;EACAF,iBAAKT,QAAL,GAAgB,YAAW;EACvB,uBAAOS,KAAKxD,OAAL,GAAeY,KAAtB;EACH,aAFD;EAGA4C,iBAAKR,QAAL,GAAgB,UAASsB,CAAT,EAAY;EACxBd,qBAAKxD,OAAL,GAAeY,KAAf,GAAuB0D,CAAvB;EACAd,qBAAK5C,KAAL,GAAa0D,CAAb;EACAL,qBAAKtC,SAAL,GAAiB2C,CAAjB;EACH,aAJD;EAKA,iBAAK9E,SAAL,CAAeT,IAAf,IAAuByE,IAAvB;EACA,mBAAO,KAAKhE,SAAL,CAAeT,IAAf,CAAP;EACH;;;iCAWMA,MAAM0B,OAAOH,UAAU;EAC1B,gBAAIiD,OAAO,IAAX;EACA,gBAAIhC,OAAO,KAAKhC,MAAL,CAAYsD,UAAZ,CAAuB,CAAvB,CAAX;EACA,gBAAIW,OAAO,KAAKC,oBAAL,EAAX;EACA,gBAAIC,UAAU,KAAKrC,cAAL,CAAoB,KAApB,EAA2B,EAAEH,OAAO,aAAT,EAA3B,CAAd;EACA,gBAAI0C,QAAQ,KAAKvC,cAAL,CAAoB,OAApB,EAA6B,EAAEH,OAAO,WAAT,EAA7B,CAAZ;EACA,gBAAIR,SAAS,KAAKW,cAAL,CAAoB,QAApB,EAA8B;EACvCH,uBAAO,YADgC;EAEvCC,oBAAIqC,KAAKrC,EAF8B;EAGvCpC,sBAAMA;EAHiC,aAA9B,CAAb;EAKA6E,kBAAMjC,SAAN,GAAkB5C,IAAlB;EACA6E,kBAAMhD,KAAN,GAAc7B,IAAd;EACA2E,oBAAQhF,WAAR,CAAoBkF,KAApB;EACAnD,kBAAM+D,GAAN,CAAU,gBAAQ;EACd,oBAAI/B,SAASc,KAAKkB,mBAAL,CAAyBjC,IAAzB,CAAb;EACA9B,uBAAOgE,OAAP,CAAenC,GAAf,CAAmBE,MAAnB;EACH,aAHD;EAIA/B,mBAAOE,KAAP,GAAeH,MAAM,CAAN,CAAf;EACAC,mBAAOe,gBAAP,CAAwB,QAAxB,EAAkC,aAAK;EACnC+B,qBAAK5C,KAAL,GAAaT,EAAE4D,MAAF,CAASnD,KAAtB;EACA,oBAAIN,QAAJ,EAAc;EACVA,6BAASH,CAAT;EACH;EACD,oBAAIoD,KAAK9D,cAAL,KAAwB,IAA5B,EAAkC;EAC9B8D,yBAAKI,kBAAL,CAAwBxD,CAAxB;EACH;EACJ,aARD;EASAuD,oBAAQhF,WAAR,CAAoBgC,MAApB;EACAa,iBAAK7C,WAAL,CAAiBgF,OAAjB;EACAF,iBAAK5C,KAAL,GAAaH,MAAM,CAAN,CAAb;EACA+C,iBAAKzE,IAAL,GAAYA,IAAZ;EACAyE,iBAAKjF,IAAL,GAAY,QAAZ;EACAiF,iBAAKT,QAAL,GAAgB,YAAW;EACvB,oBAAI4B,UAAUnB,KAAKxD,OAAL,EAAd;EACA,uBAAO2E,QAAQD,OAAR,CAAgBC,QAAQC,aAAxB,EAAuChE,KAA9C;EACH,aAHD;EAIA4C,iBAAKR,QAAL,GAAgB,UAASsB,CAAT,EAAY;EACxBd,qBAAK5C,KAAL,GAAa0D,CAAb;EACA,oBAAIK,UAAUnB,KAAKxD,OAAL,EAAd;EACAU,uBAAOgE,OAAP,CAAehE,OAAOkE,aAAtB,IAAuCrB,KAAKkB,mBAAL,CAAyBH,CAAzB,CAAvC;EACAK,wBAAQ/D,KAAR,GAAgB0D,CAAhB;EACH,aALD;EAMAd,iBAAKJ,QAAL,GAAgB,YAAW;EACvB,uBAAOyB,MACFC,IADE,CACGtB,KAAKxD,OAAL,GAAe0E,OADlB,EAEFF,GAFE,CAEE;EAAA,2BAAU/B,OAAO7B,KAAjB;EAAA,iBAFF,CAAP;EAGH,aAJD;EAKA4C,iBAAKF,QAAL,GAAgB,UAAS7C,KAAT,EAAgB;EAC5B,oBAAIkE,UAAUnB,KAAKxD,OAAL,EAAd;EACAS,sBAAMsE,OAAN,CAAc,gBAAQ;EAClB,wBAAIC,SAASvE,MAAMwE,OAAN,CAAczC,IAAd,CAAb;EACAmC,4BAAQD,OAAR,CAAgBM,MAAhB,IAA0BzB,KAAKkB,mBAAL,CAAyBjC,IAAzB,CAA1B;EACH,iBAHD;EAIH,aAND;EAOA,iBAAKhD,SAAL,CAAeT,IAAf,IAAuByE,IAAvB;EACA,mBAAO,KAAKhE,SAAL,CAAeT,IAAf,CAAP;EACH;;;iCAWMA,MAAM0B,OAAOH,UAAU;EAC1B,gBAAIiD,OAAO,IAAX;EACA,gBAAIhC,OAAO,KAAKhC,MAAL,CAAYsD,UAAZ,CAAuB,CAAvB,CAAX;EACA,gBAAIW,OAAO,KAAKC,oBAAL,EAAX;EACA,gBAAIC,UAAU,KAAKrC,cAAL,CAAoB,KAApB,EAA2B,EAAEH,OAAO,aAAT,EAA3B,CAAd;EACA,gBAAI0C,QAAQ,KAAKvC,cAAL,CAAoB,OAApB,EAA6B,EAAEH,OAAO,WAAT,EAA7B,CAAZ;EACA0C,kBAAMjC,SAAN,GAAkB5C,IAAlB;EACA6E,kBAAMhD,KAAN,GAAc7B,IAAd;EACA,gBAAI8E,QAAQ,KAAKxC,cAAL,CAAoB,OAApB,EAA6B;EACrCH,uBAAO,YAD8B;EAErCC,oBAAIqC,KAAKrC,EAF4B;EAGrC5C,sBAAM,QAH+B;EAIrCqC,uBAAOH,MAAM,CAAN,CAJ8B;EAKrC2D,sBAAM3D,MAAM,CAAN;EAL+B,aAA7B,CAAZ;EAOAoD,kBAAMpC,gBAAN,CAAuB,OAAvB,EAAgC,aAAK;EACjC+B,qBAAK5C,KAAL,GAAayD,WAAWlE,EAAE4D,MAAF,CAASnD,KAApB,CAAb;EACA,oBAAIN,QAAJ,EAAc;EACVA,6BAAS+D,WAAWlE,CAAX,CAAT;EACH;EACD,oBAAIoD,KAAK9D,cAAL,KAAwB,IAA5B,EAAkC;EAC9B8D,yBAAKI,kBAAL,CAAwBxD,CAAxB;EACH;EACJ,aARD;EASAqD,iBAAKjF,IAAL,GAAY,QAAZ;EACAiF,iBAAKzE,IAAL,GAAYA,IAAZ;EACAyE,iBAAK5C,KAAL,GAAaH,MAAM,CAAN,CAAb;EACA+C,iBAAKT,QAAL,GAAgB,YAAW;EACvB,uBAAOsB,WAAWb,KAAKxD,OAAL,GAAeY,KAA1B,CAAP;EACH,aAFD;EAGA4C,iBAAKR,QAAL,GAAgB,UAASsB,CAAT,EAAY;EACxBd,qBAAKxD,OAAL,GAAeY,KAAf,GAAuB0D,CAAvB;EACAd,qBAAK5C,KAAL,GAAa0D,CAAb;EACH,aAHD;EAIAZ,oBAAQhF,WAAR,CAAoBkF,KAApB;EACAF,oBAAQhF,WAAR,CAAoBmF,KAApB;EACAtC,iBAAK7C,WAAL,CAAiBgF,OAAjB;EACA,iBAAKlE,SAAL,CAAeT,IAAf,IAAuByE,IAAvB;EACA,mBAAO,KAAKhE,SAAL,CAAeT,IAAf,IAAuByE,IAA9B;EACH;;;+BAOIzE,MAAMuB,UAAU;EACjB,gBAAIiD,OAAO,IAAX;EACA,gBAAIhC,OAAO,KAAKhC,MAAL,CAAYsD,UAAZ,CAAuB,CAAvB,CAAX;EACA,gBAAIW,OAAO,KAAKC,oBAAL,EAAX;EACA,gBAAIC,UAAU,KAAKrC,cAAL,CAAoB,KAApB,EAA2B,EAAEH,OAAO,aAAT,EAA3B,CAAd;EACA,gBAAI0C,QAAQ,KAAKvC,cAAL,CAAoB,OAApB,EAA6B,EAAEH,OAAO,WAAT,EAA7B,CAAZ;EACA,gBAAIgE,SAAS,KAAK7D,cAAL,CAAoB,OAApB,EAA6B;EACtCH,uBAAO,UAD+B;EAEtCC,oBAAIqC,KAAKrC,EAF6B;EAGtC5C,sBAAM;EAHgC,aAA7B,CAAb;EAKAiF,iBAAKzE,IAAL,GAAYA,IAAZ;EACAyE,iBAAKjF,IAAL,GAAY,MAAZ;EACAqF,kBAAMjC,SAAN,GAAkB5C,IAAlB;EACA6E,kBAAMhD,KAAN,GAAc7B,IAAd;EACAmG,mBAAOzD,gBAAP,CAAwB,QAAxB,EAAkC,aAAK;EACnC+B,qBAAK5C,KAAL,GAAaT,EAAE4D,MAAF,CAASnD,KAAtB;EACA,oBAAIN,QAAJ,EAAc;EACVA,6BAASH,CAAT;EACH;EACD,oBAAIoD,KAAK9D,cAAT,EAAyB;EACrB8D,yBAAKI,kBAAL,CAAwBxD,CAAxB;EACH;EACJ,aARD;EASAuD,oBAAQhF,WAAR,CAAoBkF,KAApB;EACAF,oBAAQhF,WAAR,CAAoBwG,MAApB;EACA1B,iBAAKT,QAAL,GAAgB,YAAW;EACvB,uBAAOS,KAAKxD,OAAL,GAAemF,KAAf,CAAqB,CAArB,CAAP;EACH,aAFD;EAGA3B,iBAAKR,QAAL,GAAgB,UAASsB,CAAT,EAAY;EACxBd,qBAAK5C,KAAL,GAAa0D,CAAb;EACAd,qBAAKxD,OAAL,GAAemF,KAAf,CAAqB,CAArB,IAA0Bb,CAA1B;EACH,aAHD;EAIA/C,iBAAK7C,WAAL,CAAiBgF,OAAjB;EACA,iBAAKlE,SAAL,CAAeT,IAAf,IAAuByE,IAAvB;EACA,mBAAO,KAAKhE,SAAL,CAAeT,IAAf,IAAuByE,IAA9B;EACH;;;gCASKlD,UAAU;EACZ,iBAAKb,cAAL,GAAsBa,QAAtB;EACH;;;qCAwCU8E,QAAQ;EAAA;EACf,gBAAI,CAACA,MAAL,EAAa;EACT,sBAAM,IAAI/B,KAAJ,CAAU,6BAAV,CAAN;EACH;EACD,gBAAI,OAAO+B,MAAP,KAAkB,QAAlB,IAA8B,CAACP,MAAMQ,OAAN,CAAcD,MAAd,CAAnC,EAA0D;EACtD,oBAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;EAC5BA,6BAASE,KAAKC,KAAL,CAAWH,MAAX,CAAT;EACH;EACD,qBAAK,IAAInF,GAAT,IAAgBmF,MAAhB,EAAwB;EACpB,wBAAIhF,SAASgF,OAAOnF,GAAP,CAAb;EACA,yBAAKuF,oBAAL,CAA0BpF,MAA1B;EACH;EACJ;EACD,gBAAIyE,MAAMQ,OAAN,CAAcD,MAAd,MAA0B,IAA9B,EAAoC;EAChCA,uBAAOL,OAAP,CAAe;EAAA,2BAAS,OAAKS,oBAAL,CAA0BC,KAA1B,CAAT;EAAA,iBAAf;EACH;EACJ;;;;;;;;;;;"}