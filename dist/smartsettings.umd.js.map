{"version":3,"file":"smartsettings.umd.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/index.js"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import style from './index.css'\n\n/**\n * @class SmartSettings\n * @classdesc SmartSettings module, returns new SmartSettings instance\n * @param {string} name - name of the SmartSettings panel\n * @param {number} left - position of the SmartSettings panel on X axis\n * @param {number} top - position of the SmartSettings panel on Y axis\n * @example\n * const mySettings = new SmartSettings('My Settings', 10, 10)\n*/\nclass SmartSettings {\n    constructor(name = 'SmartSettings', left = 0, top = 0) {\n        this.name = name\n        this.initialLeft = left\n        this.initialTop = top\n\n        /**\n         * @property {boolean} _hidden\n         * @private\n         */\n        this._hidden = false\n\n        /**\n         * @property {boolean} _open\n         * @private\n         */\n        this._open = true\n\n        /**\n         * @property {boolean} _draggable\n         * @private\n         */\n        this._draggable = false\n\n        /**\n         * @property {Node} _panel\n         * @private\n         */\n        this._panel = null\n\n        /**\n         * @property {object} _controls\n         * @private\n         */\n        this._controls = {}\n\n        /**\n         * @property {string} _localString\n         * It lets creating unique identifier for the panels\n         * @private\n         */\n        this._localString = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\n\n        /**\n         * @property {?function} _globalWatcher\n         * @private\n         */\n        this._globalWatcher = null\n\n        this._createUniqueId()\n        this._create(this.name, this.initialTop, this.initialLeft)\n\n        /**\n         * @property {?Node} _panelBody - body div\n         * @private\n         */\n        this._body = this._panel ? this._panel.childNodes[1] : null\n    }\n\n    /* Utility methods */\n\n    /**\n     * Inits function that creates unique element identifier\n     * @returns {string}\n     * @private\n     */\n    _createUniqueId() {\n        let counter = 0\n        this.uniqueID = () => `${this._localString}-${counter++}`\n    }\n     \n    /**\n     * Creates any DOM element\n     * @param {string} type - type of the DOM element\n     * @param {Object} attributes - object with all attributes for the DOM element\n     * @returns {Node}\n     * @private \n     */\n    _createElement(type, attributes) {\n        let element = document.createElement(type)\n        if (attributes) {\n            for (let key in attributes) {\n                if (key === 'class') {\n                    element.setAttribute('class', attributes[key])\n                } else {\n                    element[key] = attributes[key]\n                }\n            }\n        }\n        return element\n    }\n\n    /**\n     * Creates label element\n     * @param {string} name - name in the label\n     * @returns {Node}\n     * @private\n     */\n    _createLabel(name) {\n        return this._createElement('label', {\n            class: 'sms-label',\n            innerText: name,\n            value: name\n        })\n    }\n    /**\n     * Calls the global watcher\n     * @param {EventListenerObject} event - an event\n     * @returns {void}\n     * @private\n     */\n    _callGlobalWatcher(e) {\n        if (this._globalWatcher) {\n            this._globalWatcher(e)\n        }\n    }\n\n    /**\n     * Assigns config entry to the specific control creation method\n     * @param {object} entry - entry of the config object|array\n     * @private\n     */\n    _assignEntryToMethod(_entry) {\n        let _isCallback = _entry.callback ? _entry.callback : null\n        switch (_entry.type) {\n        case 'button':\n            this.button(_entry.name, _isCallback)\n            break\n        case 'range':\n            this.range(_entry.name, _entry.items, _isCallback)\n            break\n        case 'select':\n            this.select(_entry.name, _entry.items, _isCallback)\n            break\n        case 'text':\n            this.text(_entry.name, _entry.value, _isCallback)\n            break\n        case 'textarea':\n            this.textarea(_entry.name, _entry.value, _isCallback)\n            break\n        case 'checkbox':\n            this.checkbox(_entry.name, _entry.value, _isCallback)\n            break\n        case 'number':\n            this.number(_entry.name, _entry.items, _isCallback)\n            break\n        case 'color':\n            this.color(_entry.name, _entry.value, _isCallback)\n            break\n        case 'file':\n            this.file(_entry.name, _isCallback)\n        }\n    }\n\n    /**\n     * Dispatches an event after setting new items or new value to the control\n     * @param {Node} element - DOM element dispatcher\n     * @param {string} type - type of the control\n     * @returns {void}\n     * @private\n     */\n    _dispatchEvent(element, type) {\n        let _eventType\n        if (type === 'button') {\n            _eventType = 'click'\n        }\n        if (\n            type === 'text' || \n            type === 'textarea' || \n            type === 'range' ||\n            type === 'color' ||\n            type === 'number'\n        ) {\n            _eventType = 'input'\n        }\n        if (\n            type === 'checkbox' ||\n            type === 'select' ||\n            type === 'file'\n        ) {\n            _eventType = 'change'\n        }\n        element.dispatchEvent(new Event(_eventType))\n    }\n\n    /* Helper methods */\n\n    /**\n     * Creates settings panel, invoked on class construction\n     * @returns {void}\n     * @private\n     */\n    _create() {\n        let self = this\n        let panelAttributes = {\n            class: 'sms-panel',\n            id: this.uniqueID(),\n            style: `top: ${this.initialTop}px; left: ${this.initialLeft}px; z-index: 2`\n        }\n        let panel = this._createElement('div', panelAttributes)\n        let header = this._createElement('div', { class: 'sms-panel-header' })\n        let body = this._createElement('div', { class: 'sms-panel-body' })\n        let paragraph = this._createElement('p', { class: 'sms-panel-header-name' })\n        header.addEventListener('click', e => this.toggle())\n        paragraph.innerText = this.name\n        header.appendChild(paragraph)\n        panel.appendChild(header)\n        panel.appendChild(body)\n        this._panel = panel\n        document.body.appendChild(this._panel)\n    }\n\n    /**\n     * Creates basic properties for the new control\n     * @returns {object}\n     * @private\n     */\n    _createControlBasics() {\n        let id = this.uniqueID()\n        let basics = {\n            id: id,\n            disabled: false,\n            hidden: false,\n            value: null,\n            name: null,\n            type: null,\n            callback: null,\n            element: function() {\n                return document.getElementById(this.id)\n            },\n            enable: function() {\n                this.element().removeAttribute('disabled')\n                this.disabled = false\n            },\n            disable: function() {\n                this.element().setAttribute('disabled', true)\n                this.disabled = true\n            },\n            show: function() {\n                if (this.element().parentNode.classList[1] === 'hide') {\n                    this.element().parentNode.classList.remove('hide')\n                    this.hidden = false\n                }\n            },\n            hide: function() {\n                if (this.element().parentNode.classList[1] !== 'hide') {\n                    this.element().parentNode.classList.add('hide')\n                    this.hidden = true\n                }\n            }\n        }\n        return basics\n    }\n\n    /**\n     * Returns select option\n     * @param {(string|number)} item - option value\n     * @param {boolean} [selected] - is option selected\n     * @returns {Node}\n     * @private\n     */\n    _createSelectOption(item, selected) {\n        let option = this._createElement('option', {\n            class: 'sms-select-option',\n            value: item,\n            innerText: item,\n            selected: selected ? selected : false\n        })\n        return option\n    }\n\n    /* Basic methods */\n\n    /**\n     * Removes settings panel from the DOM and removes all sections and controls\n     * @returns {void}\n     * @example\n     * mySettings.destroy()\n     */\n    destroy() {\n        if (this._panel && this._panel.parentElement) {\n            this._panel.parentElement.removeChild(this._panel)\n        }\n        this._panel = null\n        this._controls = {}\n    }\n\n    /**\n     * Shows settings panel or specific control (if the name is provided)\n     * @param {string} [name] - name of control to be shown\n     * @returns {void}\n     * @example\n     * mySettings.show()\n     */\n    show(name) {\n        if (name) {\n            this._controls[name].show()\n        } else {\n            this._panel.classList.remove('hide')\n            this._hidden = false\n        }\n    }\n\n    /**\n     * Hides settings panel or specific control (if the name is provided)\n     * @param {string} [name] - name of control to be hidden\n     * @returns {void}\n     * @example\n     * mySettings.hide()\n     */\n    hide(name) {\n        if (name) {\n            this._controls[name].hide()\n        } else {\n            this._panel.classList.add('hide')\n            this._hidden = true\n        }\n    }\n\n    /**\n     * Enables specific control\n     * @param {string} name\n     * @returns {void}\n     * @example\n     * mySettings.enable('Checkbox control')\n     */\n    enable(name) {\n        if (name && this._controls[name]) {\n            return this._controls[name].enable()\n        }\n    }\n\n    /**\n     * Disables specific control\n     * @param {string} name\n     * @returns {void}\n     * @example\n     * mySettings.enable('Checkbox control')\n     */\n    disable(name) {\n        if (name && this._controls[name]) {\n            return this._controls[name].disable()\n        }\n    }\n\n    /**\n     * Open settings panel\n     * @example\n     * mySettings.open()\n     */\n    open() {\n        if (this._body.classList[1] === 'hide') {\n            this._body.classList.remove('hide')\n        } \n        this._open = true\n    }\n\n    /**\n     * Close settings panel\n     * @example\n     * mySettings.close()\n     * \n     */\n    close() {\n        this._body.classList.add('hide')\n        this._open = false\n    }\n\n    /**\n     * Open or close settings panel depending on `_open` property\n     * @returns {void}\n     * @example\n     * mySettings.toggle()\n     */\n    toggle() {\n        this._body.classList[1] === 'hide' ?\n            this._body.classList.remove('hide') :\n            this._body.classList.add('hide')\n        this._open = !this._open\n    }\n\n    /**\n     * Returns panel position [left, top]\n     * @return {array<string>}\n     * @example\n     * let position = mySettings.getPosition() // [0, 0]\n     */\n    getPosition() {\n        return [\n            this._panel.style.left,\n            this._panel.style.top\n        ]\n    }\n\n    /**\n     * Sets panel position\n     * @param {number} left - new position on the X axis\n     * @param {number} top - new position on the Y axis\n     * @example\n     * mySettings.setPosition(400, 400)\n     */\n    setPosition(left, top) {\n        this._panel.style.left = `${left}px`\n        this._panel.style.top = `${top}px`\n    }\n\n    /**\n     * Removes specific control\n     * @param {string} name - name of the control to be deleted\n     * @returns {void}\n     * @example\n     * mySettings.remove('Control name')\n     */\n    remove(name) {\n        if (name) {\n            let elem = this._controls[name].element()\n            elem.parentElement.remove()\n            elem.remove()\n            delete this._controls[name]\n        }\n    }\n\n    /**\n     * Removes all controls from the panel\n     * @param {boolean} [removeName] - set to true if you want to clean the panel's name. Default set to false\n     * @returns {void}\n     * @example\n     * mySettings.removeAll()\n     */\n    removeAll(removeName = false) {\n        for (let key in this._controls) {\n            delete this._controls[key]\n        }\n    }\n\n    /**\n     * Get value of specific control\n     * @param {string} name - name of the control\n     * @returns {(number|string|boolean)}\n     * @example\n     * let value = mySettings.getValue('Control name')\n     */\n    getValue(name) {\n        if (name && this._controls[name] && this._controls[name].getValue) {\n            return this._controls[name].getValue()\n        }\n    }\n\n    /**\n     * Sets new active value of the specific control. (Changing button control value does not change its' id property)\n     * @param {string} name - name of the control\n     * @param {(number|string|boolean)} name - new value\n     * @param {boolean} [syntheticEvent] - specify, if method should dispatch syntethic event after items update. Default value is false\n     * @returns {void}\n     * @example\n     * mySettings.setValue('Control name', 'value')\n     */\n    setValue(name, value, syntheticEvent = false) {\n        let _control = this._controls[name]\n        if (name && _control && _control.setValue) {\n            return _control.setValue(value, syntheticEvent)\n        }\n    }\n\n    /**\n     * Get all active values\n     * @returns {object} - an object with values from all currently set controls\n     * @example\n     * let values = mySettings.getActiveValues()\n     */\n    getActiveValues() {\n        let values = {}\n        for (let i in this._controls) {\n            if (this._controls[i].getValue) {\n                values[i] = this._controls[i].getValue()\n            }\n        }\n        return values\n    }\n\n    /**\n     * Get selected index of the select control\n     * @param {string} name - name of the control\n     * @returns {number}\n     * @example\n     * let currentIndex = mySettings.getIndex('Select control')\n     */\n    getIndex(name) {\n        if (name && this._controls[name].getIndex) {\n            return this._controls[name].getIndex()\n        }\n    }\n\n    /**\n     * Set selected index of the select control\n     * @param {string} name - name of the control\n     * @param {number} index - new active index\n     * @param {boolean} [syntheticEvent] - specify, if method should dispatch syntethic event after items update. Default value is false\n     * @returns {void}\n     * @example\n     * mySettings.setIndex('Select', 4)\n     */\n    setIndex(name, index, syntheticEvent = false) {\n        if (name && this._controls[name].setIndex) {\n            return this._controls[name].setIndex(index, syntheticEvent)\n        }\n    }\n\n    /**\n     * Get select/range items\n     * @param {string} name - name of the control\n     * @returns {array}\n     * @example\n     * let selectValues = mySettings.\n     */\n    getItems(name) {\n        let typeCondition = (\n            this._controls[name].type === 'range' || \n            this._controls[name].type === 'select' || \n            this._controls[name].type === 'progressbar'\n        )\n        if (this._controls[name] && typeCondition) {\n            return this._controls[name].getItems()\n        } else {\n            throw new Error('Chosen control is not a range or select type')\n        }\n    }\n\n    /**\n     * Set (update) select/range items\n     * @param {string} name - name of the control\n     * @param {array} items - array of new items\n     * @param {boolean} [syntheticEvent] - specify, if method should dispatch syntethic event after items update. Default value is false\n     * @returns {void}\n     * @example\n     * mySettings.setItems('Select', [1, 2, 3, 4])\n     */\n    setItems(name, items, syntheticEvent = false) {\n        let typeCondition = (\n            this._controls[name].type === 'range' ||\n            this._controls[name].type === 'select' ||\n            this._controls[name].type === 'progressbar'\n        )\n        if (this._controls[name] && typeCondition) {\n            return this._controls[name].setItems(items, syntheticEvent)\n        } else {\n            throw new Error('Chosen control is not a range or select type')\n        }\n    }\n\n    /**\n     * Creates button control\n     * @param {string} name - name of the control \n     * @param {function} callback - function executed on each change\n     * @returns {object} button control object\n     * @example\n     * let button = mySettings.button('Button Name', () => console.log('This is the button'))\n     */\n    button(name, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', {\n            class: 'sms-control'\n        })\n        let button = this._createElement('button', {\n            class: 'sms-button',\n            id: base.id,\n            innerText: name,\n            value: name\n        })\n        base.type = 'button'\n        base.name = name\n        base.callback = callback || null\n        button.addEventListener('click', e => {\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        wrapper.appendChild(button)\n        this._body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates text input control\n     * @param {string} name - name of the control\n     * @param {string} value - value of the control\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let textInput = mySettings.text('Text input', 'Hello world')\n     */\n    text(name, value, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let input = this._createElement('input', {\n            class: 'sms-text',\n            id: base.id,\n            type: 'text',\n            innerText: value,\n            placeholder: value,\n            value: value\n        })\n        base.name = name\n        base.value = value\n        base.type = 'text'\n        base.callback = callback || null\n        wrapper.appendChild(label)\n        wrapper.appendChild(input)\n        input.addEventListener('input', e => {\n            base.value = e.target.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        this._body.appendChild(wrapper)\n        base.getValue = function() {\n            return this.element().value\n        }\n        base.setValue = function (value, syntheticEvent) {\n            base.value = value\n            base.element().innerText = value\n            base.element().value = value\n            if (syntheticEvent === true)\n                self._dispatchEvent(base.element(), base.type)\n        }\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates textarea control\n     * @param {string} name - name of the control\n     * @param {string} value - value of the control\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let textarea = mySettings.textarea('Text input', 'Hello world')\n     */\n    textarea(name, value, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let textarea = this._createElement('textarea', {\n            class: 'sms-textarea',\n            id: base.id,\n            innerText: value,\n            value: value,\n            placeholder: value\n        })\n        base.name = name\n        base.value = value\n        base.type = 'textarea'\n        base.callback = callback || null\n        wrapper.appendChild(label)\n        wrapper.appendChild(textarea)\n        textarea.addEventListener('input', e => {\n            base.value = e.target.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        base.getValue = function () {\n            return this.element().value\n        }\n        base.setValue = function (value, syntheticEvent) {\n            base.value = value\n            base.element().innerText = value\n            base.element().value = value\n            if (syntheticEvent === true)\n                self._dispatchEvent(base.element(), base.type)\n        }\n        this._body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates range control\n     * @param {string} name - name of the control\n     * @param {array} items - array with min, max, default and step values\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let range = mySettings.range('Range', [1, 100, 40, 1], e => console.log(e.target.value))\n     */\n    range(name, items, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let span = this._createElement('span', { class: 'sms-label-span' })\n        let input = this._createElement('input', {\n            class: 'sms-range',\n            id: base.id,\n            type: 'range',\n            min: items[0],\n            max: items[1],\n            value: items[2],\n            step: items[3]\n        })\n        base.type = 'range'\n        base.name = name\n        base.value = items[2]\n        base.callback = callback || null\n        input.addEventListener('input', e => {\n            base.value = parseFloat(e.target.value)\n            span.innerText = base.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        span.innerText = base.value\n        label.appendChild(span)\n        wrapper.appendChild(label)\n        wrapper.appendChild(input)\n        this._body.appendChild(wrapper)\n        base.getValue = function() {\n            return parseFloat(base.element().value)\n        }\n        base.setValue = function(v, syntheticEvent) {\n            base.value = v\n            base.element().value = v\n            span.innerText = v\n            if (syntheticEvent === true)\n                self._dispatchEvent(base.element(), base.type)\n        }\n        base.getItems = function() {\n            let e = base.element()\n            return [\n                parseFloat(e.min),\n                parseFloat(e.max),\n                parseFloat(e.value),\n                parseFloat(e.step),\n            ]\n        }\n        base.setItems = function(items, syntheticEvent) {\n            let e = base.element()\n            e.min = items[0]\n            e.max = items[1]\n            e.value = items[2]\n            e.step = items[3]\n            base.value = parseFloat(e.value)\n            span.innerText = parseFloat(e.value)\n            if (syntheticEvent === true)\n                self._dispatchEvent(base.element(), base.type)\n        }\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates checkbox control\n     * @param {string} name - name of the control\n     * @param {boolean} value - value of the control\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let checkbox = mySettings.checkbox('Check this out!', true, e => {\n     *      console.log(e.target.value)\n     * })\n     */\n    checkbox(name, value, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let checkbox = this._createElement('input', {\n            class: 'sms-checkbox',\n            id: base.id,\n            type: 'checkbox'\n        })\n        base.name = name\n        base.type = 'checkbox'\n        base.value = value\n        base.callback = callback || null\n        if (value === true) {\n            checkbox.setAttribute('checked', true)\n        }\n        checkbox.addEventListener('change', e => {\n            base.value = e.target.checked\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        wrapper.appendChild(label)\n        wrapper.appendChild(checkbox)\n        base.getValue = function() {\n            return base.element().checked\n        }\n        base.setValue = function(v, syntheticEvent) {\n            base.element().checked = v\n            base.value = v\n            if (syntheticEvent === true)\n                self._dispatchEvent(base.element(), base.type)\n        }\n        this._body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates color control\n     * @param {string} name - name of the control\n     * @param {string} value -hexadecimal string value of initial color\n     * @param {function} [callback] - function executed afer each change\n     * @returns {object}\n     * @example\n     * let color = mySettings.color('Color control', '#fcfcfc', e => someCallbackFunction())\n     */\n    color(name, value, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let span = this._createElement('span', { class: 'sms-label-span' })\n        let input = this._createElement('input', {\n            class: 'sms-color',\n            id: base.id,\n            type: 'color'\n        })\n        base.name = name\n        base.type = 'color'\n        base.value = value\n        base.callback = callback || null\n        input.setAttribute('value', value)\n        input.addEventListener('input', e => {\n            base.value = e.target.value\n            span.innerText = e.target.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        span.innerText = value\n        label.appendChild(span)\n        wrapper.appendChild(label)\n        wrapper.appendChild(input)\n        base.getValue = function() {\n            return base.element().value\n        }\n        base.setValue = function(v, syntheticEvent) {\n            base.element().value = v\n            base.value = v\n            span.innerText = v\n            if (syntheticEvent === true)\n                self._dispatchEvent(base.element(), base.type)\n        }\n        this._body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates select control\n     * @param {string} name - name of the control\n     * @param {array} items - array with option values\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let select = mySettings.select('Select', ['Option 1', 'Option 2', 'Option 3'])\n     */\n    select(name, items, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let select = this._createElement('select', {\n            class: 'sms-select',\n            id: base.id,\n            name: name,\n            value: items[0]\n        })\n        wrapper.appendChild(label)\n        items.map(item => {\n            let option = self._createSelectOption(item)\n            select.options.add(option)\n        })\n        select.addEventListener('change', e => {\n            base.value = e.target.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        wrapper.appendChild(select)\n        base.value = items[0]\n        base.name = name\n        base.type = 'select'\n        base.callback = callback || null\n        base.getValue = function() {\n            let _select = base.element()\n            return _select.options[_select.selectedIndex].value\n        }\n        base.setValue = function(v, syntheticEvent) {\n            base.value = v\n            let _select = base.element()\n            select.options[select.selectedIndex] = self._createSelectOption(v)\n            _select.value = v\n            if (syntheticEvent === true)\n                self._dispatchEvent(base.element(), base.type)\n        }\n        base.getItems = function() {\n            return Array\n                .from(base.element().options)\n                .map(option => option.value)\n        }\n        base.setItems = function(items, syntheticEvent) {\n            const _current = {\n                selected: base.element().selectedIndex,\n                length: base.getItems().length\n            }\n            const _new = {\n                selected: -1,\n                length: items.length\n            }\n\n            if (_new.length > _current.length) {\n                if (_current.selected === -1 || _current.selected === '') {\n                    _new.selected = 0\n                }\n                if (_current.selected > -1) {\n                    _new.selected = _new.length - 1\n                }\n            }\n            if (_new.length < _current.length) {\n                if (_current.selected > - 1 && _current.selected < _new.length) {\n                    _new.selected = _current.selected\n                }\n                if (_current.selected > _new.length - 1) {\n                    _new.selected = _new.length - 1\n                }\n            }\n\n            for (let i = 0; i < base.element().options.length; i++) {\n                base.element().options[i].remove()\n            }\n            items.forEach(item => {\n                let _index = items.indexOf(item)\n                base.element().options[_index] = self._createSelectOption(\n                    item,\n                    _index = _new.selected ? true : false\n                )\n            })\n            base.value = items[_new.selected]\n            if (syntheticEvent === true)\n                self._dispatchEvent(base.element(), base.type)\n        }\n        base.getIndex = function() {\n            return parseInt(base.element().selectedIndex)\n        }\n        base.setIndex = function(value, syntheticEvent) {\n            base.element().selectedIndex = value\n            base.value = base.element().options[value].value\n            if (syntheticEvent === true) {\n                self.dispatchEvent(base.element(), base.type)\n            }\n        }\n        this._body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates number control\n     * @param {string} name - name of the control\n     * @param {array} items - array with initial and step value\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let number = mySettings.number('Number', [10, 1], e => {})\n     */\n    number(name, items, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let input = this._createElement('input', {\n            class: 'sms-number',\n            id: base.id,\n            type: 'number',\n            value: items[0],\n            step: items[1]\n        })\n        input.addEventListener('input', e => {\n            base.value = parseFloat(e.target.value)\n            if (callback) {\n                callback(parseFloat(e))\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        base.type = 'number'\n        base.name = name\n        base.value = items[0]\n        base.callback = callback || null\n        base.getValue = function() {\n            return parseFloat(base.element().value)\n        }\n        base.setValue = function(v, syntheticEvent) {\n            base.element().value = v\n            base.value = v\n            if (syntheticEvent === true)\n                self._dispatchEvent(base.element(), base.type)\n        }\n        wrapper.appendChild(label)\n        wrapper.appendChild(input)\n        this._body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name] = base\n    }\n\n    /**\n     * Creates file input control\n     * @param {string} name - name of the control\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let fileControl = mySettings.file('File control', someCallbackFunction)\n     */\n    file(name, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let upload = this._createElement('input', {\n            class: 'sms-file',\n            id: base.id,\n            type: 'file'\n        })\n        base.name = name\n        base.type = 'file'\n        base.callback = callback || null\n        upload.addEventListener('change', e => {\n            base.value = e.target.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        wrapper.appendChild(label)\n        wrapper.appendChild(upload)\n        base.getValue = function() {\n            return base.element().files[0]\n        }\n        base.setValue = function(v, syntheticEvent) {\n            base.value = v\n            base.element().files[0] = v\n            if (syntheticEvent === true)\n                self._dispatchEvent(base.element(), base.type)\n        }\n        this._body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name] = base\n    }\n\n    /**\n     * Watch panel for changes and fire callback on each change\n     * @param {function} callback - function executed on each change in the panel\n     * @returns {void}\n     * @example\n     * mySettings.watch(callback)\n     */\n    watch(callback) {\n        this._globalWatcher = callback\n    }\n\n    /**\n     * Load controls from the configuration object.\n     * @param {(object|string|array)} config - configuration object or JSON string or configuration array of objects\n     * @returns {void}\n     * @example\n     * const mySettings = new SmartSettings('Name', 10, 10)\n     * mySettings.loadConfig({\n     *      control1: {\n     *          type: 'color',\n     *          name: 'Color',\n     *          value: '#fd3ef4',\n     *          callback: someCallbackFunction\n     *      },\n     *      // etc.\n     * })\n     * \n     * // or\n     * mySettings.loadConfig('{\n     *      \"control1\": {\n     *          \"type\": \"color\",\n     *          \"name\": \"Color\",\n     *          \"value\": \"#fd3ef4\",\n     *          \"callback\": \"someCallbackFunction\"\n     *      },\n     *      // etc.\n     * }')\n     * \n     * // or\n     * mySettings.loadConfig([{\n     *      {\n     *          type: 'color',\n     *          name: 'Color',\n     *          value: '#fd3ef4',\n     *          callback: someCallbackFunction\n     *      },\n     *      // etc.\n     * ])\n     */\n    loadConfig(config) {\n        if (!config) {\n            throw new Error('There is no config provided')\n        }\n        if (typeof config === 'string' || !Array.isArray(config)) {\n            if (typeof config === 'string') {\n                config = JSON.parse(config)\n            }\n            for (let key in config) {\n                let _entry = config[key]\n                this._assignEntryToMethod(_entry)\n            }\n        }\n        if (Array.isArray(config) === true) {\n            config.forEach(entry => this._assignEntryToMethod(entry))\n        }\n    }\n\n    /**\n     * Returns current configuration\n     * @param {string} [output] - unless there is an output parameter specified, this method returns an object. But you can set an output to be an 'array' or JSON 'string'\n     * @returns {(object|array|string)}\n     * @example\n     * let currentConfig = mySettings.getConfig('array')\n     * // returns array of control objects\n     */\n    getConfig(output = 'object') {\n        let _valueOrItems\n        let _obj = {}\n        let decide = ctrl => {\n            if (\n                ctrl.type === 'select' ||\n                ctrl.type === 'range' ||\n                ctrl.type === 'number'\n            ) {\n                return {\n                    items: ctrl.getItems()\n                }\n            } else {\n                return {\n                    value: ctrl.getValue()\n                }\n            }\n        }\n        for (let key in this._controls) {\n            let _control = this._controls[key]\n            if (_control.type === 'button') {\n                _obj[key] = {\n                    type: _control.type,\n                    name: _control.name\n                }\n                if (_control.callback !== null) {\n                    _obj[key].callback = _control.callback\n                }\n            } else {\n                let itemsOrValue = decide(_control)\n                _obj[key] = Object.assign({\n                    type: _control.type,\n                    name: _control.name\n                }, itemsOrValue)\n                if (_control.callback !== null) {\n                    _obj[key].callback = _control.callback\n                }\n            }\n        }\n        if (!output || output === 'object') {\n            return _obj\n        }\n        if (output === 'array') {\n            return Object.values(_obj)\n        }\n        if (output === 'string') {\n            return JSON.stringify(_obj, null, 4)\n        }\n    }\n}\n\nexport default SmartSettings"],"names":["css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","name","left","top","initialLeft","initialTop","_hidden","_open","_draggable","_panel","_controls","_localString","Math","random","toString","substring","_globalWatcher","_createUniqueId","_create","this","_body","childNodes","counter","uniqueID","_this","attributes","element","key","setAttribute","_createElement","e","_entry","_isCallback","callback","button","range","items","select","text","value","textarea","checkbox","number","color","file","_eventType","dispatchEvent","Event","panelAttributes","panel","header","class","body","paragraph","addEventListener","_this2","toggle","innerText","getElementById","id","removeAttribute","disabled","parentNode","classList","remove","hidden","add","item","selected","parentElement","removeChild","show","hide","enable","disable","elem","getValue","syntheticEvent","_control","setValue","values","i","getIndex","index","setIndex","typeCondition","getItems","Error","setItems","self","base","_createControlBasics","wrapper","_callGlobalWatcher","label","_createLabel","input","target","_dispatchEvent","span","parseFloat","v","min","max","step","checked","map","option","_createSelectOption","options","_select","selectedIndex","Array","from","_current","length","_new","forEach","_index","indexOf","parseInt","upload","files","config","isArray","JSON","parse","_assignEntryToMethod","_this3","entry","output","_obj","itemsOrValue","ctrl","Object","assign","stringify"],"mappings":"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"}