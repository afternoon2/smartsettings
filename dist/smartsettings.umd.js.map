{"version":3,"file":"smartsettings.umd.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/index.js"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import style from './index.css'\n\n/**\n * @class SmartSettings\n * @classdesc SmartSettings module, returns new SmartSettings instance\n * @param {string} name - name of the SmartSettings panel\n * @param {number} left - position of the SmartSettings panel on X axis\n * @param {number} top - position of the SmartSettings panel on Y axis\n * @example\n * const mySettings = new SmartSettings('My Settings', 10, 10)\n*/\nclass SmartSettings {\n    constructor(name = 'SmartSettings', left = 0, top = 0) {\n        this.name = name\n        this.initialLeft = left\n        this.initialTop = top\n\n        /**\n         * @property {boolean} _hidden\n         * @private\n         */\n        this._hidden = false\n\n        /**\n         * @property {boolean} _open\n         * @private\n         */\n        this._open = true\n\n        /**\n         * @property {boolean} _draggable\n         * @private\n         */\n        this._draggable = false\n\n        /**\n         * @property {Node} _panel\n         * @private\n         */\n        this._panel = null\n\n        /**\n         * @property {object} _controls\n         * @private\n         */\n        this._controls = {}\n\n        /**\n         * @property {string} _localString\n         * It lets creating unique identifier for the panels\n         * @private\n         */\n        this._localString = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\n\n        /**\n         * @property {?function} _globalWatcher\n         * @private\n         */\n        this._globalWatcher = null\n\n        this._createUniqueId()\n        this._create(this.name, this.initialTop, this.initialLeft)\n\n        /**\n         * @property {?Node} _panelBody - body div\n         * @private\n         */\n        this._body = this._panel ? this._panel.childNodes[1] : null\n    }\n\n    /* Utility methods */\n\n    /**\n     * Inits function that creates unique element identifier\n     * @returns {string}\n     * @private\n     */\n    _createUniqueId() {\n        let counter = 0\n        this.uniqueID = () => `${this._localString}-${counter++}`\n    }\n     \n    /**\n     * Creates any DOM element\n     * @param {string} type - type of the DOM element\n     * @param {Object} attributes - object with all attributes for the DOM element\n     * @returns {Node}\n     * @private \n     */\n    _createElement(type, attributes) {\n        let element = document.createElement(type)\n        if (attributes) {\n            for (let key in attributes) {\n                if (key === 'class') {\n                    element.setAttribute('class', attributes[key])\n                } else {\n                    element[key] = attributes[key]\n                }\n            }\n        }\n        return element\n    }\n\n    /**\n     * Creates label element\n     * @param {string} name - name in the label\n     * @returns {Node}\n     * @private\n     */\n    _createLabel(name) {\n        return this._createElement('label', {\n            class: 'sms-label',\n            innerText: name,\n            value: name\n        })\n    }\n    /**\n     * Calls the global watcher\n     * @param {EventListenerObject} event - an event\n     * @returns {void}\n     * @private\n     */\n    _callGlobalWatcher(e) {\n        if (this._globalWatcher) {\n            this._globalWatcher(e)\n        }\n    }\n\n    /**\n     * Assigns config entry to the specific control creation method\n     * @param {object} entry - entry of the config object|array\n     * @private\n     */\n    _assignEntryToMethod(_entry) {\n        let _isCallback = _entry.callback ? _entry.callback : null\n        switch (_entry.type) {\n        case 'button':\n            this.button(_entry.name, _isCallback)\n            break\n        case 'range':\n            this.range(_entry.name, _entry.items, _isCallback)\n            break\n        case 'select':\n            this.select(_entry.name, _entry.items, _isCallback)\n            break\n        case 'text':\n            this.text(_entry.name, _entry.value, _isCallback)\n            break\n        case 'textarea':\n            this.textarea(_entry.name, _entry.value, _isCallback)\n            break\n        case 'checkbox':\n            this.checkbox(_entry.name, _entry.value, _isCallback)\n            break\n        case 'number':\n            this.number(_entry.name, _entry.items, _isCallback)\n            break\n        case 'color':\n            this.color(_entry.name, _entry.value, _isCallback)\n            break\n        case 'file':\n            this.file(_entry.name, _isCallback)\n        }\n    }\n\n    /**\n     * Dispatches an event after setting new items or new value to the control\n     * @param {Node} element - DOM element dispatcher\n     * @param {string} type - type of the control\n     * @returns {void}\n     * @private\n     */\n    _dispatchEvent(element, type) {\n        let _eventType\n        if (type === 'button') {\n            _eventType = 'click'\n        }\n        if (\n            type === 'text' || \n            type === 'textarea' || \n            type === 'range' ||\n            type === 'color' ||\n            type === 'number'\n        ) {\n            _eventType = 'input'\n        }\n        if (\n            type === 'checkbox' ||\n            type === 'select' ||\n            type === 'file'\n        ) {\n            _eventType = 'change'\n        }\n        element.dispatchEvent(new Event(_eventType))\n    }\n\n    /* Helper methods */\n\n    /**\n     * Creates settings panel, invoked on class construction\n     * @returns {void}\n     * @private\n     */\n    _create() {\n        let self = this\n        let panelAttributes = {\n            class: 'sms-panel',\n            id: this.uniqueID(),\n            style: `top: ${this.initialTop}px; left: ${this.initialLeft}px; z-index: 2`\n        }\n        let panel = this._createElement('div', panelAttributes)\n        let header = this._createElement('div', { class: 'sms-panel-header' })\n        let body = this._createElement('div', { class: 'sms-panel-body' })\n        let paragraph = this._createElement('p', { class: 'sms-panel-header-name' })\n        header.addEventListener('click', e => this.toggle())\n        paragraph.innerText = this.name\n        header.appendChild(paragraph)\n        panel.appendChild(header)\n        panel.appendChild(body)\n        this._panel = panel\n        document.body.appendChild(this._panel)\n    }\n\n    /**\n     * Creates basic properties for the new control\n     * @returns {object}\n     * @private\n     */\n    _createControlBasics() {\n        let id = this.uniqueID()\n        let basics = {\n            id: id,\n            disabled: false,\n            hidden: false,\n            value: null,\n            name: null,\n            type: null,\n            callback: null,\n            element: function() {\n                return document.getElementById(this.id)\n            },\n            enable: function() {\n                this.element().removeAttribute('disabled')\n                this.disabled = false\n            },\n            disable: function() {\n                this.element().setAttribute('disabled', true)\n                this.disabled = true\n            },\n            show: function() {\n                if (this.element().classList[1] === 'hide') {\n                    this.element().classList.remove('hide')\n                    this.hidden = false\n                }\n            },\n            hide: function() {\n                if (this.element().classList[1] !== 'hide') {\n                    this.element().classList.add('hide')\n                    this.hidden = true\n                }\n            }\n        }\n        return basics\n    }\n\n    /**\n     * Returns select option\n     * @param {(string|number)} item - option value\n     * @param {boolean} [selected] - is option selected\n     * @returns {Node}\n     * @private\n     */\n    _createSelectOption(item, selected) {\n        let option = this._createElement('option', {\n            class: 'sms-select-option',\n            value: item,\n            innerText: item,\n            selected: selected ? selected : false\n        })\n        return option\n    }\n\n    /* Basic methods */\n\n    /**\n     * Removes settings panel from the DOM and removes all sections and controls\n     * @returns {void}\n     * @example\n     * mySettings.destroy()\n     */\n    destroy() {\n        if (this._panel && this._panel.parentElement) {\n            this._panel.parentElement.removeChild(this._panel)\n        }\n        this._panel = null\n        this._controls = {}\n    }\n\n    /**\n     * Shows settings panel or specific control (if the name is provided)\n     * @param {string} [name] - name of control to be shown\n     * @returns {void}\n     * @example\n     * mySettings.show()\n     */\n    show(name) {\n        if (name) {\n            this._controls[name].show()\n        }\n        this._panel.classList.remove('hide')\n        this._hidden = false\n    }\n\n    /**\n     * Hides settings panel or specific control (if the name is provided)\n     * @param {string} [name] - name of control to be hidden\n     * @returns {void}\n     * @example\n     * mySettings.hide()\n     */\n    hide(name) {\n        if (name) {\n            this._controls[name].hide()\n        }\n        this._panel.classList.add('hide')\n        this._hidden = true\n    }\n\n    /**\n     * Enables specific control\n     * @param {string} name\n     * @returns {void}\n     * @example\n     * mySettings.enable('Checkbox control')\n     */\n    enable(name) {\n        if (name && this._controls[name]) {\n            return this._controls[name].enable()\n        }\n    }\n\n    /**\n     * Disables specific control\n     * @param {string} name\n     * @returns {void}\n     * @example\n     * mySettings.enable('Checkbox control')\n     */\n    disable(name) {\n        if (name && this._controls[name]) {\n            return this._controls[name].disable()\n        }\n    }\n\n    /**\n     * Open settings panel\n     * @example\n     * mySettings.open()\n     */\n    open() {\n        if (this._body.classList[1] === 'hide') {\n            this._body.classList.remove('hide')\n        } \n        this._open = true\n    }\n\n    /**\n     * Close settings panel\n     * @example\n     * mySettings.close()\n     * \n     */\n    close() {\n        this._body.classList.add('hide')\n        this._open = false\n    }\n\n    /**\n     * Open or close settings panel depending on `_open` property\n     * @returns {void}\n     * @example\n     * mySettings.toggle()\n     */\n    toggle() {\n        this._body.classList[1] === 'hide' ?\n            this._body.classList.remove('hide') :\n            this._body.classList.add('hide')\n        this._open = !this._open\n    }\n\n    /**\n     * Returns panel position [left, top]\n     * @return {array<string>}\n     * @example\n     * let position = mySettings.getPosition() // [0, 0]\n     */\n    getPosition() {\n        return [\n            this._panel.style.left,\n            this._panel.style.top\n        ]\n    }\n\n    /**\n     * Sets panel position\n     * @param {number} left - new position on the X axis\n     * @param {number} top - new position on the Y axis\n     * @example\n     * mySettings.setPosition(400, 400)\n     */\n    setPosition(left, top) {\n        this._panel.style.left = `${left}px`\n        this._panel.style.top = `${top}px`\n    }\n\n    /**\n     * Removes specific control\n     * @param {string} name - name of the control to be deleted\n     * @returns {void}\n     * @example\n     * mySettings.remove('Control name')\n     */\n    remove(name) {\n        if (name) {\n            let elem = this._controls[name].element()\n            elem.parentElement.remove()\n            elem.remove()\n            delete this._controls[name]\n        }\n    }\n\n    /**\n     * Get value of specific control\n     * @param {string} name - name of the control\n     * @returns {(number|string|boolean)}\n     * @example\n     * let value = mySettings.getValue('Control name')\n     */\n    getValue(name) {\n        if (name && this._controls[name] && this._controls[name].getValue) {\n            return this._controls[name].getValue()\n        }\n    }\n\n    /**\n     * Sets new active value of the specific control. (Changing button control value does not change its' id property)\n     * @param {string} name - name of the control\n     * @param {(number|string|boolean)} name - new value\n     * @param {boolean} [syntheticEvent] - specify, if method should dispatch syntethic event after items update. Default value is false\n     * @returns {void}\n     * @example\n     * mySettings.setValue('Control name', 'value')\n     */\n    setValue(name, value, syntheticEvent = false) {\n        let _control = this._controls[name]\n        if (name && _control && _control.setValue) {\n            return _control.setValue(value, syntheticEvent)\n        }\n    }\n\n    /**\n     * Get all active values\n     * @returns {object} - an object with values from all currently set controls\n     * @example\n     * let values = mySettings.getActiveValues()\n     */\n    getActiveValues() {\n        let values = {}\n        for (let i in this._controls) {\n            if (this._controls[i].getValue) {\n                values[i] = this._controls[i].getValue()\n            }\n        }\n        return values\n    }\n\n    /**\n     * Get selected index of the select control\n     * @param {string} name - name of the control\n     * @returns {number}\n     * @example\n     * let currentIndex = mySettings.getIndex('Select control')\n     */\n    getIndex(name) {\n        if (name && this._controls[name].getIndex) {\n            return this._controls[name].getIndex()\n        }\n    }\n\n    /**\n     * Get select/range items\n     * @param {string} name - name of the control\n     * @returns {array}\n     * @example\n     * let selectValues = mySettings.\n     */\n    getItems(name) {\n        let typeCondition = (\n            this._controls[name].type === 'range' || \n            this._controls[name].type === 'select' || \n            this._controls[name].type === 'progressbar'\n        )\n        if (this._controls[name] && typeCondition) {\n            return this._controls[name].getItems()\n        } else {\n            throw new Error('Chosen control is not a range, select or progressbar type')\n        }\n    }\n\n    /**\n     * Set (update) select/range items\n     * @param {string} name - name of the control\n     * @param {array} items - array of new items\n     * @param {boolean} [syntheticEvent] - specify, if method should dispatch syntethic event after items update. Default value is false\n     * @returns {void}\n     * @example\n     * mySettings.setItems('Select', [1, 2, 3, 4])\n     */\n    setItems(name, items, syntheticEvent = false) {\n        let typeCondition = (\n            this._controls[name].type === 'range' ||\n            this._controls[name].type === 'select' ||\n            this._controls[name].type === 'progressbar'\n        )\n        if (this._controls[name] && typeCondition) {\n            return this._controls[name].setItems(items, syntheticEvent)\n        } else {\n            throw new Error('Chosen control is not a range, select or progressbar type')\n        }\n    }\n\n    /**\n     * Creates button control\n     * @param {string} name - name of the control \n     * @param {function} callback - function executed on each change\n     * @returns {object} button control object\n     * @example\n     * let button = mySettings.button('Button Name', () => console.log('This is the button'))\n     */\n    button(name, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', {\n            class: 'sms-control'\n        })\n        let button = this._createElement('button', {\n            class: 'sms-button',\n            id: base.id,\n            innerText: name,\n            value: name\n        })\n        base.type = 'button'\n        base.name = name\n        base.callback = callback || null\n        button.addEventListener('click', e => {\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        wrapper.appendChild(button)\n        this._body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates text input control\n     * @param {string} name - name of the control\n     * @param {string} value - value of the control\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let textInput = mySettings.text('Text input', 'Hello world')\n     */\n    text(name, value, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let input = this._createElement('input', {\n            class: 'sms-text',\n            id: base.id,\n            type: 'text',\n            innerText: value,\n            placeholder: value,\n            value: value\n        })\n        base.name = name\n        base.value = value\n        base.type = 'text'\n        base.callback = callback || null\n        wrapper.appendChild(label)\n        wrapper.appendChild(input)\n        input.addEventListener('input', e => {\n            base.value = e.target.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        this._body.appendChild(wrapper)\n        base.getValue = function() {\n            return this.element().value\n        }\n        base.setValue = function (value, syntheticEvent) {\n            base.value = value\n            base.element().innerText = value\n            base.element().value = value\n            if (syntheticEvent === true)\n                self._dispatchEvent(base.element(), base.type)\n        }\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates textarea control\n     * @param {string} name - name of the control\n     * @param {string} value - value of the control\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let textarea = mySettings.textarea('Text input', 'Hello world')\n     */\n    textarea(name, value, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let textarea = this._createElement('textarea', {\n            class: 'sms-textarea',\n            id: base.id,\n            innerText: value,\n            value: value,\n            placeholder: value\n        })\n        base.name = name\n        base.value = value\n        base.type = 'text'\n        base.callback = callback || null\n        wrapper.appendChild(label)\n        wrapper.appendChild(textarea)\n        textarea.addEventListener('input', e => {\n            base.value = e.target.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        base.getValue = function () {\n            return this.element().value\n        }\n        base.setValue = function (value, syntheticEvent) {\n            base.value = value\n            base.element().innerText = value\n            base.element().value = value\n            if (syntheticEvent === true)\n                self._dispatchEvent(base.element(), base.type)\n        }\n        this._body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates range control\n     * @param {string} name - name of the control\n     * @param {array} items - array with min, max, default and step values\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let range = mySettings.range('Range', [1, 100, 40, 1], e => console.log(e.target.value))\n     */\n    range(name, items, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let span = this._createElement('span', { class: 'sms-label-span' })\n        let input = this._createElement('input', {\n            class: 'sms-range',\n            id: base.id,\n            type: 'range',\n            min: items[0],\n            max: items[1],\n            value: items[2],\n            step: items[3]\n        })\n        base.type = 'range'\n        base.name = name\n        base.value = items[2]\n        base.callback = callback || null\n        input.addEventListener('input', e => {\n            base.value = parseFloat(e.target.value)\n            span.innerText = base.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        span.innerText = base.value\n        label.appendChild(span)\n        wrapper.appendChild(label)\n        wrapper.appendChild(input)\n        this._body.appendChild(wrapper)\n        base.getValue = function() {\n            return parseFloat(base.element().value)\n        }\n        base.setValue = function(v, syntheticEvent) {\n            base.value = v\n            base.element().value = v\n            if (syntheticEvent === true)\n                self._dispatchEvent(base.element(), base.type)\n        }\n        base.getItems = function() {\n            let e = base.element()\n            return [\n                parseFloat(e.min),\n                parseFloat(e.max),\n                parseFloat(e.value),\n                parseFloat(e.step),\n            ]\n        }\n        base.setItems = function(items, syntheticEvent) {\n            let e = base.element()\n            e.min = items[0]\n            e.max = items[1]\n            e.value = items[2]\n            e.step = items[3]\n            base.value = parseFloat(e.value)\n            if (syntheticEvent === true)\n                self._dispatchEvent(base.element(), base.type)\n        }\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates checkbox control\n     * @param {string} name - name of the control\n     * @param {boolean} value - value of the control\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let checkbox = mySettings.checkbox('Check this out!', true, e => {\n     *      console.log(e.target.value)\n     * })\n     */\n    checkbox(name, value, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let checkbox = this._createElement('input', {\n            class: 'sms-checkbox',\n            id: base.id,\n            type: 'checkbox'\n        })\n        base.name = name\n        base.type = 'checkbox'\n        base.value = value\n        base.callback = callback || null\n        if (value === true) {\n            checkbox.setAttribute('checked', true)\n        }\n        checkbox.addEventListener('change', e => {\n            base.value = e.target.checked\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        wrapper.appendChild(label)\n        wrapper.appendChild(checkbox)\n        base.getValue = function() {\n            return base.element().checked\n        }\n        base.setValue = function(v, syntheticEvent) {\n            base.element().checked = v\n            base.value = v\n            if (syntheticEvent === true)\n                self._dispatchEvent(base.element(), base.type)\n        }\n        this._body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates color control\n     * @param {string} name - name of the control\n     * @param {string} value -hexadecimal string value of initial color\n     * @param {function} [callback] - function executed afer each change\n     * @returns {object}\n     * @example\n     * let color = mySettings.color('Color control', '#fcfcfc', e => someCallbackFunction())\n     */\n    color(name, value, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let span = this._createElement('span', { class: 'sms-label-span' })\n        let input = this._createElement('input', {\n            class: 'sms-color',\n            id: base.id,\n            type: 'color'\n        })\n        base.name = name\n        base.type = 'color'\n        base.value = value\n        base.callback = callback || null\n        input.setAttribute('value', value)\n        input.addEventListener('input', e => {\n            base.value = e.target.value\n            span.innerText = e.target.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        span.innerText = value\n        label.appendChild(span)\n        wrapper.appendChild(label)\n        wrapper.appendChild(input)\n        base.getValue = function() {\n            return base.element().value\n        }\n        base.setValue = function(v, syntheticEvent) {\n            base.element().value = v\n            base.value = v\n            span.innerText = v\n            if (syntheticEvent === true)\n                self._dispatchEvent(base.element(), base.type)\n        }\n        this._body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates select control\n     * @param {string} name - name of the control\n     * @param {array} items - array with option values\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let select = mySettings.select('Select', ['Option 1', 'Option 2', 'Option 3'])\n     */\n    select(name, items, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let select = this._createElement('select', {\n            class: 'sms-select',\n            id: base.id,\n            name: name,\n            value: items[0]\n        })\n        wrapper.appendChild(label)\n        items.map(item => {\n            let option = self._createSelectOption(item)\n            select.options.add(option)\n        })\n        select.addEventListener('change', e => {\n            base.value = e.target.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        wrapper.appendChild(select)\n        base.value = items[0]\n        base.name = name\n        base.type = 'select'\n        base.callback = callback || null\n        base.getValue = function() {\n            let _select = base.element()\n            return _select.options[_select.selectedIndex].value\n        }\n        base.setValue = function(v, syntheticEvent) {\n            base.value = v\n            let _select = base.element()\n            select.options[select.selectedIndex] = self._createSelectOption(v)\n            _select.value = v\n            if (syntheticEvent === true)\n                self._dispatchEvent(base.element(), base.type)\n        }\n        base.getItems = function() {\n            return Array\n                .from(base.element().options)\n                .map(option => option.value)\n        }\n        base.setItems = function(items, syntheticEvent) {\n            const _current = {\n                selected: base.element().selectedIndex,\n                length: base.getItems().length\n            }\n            const _new = {\n                selected: -1,\n                length: items.length\n            }\n\n            if (_new.length > _current.length) {\n                if (_current.selected === -1 || _current.selected === '') {\n                    _new.selected = 0\n                }\n                if (_current.selected > -1) {\n                    _new.selected = _new.length - 1\n                }\n            }\n            if (_new.length < _current.length) {\n                if (_current.selected > - 1 && _current.selected < _new.length) {\n                    _new.selected = _current.selected\n                }\n                if (_current.selected > _new.length - 1) {\n                    _new.selected = _new.length - 1\n                }\n            }\n\n            for (let i = 0; i < base.element().options.length; i++) {\n                base.element().options[i].remove()\n            }\n            items.forEach(item => {\n                let _index = items.indexOf(item)\n                base.element().options[_index] = self._createSelectOption(\n                    item,\n                    _index = _new.selected ? true : false\n                )\n            })\n            base.value = items[_new.selected]\n            if (syntheticEvent === true)\n                self._dispatchEvent(base.element(), base.type)\n        }\n        base.getIndex = function() {\n            return parseInt(base.element().selectedIndex)\n        }\n        this._body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates number control\n     * @param {string} name - name of the control\n     * @param {array} items - array with initial and step value\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let number = mySettings.number('Number', [10, 1], e => {})\n     */\n    number(name, items, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let input = this._createElement('input', {\n            class: 'sms-number',\n            id: base.id,\n            type: 'number',\n            value: items[0],\n            step: items[1]\n        })\n        input.addEventListener('input', e => {\n            base.value = parseFloat(e.target.value)\n            if (callback) {\n                callback(parseFloat(e))\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        base.type = 'number'\n        base.name = name\n        base.value = items[0]\n        base.callback = callback || null\n        base.getValue = function() {\n            return parseFloat(base.element().value)\n        }\n        base.setValue = function(v, syntheticEvent) {\n            base.element().value = v\n            base.value = v\n            if (syntheticEvent === true)\n                self._dispatchEvent(base.element(), base.type)\n        }\n        wrapper.appendChild(label)\n        wrapper.appendChild(input)\n        this._body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name] = base\n    }\n\n    /**\n     * Creates file input control\n     * @param {string} name - name of the control\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let fileControl = mySettings.file('File control', someCallbackFunction)\n     */\n    file(name, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let upload = this._createElement('input', {\n            class: 'sms-file',\n            id: base.id,\n            type: 'file'\n        })\n        base.name = name\n        base.type = 'file'\n        base.callback = callback || null\n        upload.addEventListener('change', e => {\n            base.value = e.target.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        wrapper.appendChild(label)\n        wrapper.appendChild(upload)\n        base.getValue = function() {\n            return base.element().files[0]\n        }\n        base.setValue = function(v, syntheticEvent) {\n            base.value = v\n            base.element().files[0] = v\n            if (syntheticEvent === true)\n                self._dispatchEvent(base.element(), base.type)\n        }\n        this._body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name] = base\n    }\n\n    /**\n     * Watch panel for changes and fire callback on each change\n     * @param {function} callback - function executed on each change in the panel\n     * @returns {void}\n     * @example\n     * mySettings.watch(callback)\n     */\n    watch(callback) {\n        this._globalWatcher = callback\n    }\n\n    /**\n     * Load controls from the configuration object.\n     * @param {(object|string|array)} config - configuration object or JSON string or configuration array of objects\n     * @returns {void}\n     * @example\n     * const mySettings = new SmartSettings('Name', 10, 10)\n     * mySettings.loadConfig({\n     *      control1: {\n     *          type: 'color',\n     *          name: 'Color',\n     *          value: '#fd3ef4',\n     *          callback: someCallbackFunction\n     *      },\n     *      // etc.\n     * })\n     * \n     * // or\n     * mySettings.loadConfig('{\n     *      \"control1\": {\n     *          \"type\": \"color\",\n     *          \"name\": \"Color\",\n     *          \"value\": \"#fd3ef4\",\n     *          \"callback\": \"someCallbackFunction\"\n     *      },\n     *      // etc.\n     * }')\n     * \n     * // or\n     * mySettings.loadConfig([{\n     *      {\n     *          type: 'color',\n     *          name: 'Color',\n     *          value: '#fd3ef4',\n     *          callback: someCallbackFunction\n     *      },\n     *      // etc.\n     * ])\n     */\n    loadConfig(config) {\n        if (!config) {\n            throw new Error('There is no config provided')\n        }\n        if (typeof config === 'string' || !Array.isArray(config)) {\n            if (typeof config === 'string') {\n                config = JSON.parse(config)\n            }\n            for (let key in config) {\n                let _entry = config[key]\n                this._assignEntryToMethod(_entry)\n            }\n        }\n        if (Array.isArray(config) === true) {\n            config.forEach(entry => this._assignEntryToMethod(entry))\n        }\n    }\n}\n\nexport default SmartSettings"],"names":["styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","SmartSettings","name","left","top","initialLeft","initialTop","_hidden","_open","_draggable","_panel","_controls","_localString","Math","random","toString","substring","_globalWatcher","_createUniqueId","_create","_body","childNodes","counter","uniqueID","attributes","element","key","setAttribute","_createElement","class","innerText","value","e","_entry","_isCallback","callback","button","range","items","select","text","textarea","checkbox","number","color","file","_eventType","dispatchEvent","Event","panelAttributes","id","panel","header","body","paragraph","addEventListener","toggle","basics","disabled","hidden","getElementById","enable","removeAttribute","disable","show","classList","remove","hide","add","item","selected","option","parentElement","removeChild","elem","getValue","syntheticEvent","_control","setValue","values","i","getIndex","typeCondition","getItems","Error","setItems","self","base","_createControlBasics","wrapper","_callGlobalWatcher","label","_createLabel","input","placeholder","target","_dispatchEvent","span","min","max","step","parseFloat","v","checked","map","_createSelectOption","options","_select","selectedIndex","Array","from","_current","length","_new","forEach","_index","indexOf","parseInt","upload","files","config","isArray","JSON","parse","_assignEntryToMethod","entry"],"mappings":"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"}