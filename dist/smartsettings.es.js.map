{"version":3,"file":"smartsettings.es.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/index.js"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import style from './index.css'\n\n/**\n * @class SmartSettings\n * @classdesc SmartSettings module, returns new SmartSettings instance\n * @param {string} name - name of the SmartSettings panel\n * @param {number} left - position of the SmartSettings panel on X axis\n * @param {number} top - position of the SmartSettings panel on Y axis\n * @example\n * const mySettings = new SmartSettings('My Settings', 10, 10)\n*/\nclass SmartSettings {\n    constructor(name = 'SmartSettings', left = 0, top = 0) {\n        this.name = name\n        this.left = left\n        this.top = top\n\n        /**\n         * @property {boolean} _hidden\n         * @private\n         */\n        this._hidden = false\n\n        /**\n         * @property {boolean} _open\n         * @private\n         */\n        this._open = true\n\n        /**\n         * @property {boolean} _draggable\n         * @private\n         */\n        this._draggable = false\n\n        /**\n         * @property {Node} _panel\n         * @private\n         */\n        this._panel = null\n\n        /**\n         * @property {object} _controls\n         * @private\n         */\n        this._controls = {}\n\n        this._createUniqueId()\n        this._create(this.name, this.top, this.left)\n    }\n\n    /* Utility methods */\n\n    /**\n     * Creates unique element identifier\n     * @private\n     */\n    _createUniqueId() {\n        let counter = 0\n        window.uniqueId = () => `sms-id-${counter++}`\n    }\n     \n    /**\n     * Creates any DOM element\n     * @param {string} type - type of the DOM element\n     * @param {Object} attributes - object with all attributes for the DOM element\n     * @returns {Node}\n     * @private \n     */\n    _createElement(type, attributes) {\n        let element = document.createElement(type)\n        if (attributes) {\n            for (let key in attributes) {\n                if (key === 'class') {\n                    element.setAttribute('class', attributes[key])\n                } else {\n                    element[key] = attributes[key]\n                }\n            }\n        }\n        return element\n    }\n\n    /* Helper methods */\n\n    /**\n     * Creates settings panel, invoked on class construction\n     * @returns {void}\n     * @private\n     */\n    _create() {\n        let panelAttributes = {\n            class: 'sms-panel',\n            id: uniqueId(),\n            style: `top: ${this.top}px; left: ${this.left}px; z-index: 2`\n        }\n        let panel = this._createElement('div', panelAttributes)\n        let header = this._createElement('div', { class: 'sms-panel-header' })\n        let body = this._createElement('div', { class: 'sms-panel-body' })\n        let paragraph = this._createElement('p', { class: 'sms-panel-header-name' })\n\n        header.addEventListener('click', e => this.toggle())\n\n        paragraph.innerText = this.name\n        header.appendChild(paragraph)\n        panel.appendChild(header)\n        panel.appendChild(body)\n        this._panel = panel\n        document.body.appendChild(this._panel)\n    }\n\n    /**\n     * Creates basic properties for the new control\n     * @returns {object}\n     * @private\n     */\n    _createControlBasics() {\n        let id = uniqueId()\n        let basics = {\n            id: id,\n            disabled: false,\n            hidden: false,\n            value: null,\n            name: null,\n            type: null,\n            element: function() {\n                return document.getElementById(this.id)\n            },\n            enable: function() {\n                this.element().removeAttribute('disabled')\n                this.disabled = false\n            },\n            disable: function() {\n                this.element().setAttribute('disabled', true)\n                this.disabled = true\n            },\n            show: function() {\n                if (this.element().classList[1] === 'hide') {\n                    this.element().classList.remove('hide')\n                    this.hidden = false\n                }\n            },\n            hide: function() {\n                if (this.element().classList[1] !== 'hide') {\n                    this.element().classList.add('hide')\n                    this.hidden = true\n                }\n            }\n        }\n        return basics\n    }\n\n    /**\n     * Returns select option\n     * @param {(string|number)} item - option value\n     * @returns {Node}\n     * @private\n     */\n    _createSelectOption(item) {\n        let option = this._createElement('option', {\n            class: 'sms-select-option',\n            value: item\n        })\n        option.innerText = item\n        return option\n    }\n\n    /* Basic methods */\n\n    /**\n     * Removes settings panel from the DOM and removes all sections and controls\n     * @returns {void}\n     * @example\n     * mySettings.destroy()\n     */\n    destroy() {\n        if (this._panel && this._panel.parentElement) {\n            this._panel.parentElement.removeChild(this._panel)\n        }\n        this._panel = null\n        this._controls = {}\n    }\n\n    /**\n     * Shows settings panel or specific control (if the name is provided)\n     * @param {string} [name] - name of control to be shown\n     * @returns {void}\n     * @example\n     * mySettings.show()\n     */\n    show(name) {\n        if (name) {\n            this._controls[name].show()\n        }\n        this._panel.classList.remove('hide')\n        this._hidden = false\n    }\n\n    /**\n     * Hides settings panel or specific control (if the name is provided)\n     * @param {string} [name] - name of control to be hidden\n     * @returns {void}\n     * @example\n     * mySettings.hide()\n     */\n    hide(name) {\n        if (name) {\n            this._controls[name].hide()\n        }\n        this._panel.classList.add('hide')\n        this._hidden = true\n    }\n\n    /**\n     * Enables specific control\n     * @param {string} name\n     * @returns {void}\n     * @example\n     * mySettings.enable('Checkbox control')\n     */\n    enable(name) {\n        if (name && this._controls[name]) {\n            return this._controls[name].enable()\n        }\n    }\n\n    /**\n     * Disables specific control\n     * @param {string} name\n     * @returns {void}\n     * @example\n     * mySettings.enable('Checkbox control')\n     */\n    disable(name) {\n        if (name && this._controls[name]) {\n            return this._controls[name].disable()\n        }\n    }\n\n    /**\n     * Open settings panel\n     * @example\n     * mySettings.open()\n     */\n    open() {\n        let panelBody = this._panel.childNodes[1]\n        if (panelBody.classList[1] === 'hide') {\n            panelBody.classList.remove('hide')\n        } \n        this._open = true\n    }\n\n    /**\n     * Close settings panel\n     * @example\n     * mySettings.close()\n     * \n     */\n    close() {\n        let panelBody = this._panel.childNodes[1]\n        panelBody.classList.add('hide')\n        this._open = false\n    }\n\n    /**\n     * Open or close settings panel depending on `_open` property\n     * @returns {void}\n     * @example\n     * mySettings.toggle()\n     */\n    toggle() {\n        let panelBody = this._panel.childNodes[1]\n        panelBody.classList[1] === 'hide' ?\n            panelBody.classList.remove('hide') :\n            panelBody.classList.add('hide')\n        this._open = !this._open\n    }\n\n    /**\n     * Returns panel position [left, top]\n     * @return {array<number>}\n     * @example\n     * let position = mySettings.getPosition() // [0, 0]\n     */\n    getPosition() {\n        return [this.left, this.top]\n    }\n\n    /**\n     * Sets panel position\n     * @param {number} left - new position on the X axis\n     * @param {number} top - new position on the Y axis\n     * @example\n     * mySettings.setPosition(400, 400)\n     */\n    setPosition(left, top) {\n        this.left = left\n        this.top = top\n    }\n\n    /**\n     * Removes specific control\n     * @param {string} name - name of the control to be deleted\n     * @returns {void}\n     * @example\n     * mySettings.remove('Control name')\n     */\n    remove(name) {\n        if (name) {\n            let elem = this._controls[name].element()\n            elem.parentElement.remove()\n            elem.remove()\n            delete this._controls[name]\n        }\n    }\n\n    /**\n     * Get value of specific control\n     * @param {string} name - name of the control\n     * @returns {(number|string|boolean)}\n     * @example\n     * let value = mySettings.getValue('Control name')\n     */\n    getValue(name) {\n        if (name && this._controls[name] && this._controls[name].getValue) {\n            return this._controls[name].getValue()\n        }\n    }\n\n    /**\n     * Sets new active value of the specific control. (Changing button control value does not change its' id property)\n     * @param {string} name - name of the control\n     * @param {(number|string|boolean)} name - new value\n     * @returns {void}\n     * @example\n     * mySettings.setValue('Control name', 'value')\n     */\n    setValue(name, value) {\n        if (name && this._controls[name] && this._controls[name].setValue) {\n            return this._controls[name].setValue(value)\n        }\n    }\n\n    /**\n     * Get all active values\n     * @returns {object} - an object with values from all currently set controls\n     * @example\n     * let values = mySettings.getActiveValues()\n     */\n    getActiveValues() {\n        let values = {}\n        for (let i in this._controls) {\n            if (this._controls[i].getValue) {\n                values[i] = this._controls[i].getValue()\n            }\n        }\n        return values\n    }\n\n    /**\n     * Get select/range/progressbar items\n     * @param {string} name - name of the control\n     * @returns {array}\n     * @example\n     * let selectValues = mySettings.\n     */\n    getItems(name) {\n        let typeCondition = (\n            this._controls[name].type === 'range' || \n            this._controls[name].type === 'select' || \n            this._controls[name].type === 'progressbar'\n        )\n        if (this._controls[name] && typeCondition) {\n            return this._controls[name].getItems()\n        } else {\n            throw new Error('Chosen control is not a range, select or progressbar type')\n        }\n    }\n\n    /**\n     * Set (update) select/range/progressbar items\n     * @param {string} name - name of the control\n     * @param {array} items - array of new items\n     * @returns {void}\n     * @example\n     * mySettings.setItems('Select', [1, 2, 3, 4])\n     */\n    setItems(name, items) {\n        let typeCondition = (\n            this._controls[name].type === 'range' ||\n            this._controls[name].type === 'select' ||\n            this._controls[name].type === 'progressbar'\n        )\n        if (this._controls[name] && typeCondition) {\n            return this._controls[name].setItems(items)\n        } else {\n            throw new Error('Chosen control is not a range, select or progressbar type')\n        }\n    }\n\n    /**\n     * Creates button control\n     * @param {string} name - name of the control \n     * @param {function} callback - function executed on each change\n     * @returns {object} button control object\n     * @example\n     * let button = mySettings.button('Button Name', () => console.log('This is the button'))\n     */\n    button(name, callback) {\n        let base = this._createControlBasics()\n        let body = this._panel.childNodes[1]\n        let wrapper = this._createElement('div', {\n            class: 'sms-control'\n        })\n        let button = this._createElement('button', {\n            class: 'sms-button',\n            id: base.id\n        })\n        base.type = 'button'\n        base.name = name\n        button.innerText = name\n        button.value = name\n        if (callback) {\n            button.addEventListener('click', callback)\n        }\n        wrapper.appendChild(button)\n        body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates text input control\n     * @param {string} name - name of the control\n     * @param {string} value - value of the control\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let textInput = mySettings.text('Text input', 'Hello world')\n     */\n    text(name, value, callback) {\n        let body = this._panel.childNodes[1]\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createElement('label', { class: 'sms-label' })\n        let input = this._createElement('input', {\n            class: 'sms-text',\n            id: base.id,\n            type: 'text'\n        })\n        input.innerText = value\n        input.value = value\n        input.placeholder = value\n        base.name = name\n        base.value = value\n        base.type = 'text'\n        label.innerText = name\n        wrapper.appendChild(label)\n        wrapper.appendChild(input)\n        if (callback) {\n            input.addEventListener('input', callback)\n        }\n        body.appendChild(wrapper)\n        base.getValue = function() {\n            return this.element().value\n        }\n        base.setValue = function(value) {\n            base.value = value\n            base.element().innerText = value\n            base.element().value = value\n        }\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates textarea control\n     * @param {string} name - name of the control\n     * @param {string} value - value of the control\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let textarea = mySettings.textarea('Text input', 'Hello world')\n     */\n    textarea(name, value, callback) {\n        let body = this._panel.childNodes[1]\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createElement('label', { class: 'sms-label' })\n        let textarea = this._createElement('textarea', {\n            class: 'sms-textarea',\n            id: base.id\n        })\n        textarea.innerText = value\n        textarea.value = value\n        textarea.placeholder = value\n        base.name = name\n        base.value = value\n        base.type = 'text'\n        label.innerText = name\n        wrapper.appendChild(label)\n        wrapper.appendChild(textarea)\n        if (callback) {\n            textarea.addEventListener('input', e => {\n                base.value = e.target.value\n                callback(e)\n            })\n        }\n        body.appendChild(wrapper)\n        base.getValue = function () {\n            return this.element().value\n        }\n        base.setValue = function (value) {\n            base.value = value\n            base.element().innerText = value\n            base.element().value = value\n        }\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates range control\n     * @param {string} name - name of the control\n     * @param {array} items - array with min, max, default and step values\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let range = mySettings.range('Range', [1, 100, 40, 1], e => console.log(e.target.value))\n     */\n    range(name, items, callback) {\n        let body = this._panel.childNodes[1]\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createElement('label', { class: 'sms-label' })\n        let span = this._createElement('span', { class: 'sms-label-span' })\n        let input = this._createElement('input', {\n            class: 'sms-range',\n            id: base.id,\n            type: 'range',\n            min: items[0],\n            max: items[1],\n            value: items[2],\n            step: items[3]\n        })\n\n        base.type = 'range'\n        base.name = name\n        base.value = items[2]\n        input.addEventListener('input', e => {\n            base.value = e.target.value\n            span.innerText = base.value\n            if (callback) {\n                callback(e)\n            }\n        })\n        span.innerText = base.value\n        label.value = name\n        label.innerText = name\n        label.appendChild(span)\n        wrapper.appendChild(label)\n        wrapper.appendChild(input)\n        body.appendChild(wrapper)\n        base.getValue = function() {\n            return parseFloat(base.element().value)\n        }\n        base.setValue = function(v) {\n            base.value = v\n            base.element().value = v\n        }\n        base.getItems = function() {\n            let e = base.element()\n            return [\n                parseFloat(e.min),\n                parseFloat(e.max),\n                parseFloat(e.value),\n                parseFloat(e.step),\n            ]\n        }\n        base.setItems = function(items) {\n            let e = base.element()\n            e.min = items[0]\n            e.max = items[1]\n            e.value = items[2]\n            e.step = items[3]\n            base.value = parseFloat(e.value)\n        }\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates checkbox control\n     * @param {string} name - name of the control\n     * @param {boolean} value - value of the control\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let checkbox = mySettings.checkbox('Check this out!', true, e => {\n     *      console.log(e.target.value)\n     * })\n     */\n    checkbox(name, value, callback) {\n        let body = this._panel.childNodes[1]\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createElement('label', { class: 'sms-label' })\n        let checkbox = this._createElement('input', {\n            class: 'sms-checkbox',\n            id: base.id,\n            type: 'checkbox'\n        })\n        base.name = name\n        base.type = 'checkbox'\n        base.value = value\n        label.innerText = name\n        label.value = name\n        if (value === true) {\n            checkbox.setAttribute('checked', true)\n        }\n        checkbox.addEventListener('change', e => {\n            base.value = e.target.checked\n            if (callback) {\n                callback(e)\n            }\n        })\n        wrapper.appendChild(label)\n        wrapper.appendChild(checkbox)\n        body.appendChild(wrapper)\n        base.getValue = function() {\n            return base.element().checked\n        }\n        base.setValue = function(v) {\n            base.element().checked = v\n            base.value = v\n        }\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates color control\n     * @param {string} name - name of the control\n     * @param {string} value -hexadecimal string value of initial color\n     * @param {function} [callback] - function executed afer each change\n     * @returns {object}\n     * @example\n     * let color = mySettings.color('Color control', '#fcfcfc', e => someCallbackFunction())\n     */\n    color(name, value, callback) {\n        let body = this._panel.childNodes[1]\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createElement('label', { class: 'sms-label' })\n        let span = this._createElement('span', { class: 'sms-label-span' })\n        let input = this._createElement('input', {\n            class: 'sms-color',\n            id: base.id,\n            type: 'color'\n        })\n        base.name = name\n        base.type = 'color'\n        base.value = value\n        input.setAttribute('value', value)\n        input.addEventListener('input', e => {\n            base.value = e.target.value\n            span.innerText = e.target.value\n            if (callback) {\n                callback(e)\n            }\n        })\n        span.innerText = value\n        label.value = name\n        label.innerText = name\n        label.appendChild(span)\n        wrapper.appendChild(label)\n        wrapper.appendChild(input)\n        body.appendChild(wrapper)\n        base.getValue = function() {\n            return base.element().value\n        }\n        base.setValue = function(v) {\n            base.element().value = v\n            base.value = v\n            span.innerText = v\n        }\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates select control\n     * @param {string} name - name of the control\n     * @param {array} items - array with option values\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let select = mySettings.select('Select', ['Option 1', 'Option 2', 'Option 3'])\n     */\n    select(name, items, callback) {\n        let self = this\n        let body = this._panel.childNodes[1]\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createElement('label', { class: 'sms-label' })\n        let select = this._createElement('select', {\n            class: 'sms-select',\n            id: base.id,\n            name: name\n        })\n        label.innerText = name\n        label.value = name\n        wrapper.appendChild(label)\n        items.map(item => {\n            let option = self._createSelectOption(item)\n            select.options.add(option)\n        })\n        select.value = items[0]\n        select.addEventListener('change', e => {\n            base.value = e.target.value\n            if (callback) {\n                callback(e)\n            }\n        })\n        wrapper.appendChild(select)\n        body.appendChild(wrapper)\n        base.value = items[0]\n        base.name = name\n        base.type = 'select'\n        base.getValue = function() {\n            let _select = base.element()\n            return _select.options[_select.selectedIndex].value\n        }\n        base.setValue = function(v) {\n            base.value = v\n            let _select = base.element()\n            select.options[select.selectedIndex] = self._createSelectOption(v)\n            _select.value = v\n        }\n        base.getItems = function() {\n            return Array\n                .from(base.element().options)\n                .map(option => option.value)\n        }\n        base.setItems = function(items) {\n            let _select = base.element()\n            items.forEach(item => {\n                let _index = items.indexOf(item)\n                _select.options[_index] = self._createSelectOption(item)\n            })\n        }\n        this._controls[name] = base\n        return this._controls[name]\n    }\n}\n\nexport default SmartSettings"],"names":["styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","SmartSettings","name","left","top","_hidden","_open","_draggable","_panel","_controls","_createUniqueId","_create","counter","uniqueId","attributes","element","key","setAttribute","panelAttributes","panel","_createElement","header","class","body","paragraph","addEventListener","toggle","innerText","id","basics","getElementById","removeAttribute","disabled","classList","remove","hidden","add","item","option","parentElement","removeChild","show","hide","enable","disable","panelBody","childNodes","elem","getValue","value","setValue","values","i","typeCondition","getItems","Error","items","setItems","callback","base","_createControlBasics","wrapper","button","label","input","placeholder","textarea","e","target","span","parseFloat","v","min","max","step","checkbox","checked","self","select","map","_createSelectOption","options","_select","selectedIndex","Array","from","forEach","_index","indexOf"],"mappings":"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"}