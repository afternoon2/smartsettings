{"version":3,"file":"smartsettings.es.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/index.js"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import style from './index.css'\n\n/**\n * @class SmartSettings\n * @classdesc SmartSettings module, returns new SmartSettings instance\n * @param {string} name - name of the SmartSettings panel\n * @param {number} left - position of the SmartSettings panel on X axis\n * @param {number} top - position of the SmartSettings panel on Y axis\n * @example\n * const mySettings = new SmartSettings('My Settings', 10, 10)\n*/\nclass SmartSettings {\n    constructor(name = 'SmartSettings', left = 0, top = 0) {\n        this.name = name\n        this.initialLeft = left\n        this.initialTop = top\n\n        /**\n         * @property {boolean} _hidden\n         * @private\n         */\n        this._hidden = false\n\n        /**\n         * @property {boolean} _open\n         * @private\n         */\n        this._open = true\n\n        /**\n         * @property {boolean} _draggable\n         * @private\n         */\n        this._draggable = false\n\n        /**\n         * @property {Node} _panel\n         * @private\n         */\n        this._panel = null\n\n        /**\n         * @property {object} _controls\n         * @private\n         */\n        this._controls = {}\n\n        /**\n         * @property {?function} _globalWatcher\n         * @private\n         */\n        this._globalWatcher = null\n\n        this._createUniqueId()\n        this._create(this.name, this.initialTop, this.initialLeft)\n\n        /**\n         * @property {?Node} _panelBody - body div\n         * @private\n         */\n        this._body = this._panel ? this._panel.childNodes[1] : null\n    }\n\n    /* Utility methods */\n\n    /**\n     * Creates unique element identifier\n     * @private\n     */\n    _createUniqueId() {\n        let counter = 0\n        window.uniqueId = () => `sms-id-${counter++}`\n    }\n     \n    /**\n     * Creates any DOM element\n     * @param {string} type - type of the DOM element\n     * @param {Object} attributes - object with all attributes for the DOM element\n     * @returns {Node}\n     * @private \n     */\n    _createElement(type, attributes) {\n        let element = document.createElement(type)\n        if (attributes) {\n            for (let key in attributes) {\n                if (key === 'class') {\n                    element.setAttribute('class', attributes[key])\n                } else {\n                    element[key] = attributes[key]\n                }\n            }\n        }\n        return element\n    }\n\n    /**\n     * Creates label element\n     * @param {string} name - name in the label\n     * @returns {Node}\n     * @private\n     */\n    _createLabel(name) {\n        return this._createElement('label', {\n            class: 'sms-label',\n            innerText: name,\n            value: name\n        })\n    }\n    /**\n     * Calls the global watcher\n     * @param {EventListenerObject} event - an event\n     * @returns {void}\n     * @private\n     */\n    _callGlobalWatcher(e) {\n        if (this._globalWatcher) {\n            this._globalWatcher(e)\n        }\n    }\n\n    /**\n     * Assigns config entry to the specific control creation method\n     * @param {object} entry - entry of the config object|array\n     * @private\n     */\n    _assignEntryToMethod(_entry) {\n        let _isCallback = _entry.callback ? _entry.callback : null\n        switch (_entry.type) {\n        case 'button':\n            this.button(_entry.name, _isCallback)\n            break\n        case 'range':\n            this.range(_entry.name, _entry.items, _isCallback)\n            break\n        case 'select':\n            this.select(_entry.name, _entry.items, _isCallback)\n            break\n        case 'text':\n            this.text(_entry.name, _entry.value, _isCallback)\n            break\n        case 'textarea':\n            this.textarea(_entry.name, _entry.value, _isCallback)\n            break\n        case 'checkbox':\n            this.checkbox(_entry.name, _entry.value, _isCallback)\n            break\n        case 'number':\n            this.number(_entry.name, _entry.items, _isCallback)\n            break\n        case 'color':\n            this.color(_entry.name, _entry.value, _isCallback)\n            break\n        case 'file':\n            this.file(_entry.name, _isCallback)\n        }\n    }\n\n    /**\n     * Dispatches an event after setting new items or new value to the control\n     * @param {Node} element - DOM element dispatcher\n     * @param {string} type - type of the control\n     * @returns {void}\n     * @private\n     */\n    _dispatchEvent(element, type) {\n        let _eventType\n        if (type === 'button') {\n            _eventType = 'click'\n        }\n        if (\n            type === 'text' || \n            type === 'textarea' || \n            type === 'range' ||\n            type === 'color' ||\n            type === 'number'\n        ) {\n            _eventType = 'input'\n        }\n        if (\n            type === 'checkbox' ||\n            type === 'select' ||\n            type === 'file'\n        ) {\n            _eventType = 'change'\n        }\n        element.dispatchEvent(new Event(_eventType))\n    }\n\n    /* Helper methods */\n\n    /**\n     * Creates settings panel, invoked on class construction\n     * @returns {void}\n     * @private\n     */\n    _create() {\n        let self = this\n        let panelAttributes = {\n            class: 'sms-panel',\n            id: uniqueId(),\n            style: `top: ${this.initialTop}px; left: ${this.initialLeft}px; z-index: 2`\n        }\n        let panel = this._createElement('div', panelAttributes)\n        let header = this._createElement('div', { class: 'sms-panel-header' })\n        let body = this._createElement('div', { class: 'sms-panel-body' })\n        let paragraph = this._createElement('p', { class: 'sms-panel-header-name' })\n        header.addEventListener('click', e => this.toggle())\n        paragraph.innerText = this.name\n        header.appendChild(paragraph)\n        panel.appendChild(header)\n        panel.appendChild(body)\n        this._panel = panel\n        document.body.appendChild(this._panel)\n    }\n\n    /**\n     * Creates basic properties for the new control\n     * @returns {object}\n     * @private\n     */\n    _createControlBasics() {\n        let id = uniqueId()\n        let basics = {\n            id: id,\n            disabled: false,\n            hidden: false,\n            value: null,\n            name: null,\n            type: null,\n            callback: null,\n            element: function() {\n                return document.getElementById(this.id)\n            },\n            enable: function() {\n                this.element().removeAttribute('disabled')\n                this.disabled = false\n            },\n            disable: function() {\n                this.element().setAttribute('disabled', true)\n                this.disabled = true\n            },\n            show: function() {\n                if (this.element().classList[1] === 'hide') {\n                    this.element().classList.remove('hide')\n                    this.hidden = false\n                }\n            },\n            hide: function() {\n                if (this.element().classList[1] !== 'hide') {\n                    this.element().classList.add('hide')\n                    this.hidden = true\n                }\n            }\n        }\n        return basics\n    }\n\n    /**\n     * Returns select option\n     * @param {(string|number)} item - option value\n     * @param {boolean} [selected] - is option selected\n     * @returns {Node}\n     * @private\n     */\n    _createSelectOption(item, selected) {\n        let option = this._createElement('option', {\n            class: 'sms-select-option',\n            value: item,\n            innerText: item,\n            selected: selected ? selected : false\n        })\n        return option\n    }\n\n    /* Basic methods */\n\n    /**\n     * Removes settings panel from the DOM and removes all sections and controls\n     * @returns {void}\n     * @example\n     * mySettings.destroy()\n     */\n    destroy() {\n        if (this._panel && this._panel.parentElement) {\n            this._panel.parentElement.removeChild(this._panel)\n        }\n        this._panel = null\n        this._controls = {}\n    }\n\n    /**\n     * Shows settings panel or specific control (if the name is provided)\n     * @param {string} [name] - name of control to be shown\n     * @returns {void}\n     * @example\n     * mySettings.show()\n     */\n    show(name) {\n        if (name) {\n            this._controls[name].show()\n        }\n        this._panel.classList.remove('hide')\n        this._hidden = false\n    }\n\n    /**\n     * Hides settings panel or specific control (if the name is provided)\n     * @param {string} [name] - name of control to be hidden\n     * @returns {void}\n     * @example\n     * mySettings.hide()\n     */\n    hide(name) {\n        if (name) {\n            this._controls[name].hide()\n        }\n        this._panel.classList.add('hide')\n        this._hidden = true\n    }\n\n    /**\n     * Enables specific control\n     * @param {string} name\n     * @returns {void}\n     * @example\n     * mySettings.enable('Checkbox control')\n     */\n    enable(name) {\n        if (name && this._controls[name]) {\n            return this._controls[name].enable()\n        }\n    }\n\n    /**\n     * Disables specific control\n     * @param {string} name\n     * @returns {void}\n     * @example\n     * mySettings.enable('Checkbox control')\n     */\n    disable(name) {\n        if (name && this._controls[name]) {\n            return this._controls[name].disable()\n        }\n    }\n\n    /**\n     * Open settings panel\n     * @example\n     * mySettings.open()\n     */\n    open() {\n        if (this._body.classList[1] === 'hide') {\n            this._body.classList.remove('hide')\n        } \n        this._open = true\n    }\n\n    /**\n     * Close settings panel\n     * @example\n     * mySettings.close()\n     * \n     */\n    close() {\n        this._body.classList.add('hide')\n        this._open = false\n    }\n\n    /**\n     * Open or close settings panel depending on `_open` property\n     * @returns {void}\n     * @example\n     * mySettings.toggle()\n     */\n    toggle() {\n        this._body.classList[1] === 'hide' ?\n            this._body.classList.remove('hide') :\n            this._body.classList.add('hide')\n        this._open = !this._open\n    }\n\n    /**\n     * Returns panel position [left, top]\n     * @return {array<string>}\n     * @example\n     * let position = mySettings.getPosition() // [0, 0]\n     */\n    getPosition() {\n        return [\n            this._panel.style.left,\n            this._panel.style.top\n        ]\n    }\n\n    /**\n     * Sets panel position\n     * @param {number} left - new position on the X axis\n     * @param {number} top - new position on the Y axis\n     * @example\n     * mySettings.setPosition(400, 400)\n     */\n    setPosition(left, top) {\n        this._panel.style.left = `${left}px`\n        this._panel.style.top = `${top}px`\n    }\n\n    /**\n     * Removes specific control\n     * @param {string} name - name of the control to be deleted\n     * @returns {void}\n     * @example\n     * mySettings.remove('Control name')\n     */\n    remove(name) {\n        if (name) {\n            let elem = this._controls[name].element()\n            elem.parentElement.remove()\n            elem.remove()\n            delete this._controls[name]\n        }\n    }\n\n    /**\n     * Get value of specific control\n     * @param {string} name - name of the control\n     * @returns {(number|string|boolean)}\n     * @example\n     * let value = mySettings.getValue('Control name')\n     */\n    getValue(name) {\n        if (name && this._controls[name] && this._controls[name].getValue) {\n            return this._controls[name].getValue()\n        }\n    }\n\n    /**\n     * Sets new active value of the specific control. (Changing button control value does not change its' id property)\n     * @param {string} name - name of the control\n     * @param {(number|string|boolean)} name - new value\n     * @returns {void}\n     * @example\n     * mySettings.setValue('Control name', 'value')\n     */\n    setValue(name, value) {\n        if (name && this._controls[name] && this._controls[name].setValue) {\n            return this._controls[name].setValue(value)\n        }\n    }\n\n    /**\n     * Get all active values\n     * @returns {object} - an object with values from all currently set controls\n     * @example\n     * let values = mySettings.getActiveValues()\n     */\n    getActiveValues() {\n        let values = {}\n        for (let i in this._controls) {\n            if (this._controls[i].getValue) {\n                values[i] = this._controls[i].getValue()\n            }\n        }\n        return values\n    }\n\n    /**\n     * Get select/range/progressbar items\n     * @param {string} name - name of the control\n     * @returns {array}\n     * @example\n     * let selectValues = mySettings.\n     */\n    getItems(name) {\n        let typeCondition = (\n            this._controls[name].type === 'range' || \n            this._controls[name].type === 'select' || \n            this._controls[name].type === 'progressbar'\n        )\n        if (this._controls[name] && typeCondition) {\n            return this._controls[name].getItems()\n        } else {\n            throw new Error('Chosen control is not a range, select or progressbar type')\n        }\n    }\n\n    /**\n     * Set (update) select/range/progressbar items\n     * @param {string} name - name of the control\n     * @param {array} items - array of new items\n     * @returns {void}\n     * @example\n     * mySettings.setItems('Select', [1, 2, 3, 4])\n     */\n    setItems(name, items) {\n        let typeCondition = (\n            this._controls[name].type === 'range' ||\n            this._controls[name].type === 'select' ||\n            this._controls[name].type === 'progressbar'\n        )\n        if (this._controls[name] && typeCondition) {\n            return this._controls[name].setItems(items)\n        } else {\n            throw new Error('Chosen control is not a range, select or progressbar type')\n        }\n    }\n\n    /**\n     * Creates button control\n     * @param {string} name - name of the control \n     * @param {function} callback - function executed on each change\n     * @returns {object} button control object\n     * @example\n     * let button = mySettings.button('Button Name', () => console.log('This is the button'))\n     */\n    button(name, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', {\n            class: 'sms-control'\n        })\n        let button = this._createElement('button', {\n            class: 'sms-button',\n            id: base.id,\n            innerText: name,\n            value: name\n        })\n        base.type = 'button'\n        base.name = name\n        base.callback = callback || null\n        button.addEventListener('click', e => {\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        wrapper.appendChild(button)\n        this._body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates text input control\n     * @param {string} name - name of the control\n     * @param {string} value - value of the control\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let textInput = mySettings.text('Text input', 'Hello world')\n     */\n    text(name, value, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let input = this._createElement('input', {\n            class: 'sms-text',\n            id: base.id,\n            type: 'text',\n            innerText: value,\n            placeholder: value,\n            value: value\n        })\n        base.name = name\n        base.value = value\n        base.type = 'text'\n        base.callback = callback || null\n        wrapper.appendChild(label)\n        wrapper.appendChild(input)\n        input.addEventListener('input', e => {\n            base.value = e.target.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        this._body.appendChild(wrapper)\n        base.getValue = function() {\n            return this.element().value\n        }\n        base.setValue = function(value) {\n            base.value = value\n            base.element().innerText = value\n            base.element().value = value\n            self._dispatchEvent(base.element(), base.type)\n        }\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates textarea control\n     * @param {string} name - name of the control\n     * @param {string} value - value of the control\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let textarea = mySettings.textarea('Text input', 'Hello world')\n     */\n    textarea(name, value, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let textarea = this._createElement('textarea', {\n            class: 'sms-textarea',\n            id: base.id,\n            innerText: value,\n            value: value,\n            placeholder: value\n        })\n        base.name = name\n        base.value = value\n        base.type = 'text'\n        base.callback = callback || null\n        wrapper.appendChild(label)\n        wrapper.appendChild(textarea)\n        textarea.addEventListener('input', e => {\n            base.value = e.target.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        base.getValue = function () {\n            return this.element().value\n        }\n        base.setValue = function (value) {\n            base.value = value\n            base.element().innerText = value\n            base.element().value = value\n            self._dispatchEvent(base.element(), base.type)\n        }\n        this._body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates range control\n     * @param {string} name - name of the control\n     * @param {array} items - array with min, max, default and step values\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let range = mySettings.range('Range', [1, 100, 40, 1], e => console.log(e.target.value))\n     */\n    range(name, items, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let span = this._createElement('span', { class: 'sms-label-span' })\n        let input = this._createElement('input', {\n            class: 'sms-range',\n            id: base.id,\n            type: 'range',\n            min: items[0],\n            max: items[1],\n            value: items[2],\n            step: items[3]\n        })\n        base.type = 'range'\n        base.name = name\n        base.value = items[2]\n        base.callback = callback || null\n        input.addEventListener('input', e => {\n            base.value = parseFloat(e.target.value)\n            span.innerText = base.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        span.innerText = base.value\n        label.appendChild(span)\n        wrapper.appendChild(label)\n        wrapper.appendChild(input)\n        this._body.appendChild(wrapper)\n        base.getValue = function() {\n            return parseFloat(base.element().value)\n        }\n        base.setValue = function(v) {\n            base.value = v\n            base.element().value = v\n            self._dispatchEvent(base.element(), base.type)\n        }\n        base.getItems = function() {\n            let e = base.element()\n            return [\n                parseFloat(e.min),\n                parseFloat(e.max),\n                parseFloat(e.value),\n                parseFloat(e.step),\n            ]\n        }\n        base.setItems = function(items) {\n            let e = base.element()\n            e.min = items[0]\n            e.max = items[1]\n            e.value = items[2]\n            e.step = items[3]\n            base.value = parseFloat(e.value)\n            self._dispatchEvent(base.element(), base.type)\n        }\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates checkbox control\n     * @param {string} name - name of the control\n     * @param {boolean} value - value of the control\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let checkbox = mySettings.checkbox('Check this out!', true, e => {\n     *      console.log(e.target.value)\n     * })\n     */\n    checkbox(name, value, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let checkbox = this._createElement('input', {\n            class: 'sms-checkbox',\n            id: base.id,\n            type: 'checkbox'\n        })\n        base.name = name\n        base.type = 'checkbox'\n        base.value = value\n        base.callback = callback || null\n        if (value === true) {\n            checkbox.setAttribute('checked', true)\n        }\n        checkbox.addEventListener('change', e => {\n            base.value = e.target.checked\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        wrapper.appendChild(label)\n        wrapper.appendChild(checkbox)\n        base.getValue = function() {\n            return base.element().checked\n        }\n        base.setValue = function(v) {\n            base.element().checked = v\n            base.value = v\n            self._dispatchEvent(base.element(), base.type)\n        }\n        this._body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates color control\n     * @param {string} name - name of the control\n     * @param {string} value -hexadecimal string value of initial color\n     * @param {function} [callback] - function executed afer each change\n     * @returns {object}\n     * @example\n     * let color = mySettings.color('Color control', '#fcfcfc', e => someCallbackFunction())\n     */\n    color(name, value, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let span = this._createElement('span', { class: 'sms-label-span' })\n        let input = this._createElement('input', {\n            class: 'sms-color',\n            id: base.id,\n            type: 'color'\n        })\n        base.name = name\n        base.type = 'color'\n        base.value = value\n        base.callback = callback || null\n        input.setAttribute('value', value)\n        input.addEventListener('input', e => {\n            base.value = e.target.value\n            span.innerText = e.target.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        span.innerText = value\n        label.appendChild(span)\n        wrapper.appendChild(label)\n        wrapper.appendChild(input)\n        base.getValue = function() {\n            return base.element().value\n        }\n        base.setValue = function(v) {\n            base.element().value = v\n            base.value = v\n            span.innerText = v\n            self._dispatchEvent(base.element(), base.type)\n        }\n        this._body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates select control\n     * @param {string} name - name of the control\n     * @param {array} items - array with option values\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let select = mySettings.select('Select', ['Option 1', 'Option 2', 'Option 3'])\n     */\n    select(name, items, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let select = this._createElement('select', {\n            class: 'sms-select',\n            id: base.id,\n            name: name,\n            value: items[0]\n        })\n        wrapper.appendChild(label)\n        items.map(item => {\n            let option = self._createSelectOption(item)\n            select.options.add(option)\n        })\n        select.addEventListener('change', e => {\n            base.value = e.target.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        wrapper.appendChild(select)\n        base.value = items[0]\n        base.name = name\n        base.type = 'select'\n        base.callback = callback || null\n        base.getValue = function() {\n            let _select = base.element()\n            return _select.options[_select.selectedIndex].value\n        }\n        base.setValue = function(v) {\n            base.value = v\n            let _select = base.element()\n            select.options[select.selectedIndex] = self._createSelectOption(v)\n            _select.value = v\n            self._dispatchEvent(base.element(), base.type)\n        }\n        base.getItems = function() {\n            return Array\n                .from(base.element().options)\n                .map(option => option.value)\n        }\n        base.setItems = function(items) {\n            const _current = {\n                selected: base.element().selectedIndex,\n                length: base.getItems().length\n            }\n            const _new = {\n                selected: -1,\n                length: items.length\n            }\n\n            if (_new.length > _current.length) {\n                if (_current.selected === -1 || _current.selected === '') {\n                    _new.selected = 0\n                }\n                if (_current.selected > -1) {\n                    _new.selected = _new.length - 1\n                }\n            }\n            if (_new.length < _current.length) {\n                if (_current.selected > - 1 && _current.selected < _new.length) {\n                    _new.selected = _current.selected\n                }\n                if (_current.selected > _new.length - 1) {\n                    _new.selected = _new.length - 1\n                }\n            }\n\n            for (let i = 0; i < base.element().options.length; i++) {\n                base.element().options[i].remove()\n            }\n            items.forEach(item => {\n                let _index = items.indexOf(item)\n                base.element().options[_index] = self._createSelectOption(\n                    item,\n                    _index = _new.selected ? true : false\n                )\n            })\n            base.value = items[_new.selected]\n            self._dispatchEvent(base.element(), base.type)\n        }\n        this._body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name]\n    }\n\n    /**\n     * Creates number control\n     * @param {string} name - name of the control\n     * @param {array} items - array with initial and step value\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let number = mySettings.number('Number', [10, 1], e => {})\n     */\n    number(name, items, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let input = this._createElement('input', {\n            class: 'sms-number',\n            id: base.id,\n            type: 'number',\n            value: items[0],\n            step: items[1]\n        })\n        input.addEventListener('input', e => {\n            base.value = parseFloat(e.target.value)\n            if (callback) {\n                callback(parseFloat(e))\n            }\n            if (self._globalWatcher !== null) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        base.type = 'number'\n        base.name = name\n        base.value = items[0]\n        base.callback = callback || null\n        base.getValue = function() {\n            return parseFloat(base.element().value)\n        }\n        base.setValue = function(v) {\n            base.element().value = v\n            base.value = v\n            self._dispatchEvent(base.element(), base.type)\n        }\n        wrapper.appendChild(label)\n        wrapper.appendChild(input)\n        this._body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name] = base\n    }\n\n    /**\n     * Creates file input control\n     * @param {string} name - name of the control\n     * @param {function} [callback] - function executed on each change\n     * @returns {object}\n     * @example\n     * let fileControl = mySettings.file('File control', someCallbackFunction)\n     */\n    file(name, callback) {\n        let self = this\n        let base = this._createControlBasics()\n        let wrapper = this._createElement('div', { class: 'sms-control' })\n        let label = this._createLabel(name)\n        let upload = this._createElement('input', {\n            class: 'sms-file',\n            id: base.id,\n            type: 'file'\n        })\n        base.name = name\n        base.type = 'file'\n        base.callback = callback || null\n        upload.addEventListener('change', e => {\n            base.value = e.target.value\n            if (callback) {\n                callback(e)\n            }\n            if (self._globalWatcher) {\n                self._callGlobalWatcher(e)\n            }\n        })\n        wrapper.appendChild(label)\n        wrapper.appendChild(upload)\n        base.getValue = function() {\n            return base.element().files[0]\n        }\n        base.setValue = function(v) {\n            base.value = v\n            base.element().files[0] = v\n            self._dispatchEvent(base.element(), base.type)\n        }\n        this._body.appendChild(wrapper)\n        this._controls[name] = base\n        return this._controls[name] = base\n    }\n\n    /**\n     * Watch panel for changes and fire callback on each change\n     * @param {function} callback - function executed on each change in the panel\n     * @returns {void}\n     * @example\n     * mySettings.watch(callback)\n     */\n    watch(callback) {\n        this._globalWatcher = callback\n    }\n\n    /**\n     * Load controls from the configuration object.\n     * @param {(object|string|array)} config - configuration object or JSON string or configuration array of objects\n     * @returns {void}\n     * @example\n     * const mySettings = new SmartSettings('Name', 10, 10)\n     * mySettings.loadConfig({\n     *      control1: {\n     *          type: 'color',\n     *          name: 'Color',\n     *          value: '#fd3ef4',\n     *          callback: someCallbackFunction\n     *      },\n     *      // etc.\n     * })\n     * \n     * // or\n     * mySettings.loadConfig('{\n     *      \"control1\": {\n     *          \"type\": \"color\",\n     *          \"name\": \"Color\",\n     *          \"value\": \"#fd3ef4\",\n     *          \"callback\": \"someCallbackFunction\"\n     *      },\n     *      // etc.\n     * }')\n     * \n     * // or\n     * mySettings.loadConfig([{\n     *      {\n     *          type: 'color',\n     *          name: 'Color',\n     *          value: '#fd3ef4',\n     *          callback: someCallbackFunction\n     *      },\n     *      // etc.\n     * ])\n     */\n    loadConfig(config) {\n        if (!config) {\n            throw new Error('There is no config provided')\n        }\n        if (typeof config === 'string' || !Array.isArray(config)) {\n            if (typeof config === 'string') {\n                config = JSON.parse(config)\n            }\n            for (let key in config) {\n                let _entry = config[key]\n                this._assignEntryToMethod(_entry)\n            }\n        }\n        if (Array.isArray(config) === true) {\n            config.forEach(entry => this._assignEntryToMethod(entry))\n        }\n    }\n}\n\nexport default SmartSettings"],"names":["styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","SmartSettings","name","left","top","initialLeft","initialTop","_hidden","_open","_draggable","_panel","_controls","_globalWatcher","_createUniqueId","_create","_body","childNodes","counter","uniqueId","attributes","element","key","setAttribute","_createElement","e","_entry","_isCallback","callback","button","range","items","select","text","value","textarea","checkbox","number","color","file","_eventType","dispatchEvent","Event","panelAttributes","panel","header","class","body","paragraph","addEventListener","toggle","innerText","id","basics","getElementById","removeAttribute","disabled","classList","remove","hidden","add","item","selected","option","parentElement","removeChild","show","hide","enable","disable","elem","getValue","setValue","values","i","typeCondition","getItems","Error","setItems","self","base","_createControlBasics","wrapper","_callGlobalWatcher","label","_createLabel","input","target","_dispatchEvent","span","parseFloat","v","min","max","step","checked","map","_createSelectOption","options","_select","selectedIndex","Array","from","_current","length","_new","forEach","_index","indexOf","upload","files","config","isArray","JSON","parse","_assignEntryToMethod","entry"],"mappings":"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"}